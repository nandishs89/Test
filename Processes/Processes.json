[
  {
    "Name": "Create Dim Employee",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#****Begin: Generated Statements***\r\nDIMENSIONDESTROY('Employee');\r\nDIMENSIONCREATE('Employee');\r\nDIMENSIONSORTORDER('Employee','BYINPUT','ASCENDING','BYHIERARCHY','ASCENDING');\r\nATTRDELETE('Employee','Loyal');\r\nATTRINSERT('Employee','','Loyal','N');\r\n#****End: Generated Statements****\r\n",
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\nDIMENSIONELEMENTINSERT('Employee','',vEmployee,'n');\r\nDIMENSIONELEMENTINSERT('Employee','',vDepartment,'c');\r\nDIMENSIONELEMENTINSERT('Employee','',vTotalCompany,'c');\r\nDIMENSIONELEMENTCOMPONENTADD('Employee',vDepartment,vEmployee,1.000000);\r\nDIMENSIONELEMENTCOMPONENTADD('Employee',vTotalCompany,vDepartment,1.000000);\r\n#****End: Generated Statements****\r\n",
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\nATTRPUTN(vLoyal,'Employee',vEmployee,'Loyal');\r\n#****End: Generated Statements****\r\n",
    "EpilogProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "DataSource": {
      "Type": "ASCII",
      "asciiDecimalSeparator": ".",
      "asciiDelimiterChar": ",",
      "asciiDelimiterType": "Character",
      "asciiHeaderRecords": "1",
      "asciiQuoteCharacter": "\"",
      "asciiThousandSeparator": ",",
      "dataSourceNameForClient": "D:\\Program Files\\TestHSBC_01DEV\\Data\\Sample Employee.csv",
      "dataSourceNameForServer": "D:\\Program Files\\TestHSBC_01DEV\\Data\\Sample Employee.csv"
    },
    "Parameters": null,
    "Variables": [
      {
        "Name": "vEmployee",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vDepartment",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vTotalCompany",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vLoyal",
        "Type": "Numeric",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}Drill_GO-Financial",
    "HasSecurityAccess": false,
    "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\ns_TimeStamp1 = TimSt (Now, '\\Y\\m\\d\\h\\i\\s');\r\nuniqueRunSuffix = TM1User() | '.' | s_TimeStamp1;\r\n\r\n#Link id:}Link_Link_5FFinancial-GO\r\n#Create per-run Source View for this regular link process\r\nvarRunSrcViewName = Drill_ID;\r\nViewDestroy('Metrics cube-Financial', varRunSrcViewName);\r\nViewCreate('Metrics cube-Financial', varRunSrcViewName );\r\n\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Set view orientation\r\nViewRowDimensionSet('Metrics cube-Financial', varRunSrcViewName, 'Metric-Financial', 1 );\r\nViewColumnDimensionSet('Metrics cube-Financial', varRunSrcViewName, 'Metric Indicators', 1 );\r\nViewTitleDimensionSet('Metrics cube-Financial', varRunSrcViewName, 'Time');\r\nViewTitleDimensionSet('Metrics cube-Financial', varRunSrcViewName, 'country');\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\nvarRunSrcViewName = Drill_ID;\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Auto mapped dimension: 'country'\r\nvTitle = Pcountry;\r\nViewTitleElementSet('Metrics cube-Financial', varRunSrcViewName,'country', DIMIX('country', vTitle));\r\n\r\n#Auto mapped dimension: 'Time'\r\nvTitle = PTime;\r\nViewTitleElementSet('Metrics cube-Financial', varRunSrcViewName,'Time', DIMIX('Time', vTitle));\r\n\r\nReturnViewHandle('Metrics cube-Financial',Drill_ID);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "cubename",
        "Prompt": "",
        "Value": "GO_Scorecards",
        "TYpe": "String"
      },
      {
        "Name": "Drill_ID",
        "Prompt": "",
        "Value": "Drill.1369412592029",
        "TYpe": "String"
      },
      {
        "Name": "Pcountry",
        "Prompt": "",
        "Value": "Total of  Country",
        "TYpe": "String"
      },
      {
        "Name": "PTime",
        "Prompt": "",
        "Value": "2013",
        "TYpe": "String"
      },
      {
        "Name": "Pgometric",
        "Prompt": "",
        "Value": "Gross profit",
        "TYpe": "String"
      },
      {
        "Name": "PMetric_Indicators",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}Drill_GO-HumanResource",
    "HasSecurityAccess": false,
    "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\ns_TimeStamp1 = TimSt (Now, '\\Y\\m\\d\\h\\i\\s');\r\nuniqueRunSuffix = TM1User() | '.' | s_TimeStamp1;\r\n\r\n#Link id:}Link_Link_5FHumanResource-GO\r\n#Create per-run Source View for this regular link process\r\nvarRunSrcViewName = Drill_ID;\r\nViewDestroy('Metrics cube-HumanResource', varRunSrcViewName);\r\nViewCreate('Metrics cube-HumanResource', varRunSrcViewName );\r\n\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Set view orientation\r\nViewRowDimensionSet('Metrics cube-HumanResource', varRunSrcViewName, 'metric-humanresource', 1 );\r\nViewColumnDimensionSet('Metrics cube-HumanResource', varRunSrcViewName, 'Metric Indicators', 1 );\r\nViewTitleDimensionSet('Metrics cube-HumanResource', varRunSrcViewName, 'Time');\r\nViewTitleDimensionSet('Metrics cube-HumanResource', varRunSrcViewName, 'country');\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\nvarRunSrcViewName = Drill_ID;\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Auto mapped dimension: 'country'\r\nvTitle = Pcountry;\r\nViewTitleElementSet('Metrics cube-HumanResource', varRunSrcViewName,'country', DIMIX('country', vTitle));\r\n\r\n#Auto mapped dimension: 'Time'\r\nvTitle = PTime;\r\nViewTitleElementSet('Metrics cube-HumanResource', varRunSrcViewName,'Time', DIMIX('Time', vTitle));\r\n\r\nReturnViewHandle('Metrics cube-HumanResource',Drill_ID);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "cubename",
        "Prompt": "",
        "Value": "GO_Scorecards",
        "TYpe": "String"
      },
      {
        "Name": "Drill_ID",
        "Prompt": "",
        "Value": "Drill.1369412804180",
        "TYpe": "String"
      },
      {
        "Name": "Pcountry",
        "Prompt": "",
        "Value": "Total of  Country",
        "TYpe": "String"
      },
      {
        "Name": "PTime",
        "Prompt": "",
        "Value": "2013",
        "TYpe": "String"
      },
      {
        "Name": "Pgometric",
        "Prompt": "",
        "Value": "Gross profit",
        "TYpe": "String"
      },
      {
        "Name": "PMetric_Indicators",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}Drill_GO-InternalProcess",
    "HasSecurityAccess": false,
    "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\ns_TimeStamp1 = TimSt (Now, '\\Y\\m\\d\\h\\i\\s');\r\nuniqueRunSuffix = TM1User() | '.' | s_TimeStamp1;\r\n\r\n#Link id:}Link_Link_5FInternalProcess-GO\r\n#Create per-run Source View for this regular link process\r\nvarRunSrcViewName = Drill_ID;\r\nViewDestroy('Metrics cube-InternalProcess', varRunSrcViewName);\r\nViewCreate('Metrics cube-InternalProcess', varRunSrcViewName );\r\n\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Set view orientation\r\nViewRowDimensionSet('Metrics cube-InternalProcess', varRunSrcViewName, 'metric-internalprocess', 1 );\r\nViewColumnDimensionSet('Metrics cube-InternalProcess', varRunSrcViewName, 'Metric Indicators', 1 );\r\nViewTitleDimensionSet('Metrics cube-InternalProcess', varRunSrcViewName, 'Time');\r\nViewTitleDimensionSet('Metrics cube-InternalProcess', varRunSrcViewName, 'country');\r\nViewTitleDimensionSet('Metrics cube-InternalProcess', varRunSrcViewName, 'product');\r\n\r\n#Unmapped dimension: 'product'\r\nSubsetDestroy('product', var1SourceViewSubset);\r\nSubsetCreateByMDX(var1SourceViewSubset, '{TM1DRILLDOWNMEMBER( {[product].[Total of Product]}, ALL, RECURSIVE)}');\r\nViewSubsetAssign('Metrics cube-InternalProcess', varRunSrcViewName, 'product', var1SourceViewSubset );\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\nvarRunSrcViewName = Drill_ID;\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Auto mapped dimension: 'country'\r\nvTitle = Pcountry;\r\nViewTitleElementSet('Metrics cube-InternalProcess', varRunSrcViewName,'country', DIMIX('country', vTitle));\r\n\r\n#Auto mapped dimension: 'Time'\r\nvTitle = PTime;\r\nViewTitleElementSet('Metrics cube-InternalProcess', varRunSrcViewName,'Time', DIMIX('Time', vTitle));\r\n\r\n#Unmapped dimension: 'product'\r\nvTitle = 'Total of Product';\r\nj=1;\r\nWHILE(j > 0 & j<=SUBSETGETSIZE('product', var1SourceViewSubset));\r\nvElem=SUBSETGETELEMENTNAME('product', var1SourceViewSubset, j);\r\nIF ((vElem @= vTitle));\r\nViewTitleElementSet('Metrics cube-InternalProcess', varRunSrcViewName,'product', j);\r\nj=-1;\r\nENDIF;\r\nj=j+1;\r\nEND;\r\n\r\nReturnViewHandle('Metrics cube-InternalProcess',Drill_ID);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "cubename",
        "Prompt": "",
        "Value": "GO_Scorecards",
        "TYpe": "String"
      },
      {
        "Name": "Drill_ID",
        "Prompt": "",
        "Value": "Drill.1369413184187",
        "TYpe": "String"
      },
      {
        "Name": "Pcountry",
        "Prompt": "",
        "Value": "Total of  Country",
        "TYpe": "String"
      },
      {
        "Name": "PTime",
        "Prompt": "",
        "Value": "2013",
        "TYpe": "String"
      },
      {
        "Name": "Pgometric",
        "Prompt": "",
        "Value": "Gross profit",
        "TYpe": "String"
      },
      {
        "Name": "PMetric_Indicators",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}Drill_GO-Marketing",
    "HasSecurityAccess": false,
    "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\ns_TimeStamp1 = TimSt (Now, '\\Y\\m\\d\\h\\i\\s');\r\nuniqueRunSuffix = TM1User() | '.' | s_TimeStamp1;\r\n\r\n#Link id:}Link_Link_5FMarketing-GO\r\n#Create per-run Source View for this regular link process\r\nvarRunSrcViewName = Drill_ID;\r\nViewDestroy('Metrics cube-Marketing', varRunSrcViewName);\r\nViewCreate('Metrics cube-Marketing', varRunSrcViewName );\r\n\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Set view orientation\r\nViewRowDimensionSet('Metrics cube-Marketing', varRunSrcViewName, 'metric-marketing', 1 );\r\nViewColumnDimensionSet('Metrics cube-Marketing', varRunSrcViewName, 'Metric Indicators', 1 );\r\nViewTitleDimensionSet('Metrics cube-Marketing', varRunSrcViewName, 'Time');\r\nViewTitleDimensionSet('Metrics cube-Marketing', varRunSrcViewName, 'country');\r\n\r\n#Manually mapped dimension: 'metric-marketing'\r\nSubsetDestroy('metric-marketing', var1SourceViewSubset);\r\nIF ((Pgometric @= 'Customer count'));\r\nSubsetCreateByMDX(var1SourceViewSubset, '{[metric-marketing].[Customer count]}');\r\nELSEIF ((Pgometric @= 'Product count'));\r\nSubsetCreateByMDX(var1SourceViewSubset, '{[metric-marketing].[Product count]}');\r\nELSEIF ((Pgometric @= 'Customer survey'));\r\nSubsetCreateByMDX(var1SourceViewSubset, '{[metric-marketing].[Customer survey]}');\r\nELSEIF ((Pgometric @= 'Campaign count'));\r\nSubsetCreateByMDX(var1SourceViewSubset, '{[metric-marketing].[Campaign count]}');\r\nELSEIF ((Pgometric @= 'Product survey'));\r\nSubsetCreateByMDX(var1SourceViewSubset, '{[metric-marketing].[Product survey]}');\r\nENDIF;\r\nViewSubsetAssign('Metrics cube-Marketing', varRunSrcViewName, 'metric-marketing', var1SourceViewSubset );\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\nvarRunSrcViewName = Drill_ID;\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Auto mapped dimension: 'country'\r\nvTitle = Pcountry;\r\nViewTitleElementSet('Metrics cube-Marketing', varRunSrcViewName,'country', DIMIX('country', vTitle));\r\n\r\n#Auto mapped dimension: 'Time'\r\nvTitle = PTime;\r\nViewTitleElementSet('Metrics cube-Marketing', varRunSrcViewName,'Time', DIMIX('Time', vTitle));\r\n\r\nReturnViewHandle('Metrics cube-Marketing',Drill_ID);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "cubename",
        "Prompt": "",
        "Value": "GO_Scorecards",
        "TYpe": "String"
      },
      {
        "Name": "Drill_ID",
        "Prompt": "",
        "Value": "Drill.1369413495077",
        "TYpe": "String"
      },
      {
        "Name": "Pcountry",
        "Prompt": "",
        "Value": "Total of  Country",
        "TYpe": "String"
      },
      {
        "Name": "PTime",
        "Prompt": "",
        "Value": "2013",
        "TYpe": "String"
      },
      {
        "Name": "Pgometric",
        "Prompt": "",
        "Value": "Gross profit",
        "TYpe": "String"
      },
      {
        "Name": "PMetric_Indicators",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}Drill_GO-Sales",
    "HasSecurityAccess": false,
    "PrologProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\ns_TimeStamp1 = TimSt (Now, '\\Y\\m\\d\\h\\i\\s');\r\nuniqueRunSuffix = TM1User() | '.' | s_TimeStamp1;\r\n\r\n#Link id:}Link_Link_5FSales-GO\r\n#Create per-run Source View for this regular link process\r\nvarRunSrcViewName = Drill_ID;\r\nViewDestroy('Metrics cube-Sales', varRunSrcViewName);\r\nViewCreate('Metrics cube-Sales', varRunSrcViewName );\r\n\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Set view orientation\r\nViewRowDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'metric-sales', 1 );\r\nViewColumnDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'Metric Indicators', 1 );\r\nViewTitleDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'Time');\r\nViewTitleDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'country');\r\nViewTitleDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'product');\r\nViewTitleDimensionSet('Metrics cube-Sales', varRunSrcViewName, 'retailer');\r\n\r\n#Unmapped dimension: 'product'\r\nSubsetDestroy('product', var1SourceViewSubset);\r\nSubsetCreateByMDX(var1SourceViewSubset, '{TM1DRILLDOWNMEMBER( {[product].[Total of Product]}, ALL, RECURSIVE)}');\r\nViewSubsetAssign('Metrics cube-Sales', varRunSrcViewName, 'product', var1SourceViewSubset );\r\n\r\n#Unmapped dimension: 'retailer'\r\nSubsetDestroy('retailer', var1SourceViewSubset);\r\nSubsetCreateByMDX(var1SourceViewSubset, '{TM1DRILLDOWNMEMBER( {[retailer].[Total of Retailer]}, ALL, RECURSIVE)}');\r\nViewSubsetAssign('Metrics cube-Sales', varRunSrcViewName, 'retailer', var1SourceViewSubset );\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#****Begin: Generated Statements***\r\n#****End: Generated Statements****\r\nvarRunSrcViewName = Drill_ID;\r\nvar1SourceViewSubset = varRunSrcViewName;\r\n\r\n#Auto mapped dimension: 'country'\r\nvTitle = Pcountry;\r\nViewTitleElementSet('Metrics cube-Sales', varRunSrcViewName,'country', DIMIX('country', vTitle));\r\n\r\n#Auto mapped dimension: 'Time'\r\nvTitle = PTime;\r\nViewTitleElementSet('Metrics cube-Sales', varRunSrcViewName,'Time', DIMIX('Time', vTitle));\r\n\r\n#Unmapped dimension: 'product'\r\nvTitle = 'Total of Product';\r\nj=1;\r\nWHILE(j > 0 & j<=SUBSETGETSIZE('product', var1SourceViewSubset));\r\nvElem=SUBSETGETELEMENTNAME('product', var1SourceViewSubset, j);\r\nIF ((vElem @= vTitle));\r\nViewTitleElementSet('Metrics cube-Sales', varRunSrcViewName,'product', j);\r\nj=-1;\r\nENDIF;\r\nj=j+1;\r\nEND;\r\n\r\n#Unmapped dimension: 'retailer'\r\nvTitle = 'Total of Retailer';\r\nj=1;\r\nWHILE(j > 0 & j<=SUBSETGETSIZE('retailer', var1SourceViewSubset));\r\nvElem=SUBSETGETELEMENTNAME('retailer', var1SourceViewSubset, j);\r\nIF ((vElem @= vTitle));\r\nViewTitleElementSet('Metrics cube-Sales', varRunSrcViewName,'retailer', j);\r\nj=-1;\r\nENDIF;\r\nj=j+1;\r\nEND;\r\n\r\nReturnViewHandle('Metrics cube-Sales',Drill_ID);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "cubename",
        "Prompt": "",
        "Value": "GO_Scorecards",
        "TYpe": "String"
      },
      {
        "Name": "Drill_ID",
        "Prompt": "",
        "Value": "Drill.1440613972284",
        "TYpe": "String"
      },
      {
        "Name": "Pcountry",
        "Prompt": "",
        "Value": "Total of Country or Region",
        "TYpe": "String"
      },
      {
        "Name": "PTime",
        "Prompt": "",
        "Value": "2017",
        "TYpe": "String"
      },
      {
        "Name": "Pgometric",
        "Prompt": "",
        "Value": "Gross profit",
        "TYpe": "String"
      },
      {
        "Name": "PMetric_Indicators",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_add_user_security_from_file",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_add_user_security_from_file';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\tpExecutionId, pAppId, pReviewerEditOn, pSourceFile, pCubeInfo, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIQuoteCharacter = '';\r\nDatasourceASCIIHeaderRecords = 1;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\n\tTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check application dimension');\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppElementSecurityCube = '}ElementSecurity_' | cApplicationsDim;\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t'pGuid', pExecutionId,\r\n\t'pProcess', cTM1Process,\r\n\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t'pErrorDetails', cApplicationsDim,\r\n\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check application id', pAppId);\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t'pGuid', pExecutionId,\r\n\t'pProcess', cTM1Process,\r\n\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Get Approval dimension and subset');\r\nEndIf;\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncSecuritySet = ATTRS('}tp_applications', pAppId,  'SecuritySet');\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId, 'SecurityMethod');\r\ncElementSecurity = 'ELEMENT_SECURITY';\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t'tp_get_application_attributes', cApprovalDim, cApprovalSubset, \r\n\t\tcSecuritySet,cShadowApprovalDim,cVersionDim, cVersionSlicesWrite );\r\nEndIf;\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndIf;\r\n\t\t\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cApprovalDim @= '');\r\n\tcOwnPermissionElement = 'OWN';\r\n\tcAppPermSecurityCube = '}CellSecurity_' | cControlPrefix | 'tp_application_root_permissions';\r\n\t\r\n\tcGroupsDimSize = DIMSIZ('}Groups');\r\n\tvIndexI = 1;\r\n\tWhile (vIndexI <= cGroupsDimSize);\r\n\t\r\n\t\tvGroup = DIMNM('}Groups', vIndexI);\r\n\t\tIf (vGroup @<> 'Admin' & vGroup @<> 'DataAdmin' & vGroup @<> 'SecurityAdmin');\r\n\t\t\tCellPutS('NONE', cAppElementSecurityCube, pAppId, vGroup);\r\n\t\t\tCellPutS('NONE', cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndexI = vIndexI + 1;\r\n\tEnd;\r\nElse;\r\n\r\n\t#***\r\n\tvAppSubset = 'temp_app_' | pAppId;\r\n\tvAppDim = '}tp_intermediate_security_applications';\r\n\tIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\t\tSubsetDestroy(vAppDim, vAppSubset);\r\n\tEndIf;\r\n\tSubsetCreate(vAppDim, vAppSubset);\r\n\tSubsetElementInsert(vAppDim, vAppSubset, pAppId, 1);\r\n\t#***\r\n\r\n\tcApprovalDimSize = DIMSIZ(cApprovalDim);\r\n\tcApprovalSubsetSize = SubsetGetSize(cApprovalDim, cApprovalSubset);\r\n\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check permission cube');\r\n\tEndIf;\r\n\t\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tIf (CubeExists(cPermissionCube) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check cell level security cube');\r\n\tEndIf;\r\n\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\n\tIf (CubeExists(cCellSecurityCube) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cCellSecurityCube,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tStringGlobalVariable('gTopNode');\r\n\tNumericGlobalVariable('gTopLevel');\r\n\t\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_top_node',\r\n\t'pExecutionId', pExecutionId, 'pDim', cApprovalDim, 'pSubset', cApprovalSubset);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t'tp_get_top_node', gTopNode, NumberToString(gTopLevel));\r\n\tEndIf;\r\n\r\n\t#*** Zero out the values in cubes that are not in the approval subset\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out the values in cubes that are not in the approval subset');\r\n\tEndIf;\r\n\r\n\tcElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\n\tcElementSecurityCubeOnApproval = '}ElementSecurity_' | cApprovalDim;\r\n\r\n\tcPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\n\r\n\t#* Zero out cell security cube\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out cell security cube');\r\n\tEndIf;\r\n\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_cell_security_view_' | pExecutionId;\r\n\t\tViewCreate(cCellSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cCellSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cCellSecurityCube, vAllView, cShadowApprovalDim, 1);\r\n\t\tViewTitleDimensionSet(cCellSecurityCube, vAllView, cPermissionsDim);\r\n\r\n\t\tViewZeroOut(cCellSecurityCube, vAllView);\r\n\t\tViewDestroy(cCellSecurityCube, vAllView);\r\n\tEndIf;\r\n\r\n\t# Zero out RDCLS intermediate cubes for this applications only\r\n\tcubeSeparater = '*';\r\n\tvPosCube = 0;\r\n\tvStringToScan = pCubeInfo;\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\tvFirstElement = 1;\r\n\r\n\r\n\tWhile (vPosCube >0);\r\n\t\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\t\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Udate RDCS cubes pAppId=' | pAppId | ' CubeName=' | vCubeName );\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\n\t\t\tvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\t\t\r\n\t\t\t#clear RDCLS intermediate cube for this application only\r\n\t\t\tIF (cubeExists(vRDCLSIntermediateCube) >0);\r\n\t\t\t\tIF (pIncremental @= 'N');\r\n\t\t\t\t\tvAllView = 'tp_temp_RDCLS_view_' | pExecutionId;\r\n\t\t\t\t\tViewCreate(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\t\tViewColumnDimensionSet(vRDCLSIntermediateCube, vAllView, vIntermediateSecurityMeasureDim, 1);\r\n\t\t\t\t\tViewRowDimensionSet(vRDCLSIntermediateCube, vAllView, cApprovalDim, 1);\r\n\t\t\t\t\tViewTitleDimensionSet(vRDCLSIntermediateCube, vAllView, vAppDim);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vAllView, vAppDim, vAppSubset);\r\n\t\t\t\t\tViewZeroOut(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\t\tViewDestroy(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\tElse;\r\n\t\t\t\t\t#TODO zero out complement subset view\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\tEndIf;\r\n\t\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\tEnd;\r\n\r\n\t#* TODO Zero out element security intermediate cubes for this application only\r\n\r\n\r\n\t#* Zero out element security cube for shadow approval dimension\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_elem_security_view_' | pExecutionId;\r\n\t\tViewCreate(cElementSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cElementSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cElementSecurityCube, vAllView,cShadowApprovalDim , 1);\r\n\t\tViewZeroOut(cElementSecurityCube, vAllView);\r\n\t\tViewDestroy(cElementSecurityCube, vAllView);\r\n\t\t\r\n\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\tvAllView = 'tp_all_elem_security_view_' | pExecutionId;\r\n\t\t\tViewCreate(cElementSecurityCubeOnApproval, vAllView);\r\n\t\t\tViewColumnDimensionSet(cElementSecurityCubeOnApproval, vAllView, '}Groups', 1);\r\n\t\t\tViewRowDimensionSet(cElementSecurityCubeOnApproval, vAllView,cShadowApprovalDim , 1);\r\n\t\t\tViewZeroOut(cElementSecurityCubeOnApproval, vAllView);\r\n\t\t\tViewDestroy(cElementSecurityCubeOnApproval, vAllView);\r\n\t\tEndif;\r\n\tEndIf;\r\n\r\n\t#* Zero out application element security cube\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out application element security cube');\r\n\tEndIf;\r\n\r\n\tvAppSubset = 'temp_app_' | pAppId;\r\n\tIF (SubsetExists(cApplicationsDim, vAppSubset)>0);\r\n\t\tsubsetDestroy(cApplicationsDim, vAppSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cApplicationsDim, vAppSubset);\r\n\tSubsetElementInsert(cApplicationsDim, vAppSubset, pAppId, 1);\r\n\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_app_security_view_' | pExecutionId;\r\n\t\tViewCreate(cAppElementSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cAppElementSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cAppElementSecurityCube, vAllView,cApplicationsDim , 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vAllView, cApplicationsDim, vAppSubset);\r\n\t\tViewZeroOut(cAppElementSecurityCube, vAllView);\r\n\t\tViewDestroy(cAppElementSecurityCube, vAllView);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\n#If this is an incremental security update, \r\n#We need to create a temp dimension that records all groups that have new updates\r\nvIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;\r\n\r\nIF (pIncremental @= 'Y');\r\n\tIF (DimensionExists(vIncrGroupDim) >0);\r\n\t\tDimensionDestroy(vIncrGroupDim);\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIncrGroupDim);\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cDataLog;\r\n\r\ncRightView = 'VIEW';\r\ncRightEdit = 'EDIT';\r\ncRightSubmit = 'SUBMIT';\r\ncRightReview = 'REVIEW';\r\ncRightOwn = 'OWN';\r\n\r\ncView = 'VIEW';\r\ncAnnotate = 'ANNOTATE';\r\ncEdit = 'EDIT';\r\ncReject = 'REJECT';\r\ncSubmit = 'SUBMIT';\r\n\r\ncCubeSecurityCube = '}CubeSecurity';\r\ncDimensionSecurityCube = '}DimensionSecurity';\r\ncElementAttributesPrefix = '}ElementAttributes_';\r\n\r\nIF (pReviewerEditOn @= 'T');\r\n\tcReviewerEditOn ='T';\r\nElse;\r\n\tcReviewerEditOn = 'F';\r\nENDIF;\r\n\r\ncViewDepth = NUMBR(vViewDepth);\r\ncReviewDepth = NUMBR(vReviewDepth);\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Security set', cSecuritySet, 'Node', vNode, 'Group', vGroup, 'Right', vRight);\r\nEndIf;\r\n\r\ncNone = 'NONE';\r\ncRead = 'READ';\r\ncWrite = 'WRITE';\r\ncLock = 'WRITE';\r\n\r\n#***\r\nIF (DIMIX('}Groups', vGroup)>0);\r\n\tcGroupPName = DimensionElementPrincipalName('}Groups', vGroup);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Group principal name', cGroupPName);\r\n\tEndIf;\r\nElse;\r\n\tcGroupPName = '';\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Group not found');\r\n\tEndIf;\r\nEndIf;\r\n\r\n#Insert the group into the incr temp group dimension\r\n#then zero out the views on this group\r\nvContinueNodeUpdate = 'Y';\r\nIF (pIncremental @= 'Y' & cGroupPName @<> '');\r\n\r\n\tIF (vNode @= '');\r\n\t\tvContinueNodeUpdate = 'N';\r\n\tEndIf;\r\n\r\n\tIF (DIMIX(vIncrGroupDim, cGroupPName) =0);\r\n\r\n\t\t#create a group subset that contains this group only\r\n\t\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\t\tvGroupDim = '}Groups';\r\n\t\tIF (SubsetExists(vGroupDim, vTempGroupSubset)>0);\r\n\t\t\tSubsetDestroy(vGroupDim, vTempGroupSubset);\r\n\t\tEndIf;\r\n\t\tSubsetCreate(vGroupDim, vTempGroupSubset);\r\n\t\tSubsetElementInsert(vGroupDim, vTempGroupSubset, cGroupPName, 1);\r\n\r\n\t\t#zero out views for this application and group slice\r\n\t\tvGroupView = 'tp_temp_group_view_' | pExecutionId;\r\n\r\n\t\t#zero out cell security permission cube on this group slice\r\n\t\tViewCreate(cCellSecurityCube, vGroupView);\r\n\t\tViewTitleDimensionSet(cCellSecurityCube, vGroupView, vGroupDim);\r\n\t\tViewSubsetAssign(cCellSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cCellSecurityCube, vGroupView, cShadowApprovalDim, 1);\r\n\t\tViewColumnDimensionSet(cCellSecurityCube, vGroupView, cPermissionsDim,1);\r\n\r\n\t\tViewZeroOut(cCellSecurityCube, vGroupView);\r\n\t\tViewDestroy(cCellSecurityCube, vGroupView);\r\n\r\n\t\t#zero out element security on shadow approval dimension on this group slice\r\n\t\tViewCreate(cElementSecurityCube, vGroupView);\r\n\t\tViewColumnDimensionSet(cElementSecurityCube, vGroupView, vGroupDim, 1);\r\n\t\tViewSubsetAssign(cElementSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cElementSecurityCube, vGroupView,cShadowApprovalDim , 1);\r\n\t\tViewZeroOut(cElementSecurityCube, vGroupView);\r\n\t\tViewDestroy(cElementSecurityCube, vGroupView);\r\n\r\n\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t#zero out element security on approval dimension on this group slice\r\n\t\t\tViewCreate(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\t\tViewColumnDimensionSet(cElementSecurityCubeOnApproval, vGroupView, vGroupDim, 1);\r\n\t\t\tViewSubsetAssign(cElementSecurityCubeOnApproval, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\t\tViewRowDimensionSet(cElementSecurityCubeOnApproval, vGroupView,cShadowApprovalDim , 1);\r\n\t\t\tViewZeroOut(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\t\tViewDestroy(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\tEndif;\r\n\t\t#***\r\n\t\t#zero out RDCLS intermediate cube on the group and application slice\r\n\t\tcubeSeparater = '*';\r\n\t\tvPosCube = 0;\r\n\t\tvStringToScan = pCubeInfo;\r\n\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\r\n\t\tWhile (vPosCube >0);\r\n\t\t\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\t\t\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\t\t\tIf (vFlagCube @= 'A' );\r\n\t\t\t\tvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\n\t\t\t\tvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\t\t\r\n\t\t\t\tIF (cubeExists(vRDCLSIntermediateCube) >0);\r\n\r\n\t\t\t\t\tViewCreate(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\t\tViewColumnDimensionSet(vRDCLSIntermediateCube, vGroupView, vIntermediateSecurityMeasureDim, 1);\r\n\t\t\t\t\tViewRowDimensionSet(vRDCLSIntermediateCube, vGroupView, vGroupDim, 1);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\t\t\t\tViewTitleDimensionSet(vRDCLSIntermediateCube, vGroupView, vAppDim);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vGroupView, vAppDim, vAppSubset);\r\n\t\t\t\t\tViewZeroOut(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\t\tViewDestroy(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\t\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\t\tEnd;\r\n\r\n\t\t#***\r\n\t\t#zero out application element security cube for group and application slice\r\n\t\tViewCreate(cAppElementSecurityCube, vGroupView);\r\n\t\tViewColumnDimensionSet(cAppElementSecurityCube, vGroupView, vGroupDim, 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cAppElementSecurityCube, vGroupView,cApplicationsDim , 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vGroupView, cApplicationsDim, vAppSubset);\r\n\t\tViewZeroOut(cAppElementSecurityCube, vGroupView);\r\n\t\tViewDestroy(cAppElementSecurityCube, vGroupView);\r\n\r\n\t\t#Insert this group into the temp dimension\r\n\t\tDimensionElementInsertDirect(vIncrGroupDim, '',cGroupPName ,'N');\r\n\r\n\t\tIF (SubsetExists(vGroupDim, vTempGroupSubset)>0);\r\n\t\t\tSubsetDestroy(vGroupDim, vTempGroupSubset);\r\n\t\tEndif;\r\n\tEndif;\r\nEndif;\r\n\r\nIf (cApprovalDim @<> '' & cGroupPName @<> '' & vContinueNodeUpdate @= 'Y');\r\n\r\n\tIf (DIMIX(cShadowApprovalDim, vNode) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t\t'pErrorDetails', cShadowApprovalDim | ', ' | vNode,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX('}Groups', vGroup) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_GROUP_NOT_EXIST',\r\n\t\t\t'pErrorDetails', '}Groups' | ', ' | vGroup,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcNodePName = DimensionElementPrincipalName(cShadowApprovalDim, vNode);\r\n\t\r\n\tIf ((cNodePName @<> gTopNode) & (ELISANC(cShadowApprovalDim, gTopNode, cNodePName) = 0));\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NODE_NOT_EXIST_IN_SUBSET',\r\n\t\t\t'pErrorDetails', cApprovalDim | ', ' | cApprovalSubset | ', ' | cNodePName,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Get node and group principal name', cNodePName, cGroupPName);\r\n\tEndIf;\r\n\t\r\n\t# Give read right to the attributes dimension and cube of the approval dimension\r\n\tcElementAttributes = cElementAttributesPrefix | cShadowApprovalDim;\r\n\tIf (DimensionExists(cElementAttributes) <> 0);\r\n\t\tCellPutS(cRead, cDimensionSecurityCube, cElementAttributes, cGroupPName);\r\n\tEndIf;\r\n\tIf (CubeExists(cElementAttributes) <> 0);\r\n\t\tCellPutS(cRead, cCubeSecurityCube, cElementAttributes, cGroupPName);\r\n\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\t\tIf (DTYPE(cShadowApprovalDim, cNodePName) @= 'C');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Consolidation node', cNodePName);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Assign rights to self', cNodePName);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tIf (vRight @= cRightSubmit);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIF (cNodePName @<> gTopNode);\r\n\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tElse;\r\n\t\t\t\t\t#Submit rights on top node can reject the top node\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cReject, cGroupPName);\t\t\t\t\t\t\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '142:ElementSecurityPut for submit ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube, cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\r\n\t\r\n\t\t\tElseIf (vRight @= cRightReview);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '169:ElementSecurityPut for review ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube, cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\r\n\t\t\tElseIf (vRight @= cRightView);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '197:ElementSecurityPut for view ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\r\n\t\t\tEndIf;\r\n\t\r\n\r\n\t\t\t#***\r\n\t\r\n\t\t\tcLevel = ELLEV(cShadowApprovalDim, cNodePName);\r\n\r\n\t\t\t#IF(2)\r\n\t\t\tIf (cLevel > cReviewDepth);\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Level is greater than review depth: ' | NumberToString(cLevel));\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\r\n\t\t\t\tcReviewDescendantsSubset = 'tp_temp_review_descendants_' | pExecutionId;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Pass review right down, review depth: ' | vReviewDepth);\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\tStringGlobalVariable('gMdxFindDescendants');\r\n\t\r\n\t\t\t\t#IF(2.1)\r\n\t\t\t\tIf ((vRight @= cRightSubmit % vRight @= cRightReview) & (cReviewDepth > 0));\r\n\t\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_mdx_find_descendants', \r\n\t\t\t\t\t\t'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', '', 'pNode', cNodePName, 'pDepth', vReviewDepth, 'pSelf', 'Y');\r\n\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\t\t\t\tSubsetCreateByMDX(cReviewDescendantsSubset, gMdxFindDescendants);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cReviewDescendantsSubset);\r\n\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\tcReviewDescendantsSubsetSize = SubsetGetSize(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cReviewDescendantsSubsetSize);\r\n\t\t\t\t\t\tvReadOrWrite = cRead;\r\n\t\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cReviewDescendantsSubset, vIndex);\r\n\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\t\t#IF(2.1.1)\r\n\t\t\t\t\t\tIf (vElementPName @<> cNodePName);\r\n\t\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***Add additional privileges with reviewer edit on\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tIf (cReviewerEditOn @= 'T');\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tIf (DTYPE(cShadowApprovalDim, vElementPName) @<> 'C');\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cLock;\r\n\t\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cWrite;\r\n\t\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tElse;\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t\t'306:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | vReadOrWrite | ',' |  cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIf ( cCellValue @<> vReadOrWrite);\r\n \t\t\t\t\t\t\t\tIf (vReadOrWrite @= cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cWrite & cCellValue @<> cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cRead & cCellValue @<>cLock & cCellValue @<> cWrite);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t#IF(2.1.1)\r\n\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\tvIndex = vIndex +1;\r\n\t\t\t\t\tEnd;\r\n\t\r\n\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\r\n\r\n\t\t\t\t#IF(2.1)\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t#IF(2)\r\n\t\t\tElse;\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Level is less than or equal to review depth: ' | NumberToString(cLevel));\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t#IF(2.2)\r\n\t\t\t\tIf ((vRight @= cRightSubmit % vRight @= cRightReview));\r\n\t\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cApprovalDimSize);\r\n\t\t\t\t\t\tvReadOrWrite = cRead;\r\n\t\t\t\t\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\t\t\t\t#IF(2.2.1)\r\n\t\t\t\t\t\tIf (ELISANC(cShadowApprovalDim, cNodePName, vElement) = 1);\r\n\t\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***Add additional privileges with reviewer edit on\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tIf (cReviewerEditOn @= 'T');\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tIf (DTYPE(cShadowApprovalDim, vElementPName) @<> 'C');\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cLock;\r\n\t\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cWrite;\r\n\t\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tElse;\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t\t'392:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | vReadOrWrite | ',' |  cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIf ( cCellValue @<> vReadOrWrite);\r\n \t\t\t\t\t\t\t\tIf (vReadOrWrite @= cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cWrite & cCellValue @<> cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\t\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cRead & cCellValue @<>cLock & cCellValue @<> cWrite);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\r\n\t\t\t\t\t\t#IF(2.2.1)\r\n\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\t\tEnd;\r\n\t\r\n\t\t\t\t#IF(2.2)\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t#IF(2)\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\t#***\r\n\t\r\n\t\t\t#IF(3)\r\n\t\t\tIf (((vRight @= cRightSubmit % vRight @= cRightReview) & (cViewDepth > cReviewDepth)) %\r\n\t    \t\t(vRight @= cRightView));\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Pass View right down, view depth: ' | vViewDepth);\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t#IF(3.1)\r\n\t\t\t\tIf (cLevel > cViewDepth);\r\n\t\r\n\t\t\t\tcViewDescendantsSubset = 'tp_temp_view_descendants_' | pExecutionId;\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_mdx_find_descendants', \r\n\t\t\t\t\t'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', '', 'pNode', cNodePName, 'pDepth', vViewDepth, 'pSelf', 'Y');\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tSubsetDestroy(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\t\t\tSubsetCreateByMDX(cViewDescendantsSubset, gMdxFindDescendants);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cViewDescendantsSubset);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tcViewDescendantsSubsetSize = SubsetGetSize(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tWhile (vIndex <= cViewDescendantsSubsetSize);\r\n\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cViewDescendantsSubset, vIndex);\r\n\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\tIf (vElementPName @<> cNodePName);\r\n\t\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\tIf ( cCellValue @= '' % cCellValue @= cNone);\r\n\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\r\n\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\tvIndex = vIndex +1;\r\n\t\t\t\tEnd;\r\n\t\r\n\t\t\t\tSubsetDestroy(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\r\n\t\t\t#IF(3.1)\r\n\t\t\tElse;\r\n\t\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tWhile (vIndex <= cApprovalDimSize);\r\n\t\t\t\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\t\t\t#IF(3.1.1)\r\n\t\t\t\t\tIf (ELISANC(cShadowApprovalDim, cNodePName, vElement) = 1);\r\n\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\t\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t'499:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\tIf ( cCellValue @= '' % cCellValue @= cNone);\r\n\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCube, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\r\n\t\t\t\t\t#IF(3.1.1)\r\n\t\t\t\t\tEndIf;\r\n\t\t\r\n\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tEnd;\r\n\t\r\n\t\t\t#IF(3.1)\r\n\t\t\tEndIf;\r\n\t\r\n\t\t#IF(3)\r\n\t\tElse;\r\n\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'No need to pass View right down, view depth: ' | vViewDepth);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t#IF(3)\r\n\t\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Leaf node', cNodePName);\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vRight @= cRightSubmit);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '551:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tCellPutS(cLock, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\tCellPutS(cLock, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\tEndif;\r\n\t\tElseIf (vRight @= cRightEdit);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '582:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cWrite | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tcCellValue = CellGetS(cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIf ( cCellValue @<> cLock);\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\t\tEndIf;\r\n\t\r\n\t\tElseIf (vRight @= cRightView);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '609:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tcCellValue = CellGetS(cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIf ( cCellValue @<> cLock & cCellValue @<> cWrite);\r\n\t\t\t\tCellPutS(cRead, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\t\tEndIf;\r\n\t\r\n\t\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make Application element readable for group', cGroupPName);\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (vRight @= cRightView % vRight @= cRightEdit % vRight @= cRightReview % vRight @= cRightSubmit);\r\n\tCellPutS(cRead, cAppElementSecurityCube, pAppId, cGroupPName);\r\n\t\r\n\t# For Central applications view right is equivalent to own right\r\n\tIf (cApprovalDim @= '' & vRight @= cRightView);\r\n\t\tCellPutS(cRead, cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\tEndIf;\r\nElseIf (vRight @= cRightOwn);\r\n\tCellPutS(cRead, cAppElementSecurityCube, pAppId, cGroupPName);\r\n\tCellPutS(cRead, cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\nEndIf;\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Starting epilog.');\r\nEndIf;\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(vAppDim, vAppSubset) >0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(cApplicationsDim, vAppSubset) >0);\r\n\tsubsetDestroy(cApplicationsDim, vAppSubset);\r\nEndif;\r\n\r\n#***\r\n#If using element security is enforced by rule on the approval dimension\r\n#We need to call SecurityRefresh after rights saving\r\ncConfigAttrCube = '}ElementAttributes_}tp_config';\r\nvEnforceElementSecurityOnApproval = CellGetS(cConfigAttrCube, 'EnableElementSecurityOnApproval', 'String Value');\r\ncApplicationAttrCube = '}ElementAttributes_}tp_applications';\r\nvSecurityMethod = CellGetS(cApplicationAttrCube, pAppId, 'SecurityMethod');\r\nIF (vEnforceElementSecurityOnApproval @= 'Y' & vSecurityMethod @= 'CELL_SECURITY');\r\n\tSecurityRefresh();\r\nEndif;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pReviewerEditOn",
        "Prompt": "",
        "Value": "F",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeInfo",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIncremental",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "vNode",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vGroup",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vRight",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vViewDepth",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vReviewDepth",
        "Type": "String",
        "Position": "5",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_admin_application_users",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\tpExecutionId, pControl);\r\nEndIf;\r\n\r\n#*** Check everyone group\r\ncEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', '}Groups' | ', ' | cEveryoneGroup,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\nvMDX = '{FILTER([}Clients].MEMBERS, [}ClientGroups].[}Groups].[' | cEveryoneGroup | '] = \"\"), [}Clients].[Admin]}';\r\ncNewUsersSubset = 'tp_temp_new_users_' | pExecutionId;\r\n\r\nIf (SubsetExists('}Clients', cNewUsersSubset) > 0);\r\n\tSubsetDestroy('}Clients', cNewUsersSubset);\r\nEndIf;\r\n\r\nSubsetCreateByMdx(cNewUsersSubset, vMDX);\r\n\r\ncNewUsersSubsetSize = SubsetGetSize('}Clients', cNewUsersSubset);\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'New user count: ' | TRIM(STR(cNewUsersSubsetSize, 5, 0)));\r\nEndIf;\r\n\r\ncClientsDimSize = DIMSIZ('}Clients');\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'All user count: ' | TRIM(STR(cClientsDimSize, 5, 0)));\r\nEndIf;\r\n\r\nIf (cClientsDimSize < 2*cNewUsersSubsetSize);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Add all users');\r\n\tEndIf;\r\n\t\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cClientsDimSize);\r\n\t\tvClient = DIMNM('}Clients', vIndex);\r\n\t\t\r\n\t\tAssignClientToGroup(vClient, cEveryoneGroup);\r\n\t\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\nElse;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Only add new users');\r\n\tEndIf;\r\n\r\n\tvRealIndex = 1;\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cNewUsersSubsetSize);\r\n\t\tvClient = SubsetGetElementName('}Clients', cNewUsersSubset, vRealIndex);\r\n\t\t\r\n\t\tIf (vClient @<> 'Admin');\r\n\t\t\tAssignClientToGroup(vClient, cEveryoneGroup);\r\n\t\tElse;\r\n\t\t\tvRealIndex = vRealIndex + 1;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\nIf (SubsetExists('}Clients', cNewUsersSubset) > 0);\r\n\tSubsetDestroy('}Clients', cNewUsersSubset);\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#SecurityRefresh;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_admin_delete_all",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#Release all data reservation acquired for the application\r\n#clear requires data reservation flag for  application cubes\r\n#remove all control dimension filter subsets\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\r\ntotalApplications = DIMSIZ(cControlPrefix | 'tp_applications');\r\nindexApplication = 0;\r\nWhile (indexApplication < totalApplications);\r\n\tcApplicationID = DIMNM(cControlPrefix | 'tp_applications', indexApplication+1);\r\n\r\n\t#**remove control subset filter\r\n\tvDimensions = '}Dimensions';\r\n\tvTotalDimensions = DIMSIZ(vDimensions);\r\n\tlooper = vTotalDimensions;\r\n\r\n\tWhile (looper >= 1);\r\n\t\tvDimension = DIMNM(vDimensions, looper);\r\n\t\tIF (SUBST(vDimension, 1,1) @<> '}');\r\n\t\t\tvSubset = 'tp_' | cApplicationID;\r\n\t\t\tIF (SubsetExists(vDimension, vSubset) >0);\r\n\t\t\t\tSubsetDestroy(vDimension, vSubset);\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\t\r\n\t# remove existing reservations for the application\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_release_all', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', cApplicationID, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', cApplicationID, 'ApprovalDimension');\r\n\tcCubePropertiesCube = '}CubeProperties';\r\n\tif (CubeExists(cApplicationCubesCube) <> 0);\r\n\t\ttotalCubes = DIMSIZ('}Cubes');\r\n\t\tindexCube = 0;\r\n\t\tWhile (indexCube < totalCubes);\r\n\t\t\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\t\t\r\n\t\t\tcIsAppCube = CellGetS(cApplicationCubesCube, cApplicationID, cCubeName);\r\n\t\t\r\n\t\t\tIf ((cApprovalDIM @= '' & cIsAppCube @= 'Y') % cIsAppCube @= 'A');\r\n\t\t\t\t# clear the require reservation lag\r\n\t\t\t\tCellPutS('', cCubePropertiesCube, cCubeName, 'DATARESERVATIONMODE');\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tindexCube = indexCube + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\tindexApplication = indexApplication+1;\r\nEnd;\r\n\t\r\ncCubesDim = '}Cubes';\r\ncDimensionsDim = '}Dimensions';\r\ncClientsDim = '}Clients';\r\ncGroupsDim = '}Groups';\r\n\r\ncCubesDimSize = DIMSIZ(cCubesDim);\r\ncDimensionsDimSize = DIMSIZ(cDimensionsDim);\r\ncClientsDimSize = DIMSIZ(cClientsDim);\r\ncGroupsDimSize = DIMSIZ(cGroupsDim);\r\n\r\ncTpPrefix = cControlPrefix | 'tp_';\r\ncTpPrefixLength = LONG(cTpPrefix);\r\ncCellSecurityPrefix = '}CellSecurity_';\r\ncCellSecurityPrefixLength = LONG(cCellSecurityPrefix);\r\n\r\n#*** Destroy TP cubes\r\n\r\ncTpCubesDim = 'tptemp_cubes';\r\nDimensionDestroy(cTpCubesDim);\r\nDimensionCreate(cTpCubesDim);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cCubesDimSize);\r\n\tvElement = DIMNM(cCubesDim, vIndex);\r\n\tvNamePrefix = SUBST(vElement, 1, cTpPrefixLength);\r\n\r\n\tIf (cTpPrefix @= vNamePrefix);\r\n\t\tDimensionElementInsert(cTpCubesDim, '', vElement, 'S');\r\n\tEndIf;\r\n\r\n\tIf (SUBST(vElement, 1, cCellSecurityPrefixLength + cTpPrefixLength) @= \r\n\t    \t\t(cCellSecurityPrefix | cTpPrefix));\r\n\t\tDimensionElementInsert(cTpCubesDim, '', vElement, 'S');\r\n\tEndIf;\r\n\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\ncTpCubesDimSize = DIMSIZ(cTpCubesDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cTpCubesDimSize);\r\n\tvElement = DIMNM(cTpCubesDim, vIndex);\r\n\tCubeDestroy(vElement);\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\nDimensionDestroy(cTpCubesDim);\r\n\r\n#*** Destroy TP dimensions\r\n\r\ncTpDimensionsDim = 'tptemp_dimensions';\r\nDimensionDestroy(cTpDimensionsDim);\r\nDimensionCreate(cTpDimensionsDim);\r\n\r\ncTpConfigDim = cControlPrefix | 'tp_config';\r\ncTpSystemConfigDim = cControlPrefix | 'tp_system_config';\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cDimensionsDimSize);\r\n\tvElement = DIMNM(cDimensionsDim, vIndex);\r\n\tvNamePrefix = SUBST(vElement, 1, cTpPrefixLength);\r\n\r\n\tIf (cTpPrefix @= vNamePrefix);\r\n\r\n\t\tIf(vElement @<> cTpConfigDim & vElement @<> cTpSystemConfigDim);\r\n\t\t\tDimensionElementInsert(cTpDimensionsDim, '', vElement, 'S');\r\n\t\tEndIf;\r\n\r\n\tEndIf;\r\n\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\ncTpDimensionsDimSize = DIMSIZ(cTpDimensionsDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cTpDimensionsDimSize);\r\n\tvElement = DIMNM(cTpDimensionsDim, vIndex);\r\n\tDimensionDestroy(vElement);\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\nDimensionDestroy(cTpDimensionsDim);\r\n\r\n#*** Remove TP test users\r\n\r\ncTpUsersDim = 'tptemp_users';\r\nDimensionDestroy(cTpUsersDim);\r\nDimensionCreate(cTpUsersDim);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cClientsDimSize);\r\n\tvElement = DIMNM(cClientsDim, vIndex);\r\n\tvNamePrefix = SUBST(vElement, 1, cTpPrefixLength);\r\n\t\r\n\tIf (cTpPrefix @= vNamePrefix);\r\n\t\tDimensionElementInsert(cTpUsersDim, '', vElement, 'S');\r\n\tEndIf;\r\n\t\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\ncTpUsersDimSize = DIMSIZ(cTpUsersDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cTpUsersDimSize);\r\n\tvElement = DIMNM(cTpUsersDim, vIndex);\r\n\tDeleteClient(vElement);\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\nDimensionDestroy(cTpUsersDim);\r\n\r\n#*** Remove TP groups\r\n\r\ncTpGroupsDim = 'tptemp_groups';\r\nDimensionDestroy(cTpGroupsDim);\r\nDimensionCreate(cTpGroupsDim);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cGroupsDimSize);\r\n\tvElement = DIMNM(cGroupsDim, vIndex);\r\n\tvNamePrefix = SUBST(vElement, 1, cTpPrefixLength);\r\n\t\r\n\tIf (cTpPrefix @= vNamePrefix);\r\n\t\tDimensionElementInsert(cTpGroupsDim, '', vElement, 'S');\r\n\tEndIf;\r\n\t\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\ncTpGroupsDimSize = DIMSIZ(cTpGroupsDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cTpGroupsDimSize);\r\n\tvElement = DIMNM(cTpGroupsDim, vIndex);\r\n\tDeleteGroup(vElement);\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\nDimensionDestroy(cTpGroupsDim);\r\n\r\nCubeDestroy(cApplicationCubesCube);\r\n\r\n# clean up tm1 distributed cubes\r\ncPlanningControlCube = cControlPrefix | 'PlanningControl';\r\ncApplicationNamesDim = cControlPrefix | 'ApplicationNames';\r\n\r\nCubeDestroy(cPlanningControlCube);\r\nDimensionDestroy(cApplicationNamesDim);\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_admin_state_summary",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\nDatasourceASCIIDelimiter = ',';\r\nDatasourceASCIIQuoteCharacter='';\r\n\r\n# Find application id.\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\nvAppId = DIMNM(cApplicationsDim, 1);\r\nElse;\r\nvAppId = pAppId;\r\nEndIf;\r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | vAppId;\r\nIf (CubeExists(cStateCube) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n# Define elements for approval node info\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\ncState = 'State';\r\ncViewed = 'Viewed';\r\ncSaved = 'Saved';\r\ncReviewed = 'Reviewed';\r\ncBeingEdited = 'BeingEdited';\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncStartEditingDate = 'StartEditingDate';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncDataChangeUser = 'DataChangeUser';\r\ncDataChangeDate = 'DataChangeDate';\r\n\r\n# define state values\r\ncNotStarted = '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\n# Get approval hierarchy\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\n# Define report variables\r\nvC_NotStarted_Name = 'Contributor (Not Started)';\r\nvC_NotStarted_Count = 0;\r\nvC_WorkInProgress_Name = 'Contributor (Work In Progress)';\r\nvC_WorkInProgress_Count = 0;\r\nvC_Incomplete_Name = 'Contributor (Incomplete)';\r\nvC_Incomplete_Count = 0;\r\nvC_Ready_Name = 'Contributor (Ready)';\r\nvC_Ready_Count = 0;\r\nvC_Locked_Name = 'Contributor (Locked)';\r\nvC_Locked_Count = 0;\r\nvC_Viewed_Name = 'Contributor (Viewed)';\r\nvC_Viewed_Count = 0;\r\nvC_Saved_Name = 'Contributor (Saved)';\r\nvC_Saved_Count = 0;\r\nvC_Reviewed_Name = 'Contributor (Reviewed)';\r\nvC_Reviewed_Count = 0;\r\n\r\nvR_NotStarted_Name = 'Reviewer (Not Started)';\r\nvR_NotStarted_Count = 0;\r\nvR_WOrkInProgress_Name = 'Reviewer (Work In Progress)';\r\nvR_WorkInProgress_Count = 0;\r\nvR_Incomplete_Name = 'Reviewer (Incomplete)';\r\nvR_Incomplete_Count = 0;\r\nvR_Ready_Name = 'Reviewer (Ready)';\r\nvR_Ready_Count = 0;\r\nvR_Locked_Name = 'Reviewer (Locked)';\r\nvR_Locked_Count = 0;\r\nvR_Viewed_Name = 'Reviewer (Viewed)';\r\nvR_Viewed_Count = 0;\r\nvR_Saved_Name = 'Reviewer (Saved)';\r\nvR_Saved_Count = 0;\r\nvR_Reviewed_Name = 'Reviewer (Reviewed)';\r\nvR_Reviewed_Count = 0;\r\n\r\n### Count nodes based on status\r\ncApprovalSubsetSize = SubsetGetSize(cShadowApprovalDim, cApprovalSubset);\r\nvIndex = 1;\r\nWhile (vIndex <= cApprovalSubsetSize);\r\nvNode = SubsetGetElementName(cShadowApprovalDim, cApprovalSubset, vIndex);\r\nvType = DTYPE(cShadowApprovalDim, vNode);\r\n\r\n# state\r\nvValue = CellGetS(cStateCube, vNode, cState);\r\nIf (vType @= 'C');\r\nIf (vValue @= '1');\r\nvR_Incomplete_Count = vR_Incomplete_Count + 1;\r\nElseIf (vValue @= '2');\r\nvR_WorkInProgress_Count = vR_WorkInProgress_Count + 1;\r\nElseIf (vValue @= '3');\r\nvR_Ready_Count = vR_Ready_Count + 1;\r\nElseIf (vValue @= '4');\r\nvR_Locked_Count = vR_Locked_Count + 1;\r\nElse;\r\nvR_NotStarted_Count = vR_NotStarted_Count + 1;\r\nEndIf;\r\nElse;\r\nIf (vValue @= '1');\r\nvC_Incomplete_Count = vC_Incomplete_Count + 1;\r\nElseIf (vValue @= '2');\r\nvC_WorkInProgress_Count = vC_WorkInProgress_Count + 1;\r\nElseIf (vValue @= '3');\r\nvC_Ready_Count = vC_Ready_Count + 1;\r\nElseIf (vValue @= '4');\r\nvC_Locked_Count = vC_Locked_Count + 1;\r\nElse;\r\nvC_NotStarted_Count = vC_NotStarted_Count + 1;\r\nEndIf;\r\nEndIf;\r\n\r\n# Viewed\r\nvValue = CellGetS(cStateCube, vNode, cViewed);\r\nIf (vType @= 'C');\r\nIf (vValue @= 'Y');\r\nvR_Viewed_Count = vR_Viewed_Count + 1;\r\nEndIf;\r\nElse;\r\nIf (vValue @= 'Y');\r\nvC_Viewed_Count = vC_Viewed_Count + 1;\r\nEndIf;\r\nEndIf;\r\n\r\n# Saved\r\nvValue = CellGetS(cStateCube, vNode, cSaved);\r\nIf (vType @= 'C');\r\nIf (vValue @= 'Y');\r\nvR_Saved_Count = vR_Saved_Count + 1;\r\nEndIf;\r\nElse;\r\nIf (vValue @= 'Y');\r\nvC_Saved_Count = vC_Saved_Count + 1;\r\nEndIf;\r\nEndIf;\r\n\r\n# Reviewed\r\nvValue = CellGetS(cStateCube, vNode, cReviewed);\r\nIf (vType @= 'C');\r\nIf (vValue @= 'Y');\r\nvR_Reviewed_Count = vR_Reviewed_Count + 1;\r\nEndIf;\r\nElse;\r\nIf (vValue @= 'Y');\r\nvC_Reviewed_Count = vC_Reviewed_Count + 1;\r\nEndIf;\r\nEndIf;\r\n\r\nvIndex = vIndex + 1;\r\nEnd;\r\n\r\n### Create report\r\nTextOutPut(pSummaryReportPath, vC_NotStarted_Name, NumberToString(vC_NotStarted_Count));\r\nTextOutPut(pSummaryReportPath, vC_Incomplete_Name, NumberToString(vC_Incomplete_Count));\r\nTextOutPut(pSummaryReportPath, vC_WorkInProgress_Name, NumberToString(vC_WorkInProgress_Count));\r\nTextOutPut(pSummaryReportPath, vC_Ready_Name, NumberToString(vC_Ready_Count));\r\nTextOutPut(pSummaryReportPath, vC_Locked_Name, NumberToString(vC_Locked_Count));\r\nTextOutPut(pSummaryReportPath, vC_Viewed_Name, NumberToString(vC_Viewed_Count));\r\nTextOutPut(pSummaryReportPath, vC_Saved_Name, NumberToString(vC_Saved_Count));\r\nTextOutPut(pSummaryReportPath, vC_Reviewed_Name, NumberToString(vC_Reviewed_Count));\r\n\r\nTextOutPut(pSummaryReportPath, vR_NotStarted_Name, NumberToString(vR_NotStarted_Count));\r\nTextOutPut(pSummaryReportPath, vR_Incomplete_Name, NumberToString(vR_Incomplete_Count));\r\nTextOutPut(pSummaryReportPath, vR_WorkInProgress_Name, NumberToString(vR_WorkInProgress_Count));\r\nTextOutPut(pSummaryReportPath, vR_Ready_Name, NumberToString(vR_Ready_Count));\r\nTextOutPut(pSummaryReportPath, vR_Locked_Name, NumberToString(vR_Locked_Count));\r\nTextOutPut(pSummaryReportPath, vR_Viewed_Name, NumberToString(vR_Viewed_Count));\r\nTextOutPut(pSummaryReportPath, vR_Saved_Name, NumberToString(vR_Saved_Count));\r\nTextOutPut(pSummaryReportPath, vR_Reviewed_Name, NumberToString(vR_Reviewed_Count));\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pSummaryReportPath",
        "Prompt": "",
        "Value": "C:\\temp\\state_summary.csv",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_application_deploy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pAppId, pApprovalDim, pApprovalSubset, pControl);\r\nEndIf;\r\n\r\n#*** Check if the application has been deployed\r\nvIsNewDeployment = 'N';\r\nseIsNewVersionDimensionAdded = 'N';\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert current application id');\r\n\tEndIf;\r\n\r\n\tvIsNewDeployment = 'Y';\r\n\tDimensionElementInsert(cApplicationsDim, '', pAppId, 'S');\r\n\r\nElse;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'This application already existed: ' | pAppId);\r\n\tEndIf;\r\n\t\r\n\tStringGlobalVariable('gVersionDimension');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gVersionDimension @= '' & pVersionDim @<> '');\r\n\t\tseIsNewVersionDimensionAdded = 'Y';\t\t\t\r\n\tEndIf;\r\n\t\r\n\tIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Version dimension is added in redeployment: ' | pVersionDim);\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#**Insert application ID to intermediate applications dim\r\ncIntermediateApplicationsDim =  '}tp_intermediate_security_applications';\r\ncParent = 'all_applications';\r\n\r\nIf (DimensionExists(cIntermediateApplicationsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cIntermediateApplicationsDim);\r\n\tDimensionElementInsert(cIntermediateApplicationsDim, '', cParent,'C');\r\nEndIf;\r\n\r\nIf (DIMIX(cIntermediateApplicationsDim, pAppId) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert current application id');\r\n\tEndIf;\r\n\r\n\tDimensionElementInsert(cIntermediateApplicationsDim, '', pAppId, 'N');\r\n\tDimensionElementComponentAdd(cIntermediateApplicationsDim, cParent,pAppId, 1);\r\nEndIf;\r\n\r\n\r\n#*** Application with approval dimension\r\nIf (pApprovalDim @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check approval dimension');\r\n\tEndIf;\r\n\t\r\n\tIf (DimensionExists(pApprovalDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', pApprovalDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tStringGlobalVariable('gDoesDimHaveCubeName');\r\n\tvReturnValue = ExecuteProcess('}tp_util_does_dim_have_cube_name',\r\n\t'pExecutionId', pExecutionId, 'pDim', pApprovalDim, 'pControl',  pControl);\r\n\t\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gDoesDimHaveCubeName @= 'Y');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'There is a cube with the same name as approval dimension');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check approval subset');\r\n\tEndIf;\r\n\t\r\n\tIf (SubsetExists(pApprovalDim, pApprovalSubset) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_SUBSET_NOT_EXIST',\r\n\t\t'pErrorDetails', pApprovalDim | ', ' | pApprovalSubset,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tcShadowApprovalDim = '}tp_tasks}' | pAppId;\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\t\r\n\t#***\r\n\tvReturnValue = ExecuteProcess('}tp_deploy_create_shadow_dimension', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pApprovalDim', pApprovalDim, 'pApprovalSubset', pApprovalSubset, 'pSubsetAlias', pSubsetAlias, 'pIncrShadowDimUpdate', pIncrShadowDimUpdate);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check permission dimension');\r\n\tEndIf;\r\n\r\n\tcPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\tIf (DimensionExists(cPermissionsDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionsDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\r\n\tIf (CubeExists(cPermissionCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cube: ' | cPermissionCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cPermissionCube, cShadowApprovalDim, cPermissionsDim);\r\n\t\tCubeSetLogChanges(cPermissionCube, 1);\r\n\tEndIf;\r\n\r\n\t#***\r\n\r\n\tIf (CubeExists(cCellSecurityCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cell security cube: ' | cCellSecurityCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cCellSecurityCube, cShadowApprovalDim, cPermissionsDim, '}Groups');\r\n\t\tCubeSetLogChanges(cCellSecurityCube, 1);\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check node info dimension');\r\n\tEndIf;\r\n\t\r\n\tcNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\tIf (DimensionExists(cNodeInfoDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cNodeInfoDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\t\r\n\tcDefaultView = 'Default';\r\n\tcAllView = 'All';\r\n\tIf (CubeExists(cStateCube) = 0);\r\n\t\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create state cube: ' | cStateCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cStateCube, cShadowApprovalDim, cNodeInfoDim);\r\n\t\tCubeSetLogChanges(cStateCube, 1);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create default view');\r\n\t\tEndIf;\r\n\t\r\n\t\tViewCreate(cStateCube, cDefaultView);\r\n\t\tViewColumnDimensionSet(cStateCube, cDefaultView, cNodeInfoDim, 1);\r\n\t\tViewRowDimensionSet(cStateCube, cDefaultView, cShadowApprovalDim, 1);\r\n\t\tViewSubsetAssign(cStateCube, cDefaultView, cShadowApprovalDim, pApprovalSubset);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create All view');\r\n\t\tEndIf;\r\n\t\r\n\t\tViewCreate(cStateCube, cAllView);\r\n\t\tViewColumnDimensionSet(cStateCube, cAllView, cNodeInfoDim, 1);\r\n\t\tViewRowDimensionSet(cStateCube, cAllView, cShadowApprovalDim, 1);\r\n\t\r\n\t\r\n\tEndIf;\r\n\t\r\n\t#***create intermediate security measure dimension\r\n\tcIntermediateSecurityMeasuresDim = '}tp_intermediate_security_measures';\r\n\r\n\tIf (DimensionExists(cIntermediateSecurityMeasuresDim) = 0);\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Create Intermediate security measure dimension');\r\n\t\tEndIf;\r\n\r\n\t\tDimensionCreate(cIntermediateSecurityMeasuresDim);\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'Rights','S');\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'WriteCount','N');\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'ReadCount','N');\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\nvSecuritySet = '';\r\nIf (vIsNewDeployment @= 'N');\r\n\tvSecuritySet = ATTRS(cApplicationsDim, pAppId, 'SecuritySet');\r\nEndIf;\r\n\r\n#***\r\nIf (pApprovalDim @<> '');\r\n\r\n\t#***First check the condition on whether we should delete the element level security cube on approvla Dimension\r\n\tvDeleteElementSecurity = 'Y';\r\n\tvAppLooper = 1;\r\n\tvTotalApplications = DIMSIZ(cApplicationsDim);\r\n\tWhile (vAppLooper <= vTotalApplications);\r\n\t\tvLoopAppId = DIMNM(cApplicationsDim, vAppLooper);\r\n\t\tvSecuritySetOnApp='';\r\n\t\tIF (vLoopAppId @= pAppId);\r\n\t\t\tIf (vIsNewDeployment @= 'N');\r\n\t\t\t\tvSecuritySetOnApp = ATTRS(cApplicationsDim, pAppId, 'SecuritySet');\r\n\t\t\tEndIf;\r\n\t\t\tIF (vSecuritySetOnApp @='Y');\r\n\t\t\t\tvDeleteElementSecurity = 'N';\r\n\t\t\tEndif;\r\n\r\n\t\tElse;\r\n\t\t\tvSecuritySetOnApp =  ATTRS(cApplicationsDim, vLoopAppId, 'SecuritySet');\r\n\t\t\tvApprovalDim =ATTRS( cApplicationsDim, vLoopAppId, 'ApprovalDimension');\r\n\t\t\tIF (vSecuritySetOnApp @= 'Y' & vApprovalDim @= pApprovalDim);\r\n\t\t\t\tvDeleteElementSecurity = 'N';\r\n\t\t\tEndif;\r\n\t\t\t\t\r\n\t\tEndif;\r\n\t\tIF (vDeleteElementSecurity @= 'N');\r\n\t\t\tvAppLooper = vTotalApplications;\r\n\t\tEndif;\r\n\t\tvAppLooper = vAppLooper +1;\r\n\tEnd;\r\n\r\n\t#****delete element security cube for approval dimension\r\n\t#an existing element security cube will impact non-admin users access approval nodes\r\n\tIF (vDeleteElementSecurity @= 'Y');\r\n\t\tcElementSecurityCube = '}ElementSecurity_' | pApprovalDim;\r\n\t\tIF (CubeExists(cElementSecurityCube) >0);\r\n\t\t\tCubeDestroy(cElementSecurityCube);\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\n\tIf (vIsNewDeployment @= 'N' & vSecuritySet @= 'N');\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Reset permission cell security cube if the previous deployment failed');\r\n\t\tEndIf;\r\n\t\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reset_permission_on_failure',\r\n\t\t'pGuid',  pExecutionId, 'pAppId', pAppId, 'pControl',  pControl);\r\n\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\tEndIf;\r\n\r\n\tsGroupsDim = '}Groups';\r\n\tcApprovalElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\n\tIf (CubeExists(cApprovalElementSecurityCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create element security cube for approval hierarchy');\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cApprovalElementSecurityCube, cShadowApprovalDim, sGroupsDim);\r\n\t\tCubeSetLogChanges(cApprovalElementSecurityCube, 1);\r\n\t\r\n\tElse;\r\n\t\r\n\t\tIf (vIsNewDeployment @= 'Y');\r\n\t\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy element security cube for approval hierarchy for new deployment');\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tCubeDestroy(cApprovalElementSecurityCube);\r\n\t\t\tCubeCreate(cApprovalElementSecurityCube,cShadowApprovalDim, sGroupsDim);\r\n\t\t\tCubeSetLogChanges(cApprovalElementSecurityCube, 1);\r\n\t\r\n\t\tEndIf;\r\n\t\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert approval dimension and subset attributes');\r\nEndIf;\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncApprovalSubsetAttr = 'ApprovalSubset';\r\ncIsActiveAttr = 'IsActive';\r\ncCubeViews = 'CubeViews';\r\ncShadowDimAttr = 'ApprovalShadowDimension';\r\ncVersionSlicesWriteAttr = 'VersionSlicesWrite';\r\ncVersionSlicesWriteAttrOld = 'VersionSlicesWriteOld';\r\ncVersionSlicesReadAttr = 'VersionSlicesRead';\r\ncVersionSlicesReadAttrOld = 'VersionSlicesReadOld';\r\ncVersionDimAttr = 'VersionDimension';\r\ncVersionDimAttrOld = 'VersionDimensionOld';\r\ncAppTypeAttr = 'ApplicationType';\r\n\r\nif (vIsNewDeployment @= 'Y');\r\n\tvVersionDimensionOld = pVersionDim;\r\nelse;\r\n\tvVersionDimensionOld = AttrS(cApplicationsDim, pAppId, cVersionDimAttr);\r\nendif;\r\n\r\nvVersionSlicesWriteOld = AttrS(cApplicationsDim, pAppId, cVersionSlicesWriteAttr);\r\nvVersionSlicesReadOld = AttrS(cApplicationsDim, pAppId, cVersionSlicesReadAttr);\r\n\r\nAttrPutS(pApprovalDim, cApplicationsDim, pAppId, cApprovalDimensionAttr);\r\nAttrPutS(pApprovalSubset, cApplicationsDim, pAppId, cApprovalSubsetAttr);\r\nAttrPutS('Y', cApplicationsDim, pAppId, cIsActiveAttr);\r\nAttrPutS(pCubeViews, cApplicationsDim, pAppId, cCubeViews);\r\nAttrPutS(cShadowApprovalDim, cApplicationsDim, pAppId,cShadowDimAttr);\r\nAttrPutS('', cApplicationsDim, pAppId, cAppTypeAttr);\r\nAttrPutS(pVersionDim, cApplicationsDim, pAppId, cVersionDimAttr);\r\nAttrPutS(vVersionDimensionOld, cApplicationsDim, pAppId, cVersionDimAttrOld);\r\nAttrPutS(pVersionSlicesWrite, cApplicationsDim, pAppId, cVersionSlicesWriteAttr);\r\nAttrPutS(vVersionSlicesWriteOld, cApplicationsDim, pAppId, cVersionSlicesWriteAttrOld);\r\nAttrPutS(pVersionSlicesRead, cApplicationsDim, pAppId, cVersionSlicesReadAttr);\r\nAttrPutS(vVersionSlicesReadOld, cApplicationsDim, pAppId, cVersionSlicesReadAttrOld);\r\n\r\n#***\r\nIf (pApprovalDim @<> '');\r\n\r\n\t#***create task navigation dimensions/cube for this application\r\n\tvReturnValue = ExecuteProcess('}tp_deploy_create_task_navigation_cube', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pNavigationDimensions',  pApprovalDim | '*');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set state cube value for state if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cApprovalDimSize);\r\n\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\r\n\t\tvValue = CellGetS(cStateCube, vElement, 'State');\r\n\t\tIf (vValue @= '');\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, 'State') = 0);\r\n\t\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('0', cStateCube, vElement, 'State');\r\n\t\tEndIf;\r\n\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n#*** Create \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\n\t\tDeleteGroup(cTpEveryoneGroup);\r\n\tEndIf;\r\n\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tAddGroup(cEveryoneGroup);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (pApprovalDim @<> '');\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Give everyone group \"Read\" right to application artifacts.');\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make approval dimension readable');\r\n\tEndIf;\r\n\t\r\n\tsDimensionSecurityCube = '}DimensionSecurity';\r\n\tIf (CubeExists(sDimensionSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cShadowApprovalDim,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup);\r\n\t\tEndIf;\r\n\t\tcCurrentCellValue = CellGetS(sDimensionSecurityCube, pApprovalDim, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sDimensionSecurityCube, pApprovalDim, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(pApprovalDim,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sDimensionSecurityCube, pApprovalDim, cEveryoneGroup);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\t#*\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make permission cube readable');\r\n\tEndIf;\r\n\t\r\n\tsCubeSecurityCube = '}CubeSecurity';\r\n\tIf (CubeExists(sCubeSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cPermissionCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cPermissionCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cPermissionCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cPermissionCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make permission cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cCellSecurityCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make cell security cube of permission cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\r\n\tEndIf;\r\n\t\r\n\t#*\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make state cube readable');\r\n\tEndIf;\r\n\t\r\n\tIf (CubeExists(sCubeSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cStateCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cStateCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cStateCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make state cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#****\r\n#Put all readable slices and writable slices into one subset\r\n#This subset will be used on client side to filter on a control dimension\r\nIF (pVersionDim @<> '');\r\n\tvFilterSubset = 'tp_' | pAppId;\r\n\tIF (SubsetExists(pVersionDim, vFilterSubset) = 1);\r\n\t\tSubsetDeleteAllElements(pVersionDim, vFilterSubset);\r\n\tElse;\r\n\t\tSubsetCreate(pVersionDim, vFilterSubset);\r\n\tEndif;\r\n\t\r\n\tIf (pVersionSubsetIsExpandAbove @= 'Y');\r\n\t\tSubsetExpandAboveSet( pVersionDim, vFilterSubset, 1);\r\n\tElse;\r\n\t\tSubsetExpandAboveSet( pVersionDim, vFilterSubset, 0);\r\n\tEndif;\r\n\r\n\ttotalControlSlices= SubsetGetSize(pVersionDim, pVersionSubset);\r\n\tlooper = totalControlSlices;\r\n\tWhile (looper >= 1);\r\n\t\tvSlice = SubsetGetElementName(pVersionDim, pVersionSubset, looper);\r\n\t\r\n\t\t#parse readable slices\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = pVersionSlicesRead;\r\n\t\tvSliceAdded = 'N';\r\n\t\tIF (pVersionSlicesRead @<> '' & vSliceAdded @='N');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tIF (vVersionSlice @= vSlice);\r\n\t\t\t\t\tSubsetElementInsert(pVersionDim, vFilterSubset, vVersionSlice, 1);\r\n\t\t\t\t\tvSliceAdded = 'Y';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\t\r\n\t\t#parse writable slices\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = pVersionSlicesWrite;\r\n\t\tIF (pVersionSlicesWrite @<> '' & vSliceAdded @= 'N');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tIF (vVersionSlice @= vSlice);\r\n\t\t\t\t\tSubsetElementInsert(pVersionDim, vFilterSubset, vVersionSlice, 1);\r\n\t\t\t\t\tvSliceAdded = 'Y';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n# Clear }CellSecurity_}tp_application_root_permissions, it will be re-populated with the current offline Groups\r\ncOfflinePermissionElement = 'OFFLINE';\r\nvOfflinePermissionViewName = 'temp_offline_perm_' | pAppId;\r\nvOfflinePermissionCubeName = '}CellSecurity_}tp_application_root_permissions';\r\n\r\nvDimOfflinePermissions = '}tp_root_permissions';\r\nIf (ViewExists(vOfflinePermissionCubeName, vOfflinePermissionViewName) = 0);\r\n\tvAppFilterSubset = 'temp_offline_perm_app' | pAppId;\r\n\tIf (SubsetExists(cApplicationsDim, vAppFilterSubset) = 1);\r\n\t\tSubsetDestroy(cApplicationsDim, vAppFilterSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cApplicationsDim, vAppFilterSubset);\r\n\tSubsetElementInsert(cApplicationsDim, vAppFilterSubset, pAppId, 1);\r\n\t\r\n\tvPermFilterSubset = 'temp_offline_perm_perm' | pAppId;\r\n\tIf (SubsetExists(vDimOfflinePermissions, vPermFilterSubset) = 1);\r\n\t\tSubsetDestroy(vDimOfflinePermissions, vPermFilterSubset);\r\n\tEndIf;\r\n\tSubsetCreate(vDimOfflinePermissions, vPermFilterSubset);\r\n\tSubsetElementInsert(vDimOfflinePermissions, vPermFilterSubset, cOfflinePermissionElement, 1);\r\n\t\r\n\tViewCreate(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\n\tViewSubsetAssign(vOfflinePermissionCubeName, vOfflinePermissionViewName, cApplicationsDim, vAppFilterSubset);\r\n\tViewSubsetAssign(vOfflinePermissionCubeName, vOfflinePermissionViewName, vDimOfflinePermissions, vPermFilterSubset);\r\nEndIf;\r\nViewZeroOut(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\nViewDestroy(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\nSubsetDestroy(cApplicationsDim, vAppFilterSubset);\r\nSubsetDestroy(vDimOfflinePermissions, vPermFilterSubset);\r\n\r\n#parse canoffile groups\r\nofflineSeparater = '|';\r\nvPosOffline = 0;\r\nvStringToScan = pOfflineGroups;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set offline groups:'|pOfflineGroups);\r\nEndIf;\r\ncOfflineRead = 'READ';\r\nIF (pOfflineGroups @<> '');\r\n\tvPosOffline = SCAN(offlineSeparater, vStringToScan);\r\n\tWhile (vPosOffline >0);\r\n\t\tvOfflineGroup  = SUBST(vStringToScan, 1, vPosOffline-1);\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set offline group:'|cOfflineRead|':'|vOfflinePermissionCubeName|':'|pAppId|':OFFLINE:'|vOfflineGroup);\r\n\t\tEndIf;\r\n\t\tCellPutS(cOfflineRead, vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, vOfflineGroup);\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosOffline +1, LONG(vStringToScan)-vPosOffline);\r\n\t\tvPosOffline = SCAN(offlineSeparater, vStringToScan);\r\n\t\t  \r\n\tEnd;\r\nEndif;\r\nvEveryoneSet = CellGetS(vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, cEveryoneGroup);\r\nIf (vEveryoneSet @= '');\r\n\t#*** set NONE for everyone\r\n\tCellPutS('NONE', vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pCubeViews",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubsetAlias",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSubsetIsExpandAbove",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesWrite",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesRead",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pOfflineGroups",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIncrShadowDimUpdate",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_application_remove",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId, 'SecurityMethod');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim,cVersionDim);\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pAppId, pControl);\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncIntermediateAppDim = '}tp_intermediate_security_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) <> 0);\r\n\r\n\t#***\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Release all data reservations', pAppId);\r\n\tEndIf;\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_release_all', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***Remove all persisted views for this application\r\n\tvReturnValue = ExecuteProcess('}tp_reset_views',\r\n\t\t'pExecutionId', pExecutionId, 'pAppId', pAppId);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\t\r\n\t#***\r\n\tIf (cApprovalDim @<> '');\r\n\r\n\t\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\t\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy permissions cubes');\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeDestroy(cPermissionCube);\r\n\t\tCubeDestroy(cCellSecurityCube);\r\n\t\r\n\t\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\t\tCubeDestroy(cStateCube);\r\n\r\n\t\t#***\r\n\t\tcApprovalElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\n\t\tCubeDestroy(cApprovalElementSecurityCube);\r\n\r\n\t\tIF (cSecurityMethod @= 'ELEMENT_SECURITY');\r\n\t\t\tcElementSecurityCubeOnApproval = '}ElementSecurity_' | cApprovalDim;\r\n\t\t\tCubeDestroy(cElementSecurityCubeOnApproval);\r\n\t\tEndif;\r\n\r\n\t\t#***Remove Shadow approval dimension\r\n\t\tDimensionDestroy(cShadowApprovalDim);\r\n\r\n\t\tcSecurityCube = cControlPrefix | 'tp_application_security}' | pAppId;\r\n\t\tCubeDestroy(cSecurityCube);\r\n\t\r\n\t\tcSecurityUpdateCube = cControlPrefix | 'tp_application_security_update}' | pAppId;\r\n\t\tCubeDestroy(cSecurityUpdateCube);\r\n\r\n\t\t#***Remove task navigation cube\r\n\t\tcTaskNavigationCube = '}tp_task_navigations}' | pAppId;\r\n\t\tCubeDestroy(cTaskNavigationCube);\r\n\r\n\t\t#***Remove task navigation dimension\r\n\t\tcTaskNavigationDim = '}tp_task_navigation_dims}' | pAppId;\r\n\t\tDimensionDestroy(cTaskNavigationDim);\r\n\r\n\t\t#Finally, remove element security cube, and IM element security cube  for an approval dimension \r\n\t\t#if no other applications are using the same approval dimension\r\n\t\tvTotalApplications = DIMSIZ(cApplicationsDim);\r\n\t\tvDeleteElementSecurity = 'Y';\r\n\t\tlooper =1;\r\n\t\tWhile (looper <= vTotalApplications);\r\n\t\t\tvOtherAppId = DIMNM(cApplicationsDim, looper);\r\n\t\t\tIF (vOtherAppId @<> pAppId);\r\n\t\t\t\tvOtherAppApprovalDim =ATTRS('}tp_applications', vOtherAppId,  'ApprovalDimension');\r\n\t\t\t\tIF (vOtherAppApprovalDim @= cApprovalDim);\r\n\t\t\t\t\tvDeleteElementSecurity = 'N';\r\n\t\t\t\t\tlooper = vTotalApplications;\r\n\t\t\t\tEndif;\r\n\r\n\t\t\tEndif;\r\n\t\t\tlooper = looper +1;\r\n\t\tEnd;\r\n\r\n\t\tIF (vDeleteElementSecurity @= 'Y');\r\n\t\t\tvElementSecurityOnApprovalDim = '}ElementSecurity_' | cApprovalDim;\r\n\t\t\tIF (CubeExists(vElementSecurityOnApprovalDim)>0);\r\n\t\t\t\tCubeDestroy(vElementSecurityOnApprovalDim);\r\n\t\t\tEndif;\r\n\t\t\tvIMElementSecurityOnApprovalDim = '}tp_intermediate_ElementSecurity}' | cApprovalDim;\r\n\t\t\tIF (CubeExists(vIMElementSecurityOnApprovalDim)>0);\r\n\t\t\t\tCubeDestroy(vIMElementSecurityOnApprovalDim);\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\r\n\tEndIf;\r\n\r\n\t#***Remove application related cubes\r\n\tcApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\t\r\n\ttotalCubes = DIMSIZ('}Cubes');\r\n\tindexCube = totalCubes;\r\n\t\r\n\tWhile (indexCube >= 1);\r\n\t\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\t\r\n\t\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\t\tIF (cIsAppCube @= 'A' % (cIsAppCube @<> '' & cApprovalDim @= ''));\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_deploy_app_cubes_cleanup', 'pExecutionId', pExecutionId,'pAppId', pAppId, 'pCubeName', cCubeName);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndif;\r\n\t\t\r\n\t\tindexCube = indexCube - 1;\r\n\tEnd;\r\n\r\n\t#***\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Remove application node: ' | pAppId);\r\n\tEndIf;\r\n\r\n\tDimensionElementDelete(cApplicationsDim, pAppId);\r\n\tDimensionElementDelete(cIntermediateAppDim, pAppId);\r\n\r\n\t#*** Remove sandboxes associated with the application\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_delete_sandboxes',\r\n\t\t'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#Remove all blb files created by this applications\r\n\tvBlbFile = 'tp_AdminBkup_' | pAppId | '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_SecurityBkup_' | pAppId | '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_ModelBkup_' | pAppId |  '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = '}tp_tasks}' | pAppId | '_weighted_struct.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_app_approval_hierarchy}' | pAppId | '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_app_full_security}' | pAppId | '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_app_full_security}' | pAppId | '_alias.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\tvBlbFile = 'tp_app_security}' | pAppId | '.blb';\r\n\tAsciiDelete(vBlbFile);\r\n\r\n\t#**remove control subset filter\r\n\t#vDimensions = '}Dimensions';\r\n\t#vTotalDimensions = DIMSIZ(vDimensions);\r\n\t#looper = vTotalDimensions;\r\n\t#\r\n\t#While (looper >= 1);\r\n\t#\tvDimension = DIMNM(vDimensions, looper);\r\n\t#\tIF (SUBST(vDimension, 1,1) @<> '}');\r\n\t#\t\tvSubset = 'tp_' | pAppId;\r\n\t#\t\tIF (SubsetExists(vDimension, vSubset) >0);\r\n\t#\t\t\tSubsetDestroy(vDimension, vSubset);\r\n\t#\t\tEndif;\r\n\t#\tEndif;\r\n\t#\tlooper = looper -1;\r\n\t#End;\r\nElse;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Application does not exist: ' | pAppId);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_application_remove_control_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#<<set_log$'Y'$'Logs\\'>>\r\n\r\n### action=init_log:begin ###\r\n\r\na_pExecutionId = pExecutionId;\r\n\r\na_vLogPrefix = GetProcessName();\r\nIf (SUBST(a_vLogPrefix, 1, 1) @= '}');\r\n\ta_vLogPrefix = SUBST(a_vLogPrefix, 2, (LONG(a_vLogPrefix) - 1));\r\nEndIf;\r\n\r\n#*** Check tp_config dimension\r\na_cConfigDim = '}tp_config';\r\n\r\nIf (DimensionExists(a_cConfigDim) = 1);\r\n\tglobal_GenerateLog = ATTRS(a_cConfigDim, 'Generate TI Log', 'String Value');\r\n\ta_cLogDirectory = ATTRS(a_cConfigDim, 'Log Directory', 'String Value');\r\n\tIf (a_cLogDirectory @<> '' & SUBST(a_cLogDirectory, (LONG(a_cLogDirectory) - 1), 1) @<> '\\');\r\n\t\ta_cLogDirectory = a_cLogDirectory | '\\';\r\n\tEndIf;\r\n\t\r\n\tglobal_PrologLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_prolog.log';\r\n\tglobal_EpilogLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_epilog.log';\r\n\tglobal_DataLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_data.log';\r\n\tglobal_MetadataLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_metadata.log';\r\nElse;\r\n\tglobal_GenerateLog = 'Y';\r\n\tglobal_PrologLog = a_vLogPrefix | '_' | a_pExecutionId | '_prolog.log';\r\n\tglobal_EpilogLog = a_vLogPrefix | '_' | a_pExecutionId | '_epilog.log';\r\n\tglobal_DataLog = a_vLogPrefix | '_' | a_pExecutionId | '_data.log';\r\n\tglobal_MetadataLog = a_vLogPrefix | '_' | a_pExecutionId | '_metadata.log';\r\nEndIf;\r\n\r\n### action=init_log:end ###\r\n\r\n\r\n#**remove control subset filter\r\nvDimensions = '}Dimensions';\r\nvTotalDimensions = DIMSIZ(vDimensions);\r\n\r\n### action=p_log:begin ###\r\n\r\nb_pMessage = 'Number of dimensions: ' | NumberToString(vTotalDimensions);\r\n\r\n\r\n### action=log:begin ###\r\n\r\nb_a_pSection = 'prolog';\r\nb_a_pMessage = b_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (b_a_pSection @= 'prolog');\r\n\t\tb_a_cTM1Log = global_PrologLog;\r\n\tElseIf (b_a_pSection @= 'epilog');\r\n\t\tb_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (b_a_pSection @= 'data');\r\n\t\tb_a_cTM1Log = global_DataLog;\r\n\tElseIf (b_a_pSection @= 'metadata');\r\n\t\tb_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\tb_a_cTM1Log = b_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(b_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), b_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\r\nlooper = vTotalDimensions;\r\nWhile (looper >= 1);\r\n\tvDimension = DIMNM(vDimensions, looper);\r\n\tIf (SUBST(vDimension, 1,1) @<> '}');\r\n\t\tvSubset = 'tp_' | pAppId;\r\n\t\tIf (SubsetExists(vDimension, vSubset) >0);\r\n\t\t    \r\n### action=p_log:begin ###\r\n\r\nc_pMessage = 'Data Cube: ' | vDimension | ' has control subset (SubsetDeleteAllElements)' | vSubset;\r\n\r\n\r\n### action=log:begin ###\r\n\r\nc_a_pSection = 'prolog';\r\nc_a_pMessage = c_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (c_a_pSection @= 'prolog');\r\n\t\tc_a_cTM1Log = global_PrologLog;\r\n\tElseIf (c_a_pSection @= 'epilog');\r\n\t\tc_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (c_a_pSection @= 'data');\r\n\t\tc_a_cTM1Log = global_DataLog;\r\n\tElseIf (c_a_pSection @= 'metadata');\r\n\t\tc_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\tc_a_cTM1Log = c_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(c_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), c_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\t\t\tSubsetDeleteAllElements(vDimension, vSubset);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tlooper = looper -1;\r\nEnd;\r\n\r\nlooper = vTotalDimensions;\r\nWhile (looper >= 1);\r\n\tvDimension = DIMNM(vDimensions, looper);\r\n\tIf (SUBST(vDimension, 1,1) @<> '}');\r\n\t\tvSubset = 'tp_' | pAppId;\r\n\t\tIf (SubsetExists(vDimension, vSubset) >0);\r\n\t\t    \r\n### action=p_log:begin ###\r\n\r\nd_pMessage = 'Data Cube: ' | vDimension | ' has control subset (SubsetDestroy)' | vSubset;\r\n\r\n\r\n### action=log:begin ###\r\n\r\nd_a_pSection = 'prolog';\r\nd_a_pMessage = d_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (d_a_pSection @= 'prolog');\r\n\t\td_a_cTM1Log = global_PrologLog;\r\n\tElseIf (d_a_pSection @= 'epilog');\r\n\t\td_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (d_a_pSection @= 'data');\r\n\t\td_a_cTM1Log = global_DataLog;\r\n\tElseIf (d_a_pSection @= 'metadata');\r\n\t\td_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\td_a_cTM1Log = d_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(d_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), d_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\t\t\tSubsetDestroy(vDimension, vSubset);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tlooper = looper -1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_clean_owner_groups",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n# This script deletes all owner groups created for a particular\r\n# approval dimension, or absolutely all owner groups if an empty\r\n# pApprovalDim parameter is supplied. \r\n# Since only one boxboro application\r\n# can use a particular approval dimension at a time, this\r\n# process deletes all owner groups associated with the \r\n# approval dimension without regard to particular subsets.\r\n\r\n\r\n\r\n# SETUP PROCESS\r\n\r\n\t#*** Constants\r\n\r\n\tcControlPrefix = '}';\r\n\tcTM1Process = GetProcessName();\r\n\tcApprovalDim = pApprovalDim;\r\n\tcGroupsDim = '}Groups';\r\n\tpControl = 'Y';\r\n\t\r\n\t\r\n\t#*** Configure logging\t\r\n\r\n\t# Get log file name\r\n\tStringGlobalVariable('gPrologLog');\r\n\tvReturnValue = ExecuteProcess(\r\n\t\t\tcControlPrefix | 'tp_get_log_file_names',\r\n\t\t\t'pExecutionId', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tcTM1Log = gPrologLog;\r\n\t\r\n\t# Retrieve flag for generating logs\r\n\tcConfigDim = cControlPrefix | 'tp_config';\r\n\tIf (DimensionExists(cConfigDim) = 1);\r\n\t\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\n\tElse;\r\n\t\tcGenerateLog = 'N';\r\n\tEndIf;\r\n\t\t\r\n\r\n\t#*** Log parameters\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t'Parameters:', pExecutionId, pApprovalDim);\r\n\tEndIf;\r\n\r\n# DELETE OWNER GROUPS\r\n\t# Go through the list of groups in reverse order looking for\r\n\t# owner groups - all owner groups if no pApprovalDim is supplied,\r\n\t# or only owner groups with pApprovalDim as part of their\r\n\t# prefix otherwise.\t\r\n\r\n\t# Determine the prefix used to identified owner groups to delete\r\n\tIf (cApprovalDim @= '');\r\n\t\t# we have been asked to remove all owner groups regardless of approval hierarchy\r\n\t\tcOwnerGroupPrefix = cControlPrefix | 'tp_owner_';\r\n\tElse;\r\n\t\tcOwnerGroupPrefix = cControlPrefix | 'tp_owner_' | cApprovalDim | '_';\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log,  TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t'will delete all groups with prefix', cOwnerGroupPrefix);\r\n\tEndIf;\r\n\r\n\t# Loop through all groups in reverse order so we can delete as we go\r\n\tcGroupsDimSize = DIMSIZ(cGroupsDim);\r\n\tvIndex = cGroupsDimSize;\r\n\tvDeletedCount = 0;\r\n\tWhile (vIndex >= 1);\r\n\t\tvGroupName = DIMNM(cGroupsDim, vIndex);\r\n\r\n\t\tIf (SCAN(cOwnerGroupPrefix, vGroupName) = 1);\r\n\t\t\tIf (cGenerateLog @='Y');\r\n\t\t\t\tTextOutput(cTM1Log,  TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'identified group to delete', vGroupName);\r\n\t\t\tEndIf;\r\n\t\t\tDeleteGroup(vGroupName);\r\n\t\t\tvDeletedCount = vDeletedCount +1;\r\n\t\tEndIf;\r\n\r\n\t\tvIndex = vIndex - 1;\r\n\tEnd;\r\n\t\t\r\n\t# Note how many groups were actually deleted\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'number of groups deleted', NumberToString(vDeletedCount));\r\n\tEndIf;\r\n\r\n\r\n\r\n\r\n# FINISH PROCESS\r\n\r\n\t#*** Log successful completion\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\n\tEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_clear_running_job",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (pAppId @<> '');\r\n\tAttrPutS('N', cApplicationsDim, pAppId, 'IsRunningMaintenance');\r\nEndIf;\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_config';\r\ncRunningMaintenance = 'ApplicationMaintenanceRunning';\r\nAttrPutS('N', cSystemConfigDim, cRunningMaintenance, 'String Value');\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_create_planning_artifacts",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Create \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\n\t\tDeleteGroup(cTpEveryoneGroup);\r\n\tEndIf;\r\n\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tAddGroup(cEveryoneGroup);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n\r\n#***create error log objects\r\ncErrorCube = cControlPrefix | 'tp_process_errors';\r\nIf (CubeExists(cErrorCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_setup', 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#***Insert a field in \"}tp_config\" dimension to enable element security on approval dimension \r\n#default value is  \"Y\"\r\ncEnableElementSecurity = 'EnableElementSecurityOnApproval';\r\ncConfigDim =cControlPrefix | 'tp_config';\r\nvIsInitialSetup = 'N';\r\nif (DimensionExists(cConfigDim)=0);\r\nDimensionCreate(cConfigDim);\r\nendif;\r\nIF (DIMIX(cConfigDim, cEnableElementSecurity)=0);\r\nDimensionElementInsert(cConfigDim, '', cEnableElementSecurity,'S');\r\nvIsInitialSetup = 'Y';\r\nEndif;\r\n\r\ncServerMaintenanceRunning = 'ApplicationMaintenanceRunning';\r\nIF (DIMIX(cConfigDim, cServerMaintenanceRunning)=0);\r\nDimensionElementInsert(cConfigDim, '', cServerMaintenanceRunning,'S');\r\nEndif;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pControl);\r\nEndIf;\r\n\r\ncTpPrefix = cControlPrefix | 'tp_';\r\ncTpPrefixLength = LONG(cTpPrefix);\r\n\r\n#***\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncApprovalSubsetAttr = 'ApprovalSubset';\r\ncApprovalShadowDimAttr = 'ApprovalShadowDimension';\r\ncIsActiveAttr = 'IsActive';\r\ncStoreIdAttr = 'StoreId';\r\ncSecuritySetAttr = 'SecuritySet';\r\ncVersionAttr = 'Version';\r\ncCubeViewsAttr = 'CubeViews';\r\ncMaintenanceAttr = 'IsRunningMaintenance';\r\ncVersionSlicesWrite = 'VersionSlicesWrite';\r\ncVersionSlicesWriteOld =  'VersionSlicesWriteOld';\r\ncVersionSlicesRead = 'VersionSlicesRead';\r\ncVersionSlicesReadOld =  'VersionSlicesReadOld';\r\ncVersionDimension = 'VersionDimension';\r\ncVersionDimensionOld = 'VersionDimensionOld';\r\ncApplicationType = 'ApplicationType';\r\ncApplicationLastSavedTime = 'ApplicationLastSaved';\r\ncSecurityMethod = 'SecurityMethod';\r\ncBounceMode='BounceMode';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cApplicationsDim);\r\n\tAttrInsert(cApplicationsDim, '', cApprovalDimensionAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApprovalSubsetAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApprovalShadowDimAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cIsActiveAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cStoreIdAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cSecuritySetAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cCubeViewsAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cMaintenanceAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionDimension, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionDimensionOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesWrite, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesWriteOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesRead, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesReadOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApplicationType, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApplicationLastSavedTime, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cSecurityMethod, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cBounceMode, 'S');\r\nElse;\r\n\t# fix tp_applications when upgraded from 9.5.2 server data.\r\n\tcAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionAttr, 'S');\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cAppAttrDim, cCubeViewsAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cCubeViewsAttr, 'S');\r\n\tEndIf;\r\n\r\n\t\r\n\tIf (DIMIX(cAppAttrDim, cMaintenanceAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cMaintenanceAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApprovalShadowDimAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApprovalShadowDimAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesWrite) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesWrite, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesWriteOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesWriteOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesReadOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesReadOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesRead) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesRead, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim,  cVersionDimension) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '',  cVersionDimension, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim,  cVersionDimensionOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '',  cVersionDimensionOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApplicationType) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApplicationType, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApplicationLastSavedTime) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApplicationLastSavedTime, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cSecurityMethod) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cSecurityMethod, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cBounceMode) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cBounceMode, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\nIF (subsetExists(cApplicationsDim, 'Default') =0);\r\n\tSubsetCreate(cApplicationsDim, 'Default');\r\nEndif;\r\nSubsetIsAllSet(cApplicationsDim, 'Default', 1);\r\n\r\n#***\r\n\r\ncElementSecurityApplicationsCube = '}ElementSecurity_' | cApplicationsDim;\r\n\r\nsGroupsDim = '}Groups';\r\n\r\nIf (CubeExists(cElementSecurityApplicationsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications element security cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cElementSecurityApplicationsCube, cApplicationsDim, sGroupsDim);\r\n\tCubeSetLogChanges(cElementSecurityApplicationsCube, 1);\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\ncElementAttributesApplicaitonsDim = '}ElementAttributes_' | cApplicationsDim;\r\ncElementAttributesApplicaitonsCube = cElementAttributesApplicaitonsDim;\r\nIf (DimensionExists(cElementAttributesApplicaitonsDim) = 0);\r\n    ProcessError;\r\nEndIf;\r\n\r\nIf (CubeExists(cElementAttributesApplicaitonsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications element attributes cube');\r\n\tEndIf;\r\n      \r\n   \tCubeCreate(cElementAttributesApplicaitonsCube, cApplicationsDim, cElementAttributesApplicaitonsDim);\r\n\tCubeSetLogChanges(cElementAttributesApplicaitonsCube, 1);\r\nEndIf;\r\n\r\n#***\r\n\r\ncPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\r\ncView = 'VIEW';\r\ncAnnotate = 'ANNOTATE';\r\ncEdit = 'EDIT';\r\ncReject = 'REJECT';\r\ncSubmit = 'SUBMIT';\r\n\r\nIf (DimensionExists(cPermissionsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create permissions dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cPermissionsDim);\r\n\t\r\n\tDimensionElementInsert(cPermissionsDim, '',cView,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cAnnotate,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cEdit,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cReject,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cSubmit,'S');\r\n\t\r\n\tSubsetCreate(cPermissionsDim, 'Default');\r\n\tSubsetIsAllSet(cPermissionsDim, 'Default', 1);\r\n\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\ncState = 'State';\r\ncViewed = 'Viewed';\r\ncSaved = 'Saved';\r\ncReviewed = 'Reviewed';\r\ncBeingEdited = 'BeingEdited';\r\ncOffline = 'Offline';\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStartEditingDate = 'StartEditingDate';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncDataChangeUser = 'DataChangeUser';\r\ncDataChangeDate = 'DataChangeDate';\r\ncNodeInfoReviewer = 'Reviewer';\r\ncAddedNodeInfoReviewer = 'N';\r\n\r\nIf (DimensionExists(cNodeInfoDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create node info dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cNodeInfoDim);\r\n\t\r\n\tDimensionElementInsert(cNodeInfoDim, '', cState, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cViewed, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cSaved, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cReviewed, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cBeingEdited, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cOffline, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cCurrentOwner, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cCurrentOwnerId, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cNodeInfoReviewer, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cTakeOwnershipNode, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStartEditingDate, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStateChangeUser, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStateChangeDate, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cDataChangeUser, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cDataChangeDate, 'S');\r\nElse;\r\n\t# fix tp_node_info when upgraded from 9.5.2 server data.\r\n\tcTakeOwnershipNode = 'TakeOwnershipNode';\r\n\tcStartEditingDate = 'StartEditingDate';\r\n\tIf (DIMIX(cNodeInfoDim, cTakeOwnershipNode) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cStartEditingDate, cTakeOwnershipNode, 'S');\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cOffline) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cCurrentOwner, cOffline, 'S');\r\n\tEndIf;\r\n\t\r\n\tcAnnotationChangeUser = 'AnnotationChangeUser';\r\n\tcAnnotationChangeDate = 'AnnotationChangeDate';\r\n\tIf (DIMIX(cNodeInfoDim, cAnnotationChangeUser) <> 0);\r\n\t\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeUser);\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cAnnotationChangeDate) <> 0);\r\n\t\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeDate);\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cNodeInfoReviewer) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cTakeOwnershipNode, cNodeInfoReviewer, 'S');\r\n\t\tcAddedNodeInfoReviewer = 'Y';\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cCurrentOwnerId) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cNodeInfoReviewer, cCurrentOwnerId, 'S');\r\n\tEndIf;\r\n\t\r\nEndIf;\r\n\r\n\r\n\r\n#*** Create subset for dimension }Groups\r\n\r\ncTpDefaultSubset = 'tp_default';\r\nIf (SubsetExists('}Groups', cTpDefaultSubset) = 0);\r\n\tSubsetCreate('}Groups', cTpDefaultSubset);\r\n\tSubsetIsAllSet('}Groups', cTpDefaultSubset, 1);\r\n\tSubsetAliasSet('}Groups', cTpDefaultSubset, '}TM1_DefaultDisplayValue');\r\nEndIf;\r\n\r\n#*** create applicationCubes cube\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\r\nsCubesDim = '}Cubes';\r\n\r\nIf (CubeExists(cApplicationCubesCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application cubes cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cApplicationCubesCube, cApplicationsDim, sCubesDim);\r\n\tCubeSetLogChanges(cApplicationCubesCube, 1);\r\n\r\nEndIf;\r\n\r\n#*** create cube to store state of central applications \r\n\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\nIf (CubeExists(cCentralApplicationStateCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create central application state cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cCentralApplicationStateCube, cApplicationsDim, cNodeInfoDim);\r\n\tCubeSetLogChanges(cCentralApplicationStateCube, 1);\r\n\r\nEndIf;\r\n\r\n#***create objects for storing intermediate security information (rule driven)\r\nvIntermediateSecurityMeasureDim  ='}tp_intermediate_security_measures';\r\n\r\n\r\nIf (DimensionExists(vIntermediateSecurityMeasureDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security measure dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIntermediateSecurityMeasureDim);\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'StaticRights','S');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'Rights','S');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'WriteCount','N');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'ReadCount','N');\r\nEndif;\r\n\r\n\r\nvIntermediateSecurityApplications = '}tp_intermediate_security_applications';\r\nIf (DimensionExists(vIntermediateSecurityApplications) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIntermediateSecurityApplications);\r\n\tDimensionElementInsert(vIntermediateSecurityApplications, '', 'all_applications','C');\r\nEndif;\r\n\r\n#create objects to store workflow action pre and post TI\r\n# create dimension }tp_workflow_action_TI_measures\r\nvActionTIDimension = '}tp_workflow_action_TI_measures';\r\nIF (DimensionExists(vActionTIDimension) =0);\r\n\tvMeasurePreTI = 'PreActionTI';\r\n\tvMeasurePreTIEnabled = 'PreActionTIEnabled';\r\n\tvMeasurePostTI = 'PostActionTI';\r\n\tvMeasurePostTIEnabled = 'PostActionTIEnabled';\r\n\r\n\tDimensionCreate(vActionTIDimension);\r\n\tDimensionElementInsert(vActionTIDimension, '', vMeasurePreTI, 'S');\r\n\tDimensionElementInsert(vActionTIDimension, '', vMeasurePreTIEnabled, 'S');\r\n\tDimensionElementInsert(vActionTIDimension, '',  vMeasurePostTI, 'S');\r\n\tDimensionElementInsert(vActionTIDimension,'', vMeasurePostTIEnabled , 'S');\r\nEndif;\r\n\r\nvActionTypeDimension = '}tp_workflow_actions';\r\nIF (DimensionExists(vActionTypeDimension) =0);\r\n\tvEnter = 'ENTER';\r\n\tvOwn = 'OWN';\r\n\tvSave = 'SAVE';\r\n\tvSubmit = 'SUBMIT'; \r\n\tvReject = 'REJECT';\r\n\tvLeave = 'LEAVE';\r\n\tvSubmitChildren = 'SUBMITCHILDREN';\r\n\tvAnnotate = 'ANNOTATE';\r\n\tvRelease = 'RELEASE';\r\n\tvOffline = 'OFFLINE';\r\n\tvOnline = 'ONLINE';\r\n\tDimensionCreate(vActionTypeDimension);\r\n\tDimensionElementInsert(vActionTypeDimension, '', vEnter, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOwn, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSave, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSubmit, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vReject, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vLeave, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSubmitChildren, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vAnnotate, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vRelease, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOffline, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOnline, 'N');\r\nEndif;\r\n\r\n#Create a cube to store workflow action pre-TI and post-TI\r\nvApplicationsDimension = '}tp_applications';\r\nvWorkflowActionTICube = '}tp_workflow_action_TI';\r\n\r\nIF (CubeExists(vWorkflowActionTICube) =0);\r\n\tCubeCreate(vWorkflowActionTICube, vApplicationsDimension, vActionTypeDimension,vActionTIDimension);\r\nEndif;\r\n\r\n#Create a dimension to store action TI error codes\r\n#Use dimension attributes for localized strings\r\nvActionTIErrorDim = '}tp_process_errors_localization';\r\nvActionTIErrorAttrDim ='}ElementAttributes_' | vActionTIErrorDim;\r\nvActionTIErrorAttrCube = vActionTIErrorAttrDim;\r\nIF (DimensionExists(vActionTIErrorDim) = 0);\r\n\tDimensionCreate(vActionTIErrorDim);\r\n\r\nEndif;\r\n\r\ncAttrErrorType = 'ErrorType';\r\nIF (DIMIX(vActionTIErrorAttrDim, cAttrErrorType) =0);\r\nAttrInsert(vActionTIErrorDim, '', cAttrErrorType, 'S');\r\nEndif;\r\n\r\n#***Create task navigation dimension\r\ncTaskNavDimension = '}tp_task_navigations';\r\ncNavElemField = 'NavigationElement';\r\nIF (DimensionExists( cTaskNavDimension) = 0);\r\n\tDimensionCreate( cTaskNavDimension);\r\n\tDimensionElementInsert( cTaskNavDimension, '',cNavElemField , 'S');\r\nEndif;\r\n\r\n\r\n#*** No error\r\n\r\ncRootPermissionsDim = cControlPrefix | 'tp_root_permissions';\r\n\r\ncOffline = 'OFFLINE';\r\ncOwnership = 'OWN';\r\n\r\nIf (DimensionExists(cRootPermissionsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create root permissions dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cRootPermissionsDim);\r\n\t\r\n\tDimensionElementInsert(cRootPermissionsDim, '',cOffline,'S');\r\n\tDimensionElementInsert(cRootPermissionsDim, '', cOwnership, 'S');\r\n\t\r\n\tSubsetCreate(cRootPermissionsDim, 'Default');\r\n\tSubsetIsAllSet(cRootPermissionsDim, 'Default', 1);\r\nElse;\r\n\tIf (DIMIX(cRootPermissionsDim, cOffline) = 0);\r\n\t\tDimensionElementInsert(cRootPermissionsDim, '', cOffline, 'S');\r\n\tEndIf;\r\n\tIf (DIMIX(cRootPermissionsDim, cOwnership) = 0);\r\n\t\tDimensionElementInsert(cRootPermissionsDim, '', cOwnership, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\ncRootPermissionsCube = cControlPrefix | 'tp_application_root_permissions';\r\ncCellSecurityRootPermissionsCube = '}CellSecurity_' | cRootPermissionsCube;\r\n\r\nIf (CubeExists(cRootPermissionsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application root permissions');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cRootPermissionsCube, cApplicationsDim, cRootPermissionsDim);\r\n\tCubeSetLogChanges(cRootPermissionsCube, 1);\r\n\t\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityRootPermissionsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create application root permissions cell security cube: ' | cCellSecurityRootPermissionsCube);\r\n\tEndIf;\r\n\r\n\tCubeCreate(cCellSecurityRootPermissionsCube, cApplicationsDim, cRootPermissionsDim, '}Groups');\r\n\tCubeSetLogChanges(cCellSecurityRootPermissionsCube, 1);\r\nEndIf;\r\n\r\n#***\r\n\r\ncJobsDim = cControlPrefix | 'tp_jobs';\r\n\r\nIf (DimensionExists(cJobsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create jobs dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cJobsDim);\r\nEndIf;\r\n\r\n#***\r\n\r\ncJobInfoDim = cControlPrefix | 'tp_job_info';\r\n\r\ncJobAppId = 'ApplicationId';\r\ncJobAppName = 'ApplicationName';\r\ncJobType = 'JobType';\r\ncJobOwner = 'Owner';\r\ncJobOwnerId = 'OwnerId';\r\ncJobStartDate = 'StartDate';\r\ncJobEndDate = 'EndDate';\r\ncJobStatus = 'JobStatus';\r\n\r\nIf (DimensionExists(cJobInfoDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create job info dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cJobInfoDim);\r\n\t\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobAppId, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobAppName, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobType, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobOwner, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobOwnerId, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobStartDate, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobEndDate, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobStatus, 'S');\r\nEndIf;\r\n\r\n#*** create cube to store application jobs \r\n\r\ncApplicationJobCube = cControlPrefix | 'tp_application_jobs';\r\nIf (CubeExists(cApplicationJobCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application jobs cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cApplicationJobCube, cJobsDim, cJobInfoDim);\r\n\tCubeSetLogChanges(cApplicationJobCube, 1);\r\n\r\nEndIf;\r\n\r\ncApplicationUserPreferencesDim = cControlPrefix | 'tp_app_user_preference';\r\ncWorkflowLayout = 'WorkflowLayout';\r\nIf (DimensionExists(cApplicationUserPreferencesDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create user app preference dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cApplicationUserPreferencesDim);\r\n\t\r\n\tDimensionElementInsert(cApplicationUserPreferencesDim, '', cWorkflowLayout, 'S');\r\nElse;\r\n\tIf (DIMIX(cApplicationUserPreferencesDim,cWorkflowLayout) = 0);\r\n\t\tDimensionElementInsert(cApplicationUserPreferencesDim, '', cWorkflowLayout, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\ncApplicationUserPreferencesCube = cControlPrefix | 'tp_app_user_preferences';\r\nIf (CubeExists(cApplicationUserPreferencesCube) = 0);\r\n\tCubeCreate(cApplicationUserPreferencesCube, '}Clients', cApplicationsDim, cApplicationUserPreferencesDim);\r\nEndIf;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***By default enforce element security on approval dimension\r\nIF (vIsInitialSetup @= 'Y');\r\nAttrPutS('Y', cConfigDim, cEnableElementSecurity, 'String Value');\r\nEndif;\r\n\r\n#*** Check security cubes\r\n\r\nsDimensionsDim = '}Dimensions';\r\nsDimensionSecurityCube = '}DimensionSecurity';\r\nIf (CubeExists(sDimensionSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }DimensionSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sDimensionSecurityCube, sDimensionsDim, sGroupsDim);\r\nCubeSetLogChanges(sDimensionSecurityCube, 1);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}Groups', cEveryoneGroup); \r\nIf ( cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}Groups', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT('((}Groups,',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvDetail=INSRT(CellGetS(sDimensionSecurityCube, '}Groups', cEveryoneGroup),vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}Groups', cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup); \r\nIf ( cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT('((}ElementAttributes_}Groups,',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\nsCubesDim = '}Cubes';\r\nsCubeSecurityCube = '}CubeSecurity';\r\nIf (CubeExists(sCubeSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }CubeSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sCubeSecurityCube, sCubesDim, sGroupsDim);\r\nCubeSetLogChanges(sCubeSecurityCube, 1);\r\nEndIf;\r\n\r\nCellPutS('Read', sCubeSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup);\r\nCellPutS('Read', sCubeSecurityCube, cElementSecurityApplicationsCube, cEveryoneGroup);\r\n\r\nsProcessesDim = '}Processes';\r\nsProcessSecurityCube = '}ProcessSecurity';\r\nIf (CubeExists(sProcessSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }ProcessSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sProcessSecurityCube, sProcessesDim, sGroupsDim);\r\nCubeSetLogChanges(sProcessSecurityCube, 1);\r\nEndIf;\r\n\r\n#*** Add TP processes to everyone group\r\n\r\ncEnterNodeProc = cControlPrefix | 'tp_workflow_enter_node';\r\ncLeaveNodeProc = cControlPrefix | 'tp_workflow_leave_node';\r\ncOwnNodeProc = cControlPrefix | 'tp_workflow_own_node';\r\ncRejectNodeProc = cControlPrefix | 'tp_workflow_reject_node';\r\ncSaveNodeProc = cControlPrefix | 'tp_workflow_save_node';\r\ncSubmitNodeProc = cControlPrefix | 'tp_workflow_submit_node';\r\ncSubmitLeafChildrenProc = cControlPrefix | 'tp_workflow_submit_leaf_children';\r\ncUpdateUserNameProc = cControlPrefix | 'tp_workflow_update_user_name';\r\ncInitializeSessionProc = cControlPrefix | 'tp_initialize_session';\r\ncExecuteActionProc = cControlPrefix | 'tp_workflow_execute_action';\r\ncBounceConflictUsersProc = cControlPrefix | 'tp_workflow_bounce_conflict_users';\r\ncDeleteDrillViewProc = cControlPrefix | 'tp_delete_drill_view';\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cEnterNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cLeaveNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cOwnNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cRejectNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSaveNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSubmitNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSubmitLeafChildrenProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cUpdateUserNameProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cInitializeSessionProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cInitializeSessionProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cInitializeSessionProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cInitializeSessionProc , cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cExecuteActionProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cBounceConflictUsersProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cDeleteDrillViewProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add applications dimension, its attributes dimension and cube to everyone group');\r\nEndIf;\r\n\r\ncApplicationsAttributesDim = '}ElementAttributes_' | cApplicationsDim;\r\ncApplicationsAttributesCube = '}ElementAttributes_' | cApplicationsDim;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', sProcessSecurityCube,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsAttributesDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsAttributesCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvDetail=INSRT(CellGetS(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup),vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add permissions dimension to everyone group');\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cPermissionsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add node info dimension to everyone group');\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cNodeInfoDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Set security on error cube');\r\nEndIf;\r\n\r\ncErrorCube = cControlPrefix | 'tp_process_errors';\r\ncErrorGuidsDim = cControlPrefix |  'tp_process_guids';\r\ncErrorMeasuresDim = cControlPrefix | 'tp_process_error_measures';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationRootPermissionsCube = cControlPrefix | 'tp_application_root_permissions';\r\ncApplicationRootPermissionsDimension = cControlPrefix | 'tp_root_permissions';\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorGuidsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorMeasuresDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cErrorCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cErrorCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cErrorCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cCentralApplicationStateCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTypeDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, vWorkflowActionTICube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube,vWorkflowActionTICube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vWorkflowActionTICube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, vWorkflowActionTICube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorAttrDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorAttrCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationRootPermissionsCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationRootPermissionsDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cTaskNavDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncurrentMaintenanceValue = ATTRS(cConfigDim, cServerMaintenanceRunning, 'StringValue');\r\nIf(currentMaintenanceValue @= '');\r\n\tAttrPutS('N', cConfigDim, cServerMaintenanceRunning, 'StringValue');\r\nEndIf;\r\n\r\nIf (cAddedNodeInfoReviewer @= 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_set_state_reviewers_all',\r\n\t\t'pExecutionId', pExecutionId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}Clients', cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}Clients', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT('}Clients',vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}Clients', cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationUserPreferencesDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationUserPreferencesCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Write', sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncSetApplicationUserPreferenceProc = cControlPrefix | 'tp_set_app_user_preference';\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSetApplicationUserPreferenceProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_create_users_and_groups",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_create_users_and_groups';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pSourceFile, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\nTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\nTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\nTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIf (DIMIX('}Groups', varGroup) = 0);\r\nAddGroup(varGroup);\r\nEndIf;\r\n\r\nIf (varUser @<> '' & DIMIX('}Clients', varUser) = 0);\r\nAddClient(varUser);\r\nEndIf;\r\n\r\n\r\n",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIf (varUser @<> '');\r\nAssignClientToGroup(varUser, varGroup);\r\nIf (varPassword @<> '');\r\nAssignClientPassword(varUser, varPassword);\r\nEndIf;\r\nEndIf;\r\n\r\n",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "varGroup",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varUser",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varPassword",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_custom_TI_delete_error_code",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pErrorCode);\r\nEndIf;\r\n\r\n#***\r\nvErrorDim = '}tp_process_errors_localization';\r\nIF (DIMIX(vErrorDim, pErrorCode) >0);\r\n\tDimensionElementDelete(vErrorDim, pErrorCode);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Error code: ' | pErrorCode | ' is deleted.');\r\n\tEndIf;\r\nEndif;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorCode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_custom_TI_update_error_code",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pErrorCode);\r\nEndIf;\r\n\r\n#***\r\nvErrorDim = '}tp_process_errors_localization';\r\nvAttrCube = '}ElementAttributes_' | vErrorDim;\r\nvAttrDim = vAttrCube;\r\nvAttrNameErrorType = 'ErrorType';\r\n\r\nvErrorType = 'Error';\r\nIF (pErrorType @= 'Warning');\r\n\tvErrorType = 'Warning';\r\nEndif;\r\n\r\nIF (DIMIX(vAttrDim, vAttrNameErrorType) =0);\r\nAttrInsert(vAttrDim, '', vAttrNameErrorType, 'S');\r\nEndif;\r\n\r\nIF (DIMIX(vErrorDim, pErrorCode) =0);\r\n\tDimensionElementInsert(vErrorDim, '', pErrorCode, 'N');\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncTM1Log = cEpilogLog;\r\n#***\r\nAttrPutS(vErrorType, vErrorDim, pErrorCode, vAttrNameErrorType);\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Error code: ' | pErrorCode | ' is updated.');\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorCode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorType",
        "Prompt": "",
        "Value": "Error",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_custom_TI_update_error_code_alias",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pErrorCode, pAliasName, pAliasValue);\r\nEndIf;\r\n\r\n#***\r\nvErrorDim = '}tp_process_errors_localization';\r\nvAttrCube = '}ElementAttributes_' | vErrorDim;\r\nvAttrDim = vAttrCube;\r\n\r\n\r\nIF (DIMIX(vErrorDim, pErrorCode) >0);\r\n\tIF (DIMIX(vAttrDim, pAliasName) =0);\r\n\t\tAttrInsert(vErrorDim, '', pAliasName, 'A');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Alias: ' | pAliasName | ' is added.');\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\nElse;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', vErrorDim | ', ' | pErrorCode,\r\n\t\t'pControl', 'Y');\r\n\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#***\r\ncTM1Log = cPrologLog;\r\n\r\n#Set caption support\r\nvCaptionCube = '}ElementCaptionsByDimension';\r\nvCaptionDim = '}Cultures';\r\nIF (DIMIX(vCaptionDim, pAliasName)>0);\r\n\tvCurrentCaption = CellGetS(vCaptionCube, vErrorDim, pAliasName, 'Input');\r\n\tIF (vCurrentCaption @<> pAliasName);\r\n\t\tCellPutS(pAliasName, vCaptionCube, vErrorDim, pAliasName, 'Input');\r\n\tEndif;\r\nEndif;\r\n\r\n\r\n#***\r\nAttrPutS(pAliasValue, vErrorDim, pErrorCode, pAliasName);\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'ErrorCode: ' | pErrorCode |  ' Alias: ' | pAliasName | ' is updated with ' | pAliasValue);\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorCode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAliasName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAliasValue",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_custom_TI_update_error_code_caption",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pErrorCode, pLocaleName, pLocaleValue);\r\nEndIf;\r\n\r\n#***\r\nvErrorDim = '}tp_process_errors_localization';\r\nvAttrCube = '}ElementAttributes_' | vErrorDim;\r\nvAttrDim = vAttrCube;\r\n\r\nIF (DIMIX(vErrorDim, pErrorCode) >0);\r\n\tIF (DIMIX(vAttrDim, 'Caption') =0);\r\n\t\tAttrInsert(vErrorDim, '', 'Caption', 'A');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Alias Caption is added.');\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\n\tIF (DIMIX(vAttrDim, 'CaptionDefaultLocale') =0);\r\n\t\tAttrInsert(vErrorDim, '', 'CaptionDefaultLocale', 'S');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'String Attribute CaptionDefaultLocale is added.');\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\nElse;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', vErrorDim | ', ' | pErrorCode,\r\n\t\t'pControl', 'Y');\r\n\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#***\r\ncTM1Log = cEpilogLog;\r\n\r\n#Set caption support\r\ncCultureDim = '}Cultures';\r\nIF (DIMIX(cCultureDim, pLocaleName)>0);\r\n\tIF (pIsDefault @= 'Y');\r\n\t\t#set default caption\r\n\t\tAttrPutS(pLocaleValue, vErrorDim ,pErrorCode , 'Caption');\r\n\t\tAttrPutS(pLocaleName, vErrorDim ,pErrorCode , 'CaptionDefaultLocale');\r\n\tEndif;\r\n\tAttrPutS(pLocaleValue, vErrorDim ,pErrorCode , 'Caption', pLocaleName);\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorCode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pLocaleName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pLocaleValue",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIsDefault",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_custom_TI_update_TI_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\nElse;\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\nEndIf;\r\n\r\ncProcessesDim = '}Processes';\r\ncProcessSecurityCube = '}ProcessSecurity';\r\n\r\n#***\r\nvAppSubset = 'temp_app_' | pApplicationId;\r\nvAppDim = '}tp_applications';\r\ncActionTICube = '}tp_workflow_action_TI';\r\ncActionDimension = '}tp_workflow_actions';\r\ncActionTIMeasuresDimension = '}tp_workflow_action_TI_measures';\r\ncFieldPreActionTI = 'PreActionTI';\r\ncFieldPreActionTIEnabled = 'PreActionTIEnabled';\r\ncFieldPostActionTI = 'PostActionTI';\r\ncFieldPostActionTIEnabled = 'PostActionTIEnabled';\r\nIF (CubeExists(cActionTICube) =0);\r\n\t#something went wrong when creating planning artifacts\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cActionTICube,\r\n\t\t'pControl', 'Y');\r\n\t\r\n\tProcessError;\r\n\r\nEndif;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pApplicationId, pPreActionTI, pPreActionTIEnabled, \r\n\t\tpPostActionTI, pPostActionTIEnabled, pClearCube);\r\nEndIf;\r\n\r\n#***remove read Access to all custom TIs and then clear them from the Custom TI cube\r\nIF (pClearCube @= 'Y');\r\n\r\n\t#***Remove read access on all custom TIs if they are not used by other applications\r\n\tvTotalActions = DIMSIZ(cActionDimension);\r\n\tvActionLooper = 1;\r\n\tWhile (vActionLooper <= vTotalActions);\r\n\t\tvAction = DIMNM(cActionDimension, vActionLooper);\r\n\t\tvCustomPreTI = CellGetS(cActionTICube, pApplicationId, vAction, cFieldPreActionTI );\r\n\t\tvCustomPostTI = CellGetS(cActionTICube, pApplicationId, vAction, cFieldPostActionTI );\r\n\t\tvPreTIUsedByOtherApp = 'N';\r\n\t\tvPostTIUsedByOtherApp = 'N';\r\n\r\n\t\tvTotalApplications = DIMSIZ(vAppDim);\r\n\t\tvAppLooper = 1;\r\n\r\n\t\tWhile (vAppLooper <= vTotalApplications);\r\n\t\t\tvOtherApp = DIMNM(vAppDim, vAppLooper);\r\n\t\t\tIF (vOtherApp @<> pApplicationId);\r\n\t\t\t\tvActionLooper2 = 1;\r\n\t\t\t\tWhile (vActionLooper2 <= vTotalActions);\r\n\t\t\t\t\tvOtherAppPreTI = CellGetS(cActionTICube, vOtherApp, vAction, cFieldPreActionTI );\r\n\t\t\t\t\tvOtherAppPostTI = CellGetS(cActionTICube, vOtherApp, vAction, cFieldPostActionTI );\r\n\t\t\t\t\tIF (vCustomPreTI @<>'' & (vCustomPreTI @= vOtherAppPreTI % vCustomPreTI @= vOtherAppPostTI));\r\n\t\t\t\t\t\tvPreTIUsedByOtherApp = 'Y';\r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\tIF (vCustomPostTI @<>'' & (vCustomPostTI @= vOtherAppPreTI % vCustomPostTI @= vOtherAppPostTI));\r\n\t\t\t\t\t\tvPostTIUsedByOtherApp = 'Y';\r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\tvActionLooper2 = vActionLooper2 +1;\r\n\t\t\t\tEnd;\r\n\t\t\tEndif;\r\n\t\t\tvAppLooper = vAppLooper +1;\r\n\t\tEnd;\r\n\r\n\t\tIF (vPreTIUsedByOtherApp @= 'N');\r\n\t\t\tIF (DIMIX(cProcessesDim, vCustomPreTI)>0);\r\n\t\t\t\tcCurrentCellValue = CellGetS(cProcessSecurityCube, vCustomPreTI, cEveryoneGroup); \r\n\t\t\t\tIf (cCurrentCellValue @= 'Read' % cCurrentCellValue @= 'Write');\r\n\t\t\t\t\tIf (CellIsUpdateable(cProcessSecurityCube, vCustomPreTI, cEveryoneGroup) = 0);\r\n\t\t\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\t\t\tvDetail=INSRT(cProcessSecurityCube,vDetail,1);\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndif;\r\n\t\t\t\tCellPutS('NONE', cProcessSecurityCube, vCustomPreTI, cEveryoneGroup);\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\r\n\t\tIF (vPostTIUsedByOtherApp @= 'N');\r\n\t\t\tIF (DIMIX(cProcessesDim, vCustomPostTI)>0);\r\n\t\t\t\tcCurrentCellValue = CellGetS(cProcessSecurityCube, vCustomPostTI, cEveryoneGroup); \r\n\t\t\t\tIf (cCurrentCellValue @= 'Read' % cCurrentCellValue @= 'Write');\r\n\t\t\t\t\tIf (CellIsUpdateable(cProcessSecurityCube, vCustomPostTI, cEveryoneGroup) = 0);\r\n\t\t\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\t\t\tvDetail=INSRT(cProcessSecurityCube,vDetail,1);\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndif;\r\n\t\t\t\tCellPutS('NONE', cProcessSecurityCube, vCustomPostTI, cEveryoneGroup);\r\n\t\t\tEndif;\r\n\r\n\t\tEndif;\r\n\r\n\t\tvActionLooper = vActionLooper +1;\r\n\tEnd;\r\n\r\n\t#***clear entries from the custom TI cube for this application only\r\n\r\n\tIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\t\tSubsetDestroy(vAppDim, vAppSubset);\r\n\tEndif;\r\n\tSubsetCreate(vAppDim, vAppSubset);\r\n\tSubsetElementInsert(vAppDim, vAppSubset, pApplicationId, 1);\r\n\t#***\r\n\tvTempView = 'tp_temp_view_' | pExecutionId;\r\n\tViewCreate(cActionTICube, vTempView);\r\n\tViewRowDimensionSet(cActionTICube, vTempView, cActionDimension, 1);\r\n\tViewColumnDimensionSet(cActionTICube, vTempView,cActionTIMeasuresDimension, 1);\r\n\tViewTitleDimensionSet(cActionTICube, vTempView, vAppDim);\r\n\tViewSubsetAssign(cActionTICube, vTempView, vAppDim, vAppSubset);\r\n\tViewZeroOut(cActionTICube, vTempView);\r\n\tViewDestroy(cActionTICube, vTempView);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\n\r\nEndif;\r\n\r\n#***\r\n\r\nvSetTIAccess = 'N';\r\nIF (DIMIX(cActionDimension, pWorkflowAction) >0);\r\n\r\n\tCellPutS(pPreActionTI, cActionTICube, pApplicationId, pWorkflowAction, cFieldPreActionTI);\r\n\tCellPutS(pPreActionTIEnabled, cActionTICube, pApplicationId, pWorkflowAction, cFieldPreActionTIEnabled);\r\n\tCellPutS(pPostActionTI, cActionTICube, pApplicationId, pWorkflowAction, cFieldPostActionTI);\r\n\tCellPutS(pPostActionTIEnabled, cActionTICube, pApplicationId, pWorkflowAction, cFieldPostActionTIEnabled);\r\n\tvSetTIAccess = 'Y';\r\n\r\nEndif;\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (vSetTIAccess @= 'Y' & pPreActionTI @<> '');\r\n\r\n\tIF (DIMIX(cProcessesDim, pPreActionTI)>0);\r\n\t\tcCurrentCellValue = CellGetS(cProcessSecurityCube, pPreActionTI, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(cProcessSecurityCube, pPreActionTI, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(pPreActionTI,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cProcessSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', cProcessSecurityCube, pPreActionTI, cEveryoneGroup);\r\n\t\tEndif;\r\n\tElse;\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_COSTOM_TI_NOT_EXIST',\r\n\t\t\t'pErrorDetails', pPreActionTI,\r\n\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\tProcessError;\r\n\tEndif;\r\nEndIf;\r\n\r\nIF (vSetTIAccess @= 'Y' & pPostActionTI @<> '');\r\n\r\n\tIF (DIMIX(cProcessesDim, pPostActionTI)>0);\r\n\t\tcCurrentCellValue = CellGetS(cProcessSecurityCube, pPostActionTI, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(cProcessSecurityCube, pPostActionTI, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(pPostActionTI,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cProcessSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', cProcessSecurityCube, pPostActionTI, cEveryoneGroup);\r\n\t\tEndif;\r\n\tElse;\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_COSTOM_TI_NOT_EXIST',\r\n\t\t\t'pErrorDetails', pPreActionTI,\r\n\t\t\t'pControl', 'Y');\r\n\t\t\t\t\r\n\t\tProcessError;\r\n\tEndif;\r\nEndIf;\r\n#***\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApplicationId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pWorkflowAction",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pPreActionTI",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pPreActionTIEnabled",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pPostActionTI",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pPostActionTIEnabled",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pClearCube",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_delete_approval_security_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Parameters:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pExecutionId, pApproval, pControl);\r\nEndIf;\r\n\r\ncSecurityCube = '}ElementSecurity_' | pApproval;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Checking for security cube:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cSecurityCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cSecurityCube) = 1);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Security cube exists, calling CubeDestroy:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cSecurityCube);\r\n\tEndIf;\r\n\tCubeDestroy(cSecurityCube);\r\nElse;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Security cube does not exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cSecurityCube);\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApproval",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_delete_drill_view",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Parameters:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pExecutionId, pCube, pView, 'Y');\r\nEndIf;\r\n\r\ncDrillPrefix = 'DRILL.';\r\ncDrillPrefixLength = LONG(cDrillPrefix);\r\n\r\nIf (pCube @<> '' & CubeExists(pCube) <> 0);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tIf (LONG(pView) >= cDrillPrefixLength & SUBST(pView, 1, cDrillPrefixLength) @= cDrillPrefix);\r\n\t\t\tTextOutput(cTM1Log, 'View has correct prefix:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, pView);\r\n\t\tElse;\r\n\t\t\tTextOutput(cTM1Log, 'View has wrong prefix:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), SUBST(pView, 1, cDrillPrefixLength), STR(cDrillPrefixLength, 3, 0));\r\n\t\tEndIf;\r\n\t\tIf (ViewExists(pCube, pView) <> 0);\r\n\t\t\tTextOutput(cTM1Log, 'View does exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, pView);\r\n\t\tElse;\r\n\t\t\tTextOutput(cTM1Log, 'View does not exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, pView);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tIf (LONG(pView) >= cDrillPrefixLength & SUBST(pView, 1, cDrillPrefixLength) @= cDrillPrefix & ViewExists(pCube, pView) <> 0);\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Executing ViewDestroy:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, pView);\r\n\t\tEndIf;\r\n\t\tViewDestroy(pCube, pView);\r\n\t\tcSubsetName = pView;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Search Cube Dimensions for Subset:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, cSubsetName);\r\n\t\tEndIf;\r\n\t\tvDimIndex = 1;\r\n\t\tcDimName = TABDIM(pCube, vDimIndex);\r\n\t\tWhile ( cDimName @<> '' );\r\n\t\t\tIf (SubsetExists(cDimName, cSubsetName) = 1);\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Subset exists, delete the subset:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, cDimName, cSubsetName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tSubsetDestroy(cDimName, cSubsetName);\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Subset does not exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, cDimName, cSubsetName);\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\t\tvDimIndex = vDimIndex + 1;\r\n\t\t\tcDimName = TABDIM(pCube, vDimIndex);\r\n\t\tEnd;\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'View does not exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube, pView);\r\n\t\tEndIf;\r\n\tEndIf;\r\nElse;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube does not exist:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pCube);\r\n\tEndIf;\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pView",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_delete_sandboxes",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Parameters:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pExecutionId, pAppId, pControl);\r\nEndIf;\r\n\r\n#*** Remove the sandboxes\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Calling ServerSandboxesDelete(name:containing:_' | pAppId | ')');\r\nEndIf;\r\nServerSandboxesDelete('name:containing:_' | pAppId);\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_app_cubes_add",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncCubePropertiesCube = '}CubeProperties';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationStateCube = cControlPrefix | 'tp_application_state}'|pAppId;\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\n\r\ncDataReservationType = '';\r\nIf (cAppActive @= 'Y');\r\n\tcDataReservationType = 'REQUIREDSHARED';\r\n\tIf (cApprovalDIM @= '');\r\n\t\tcDataReservationType = 'ALLOWED';\r\n\tEndIf;\r\nEndIf;\r\n\r\n#***\r\nvCubeName = pCubeName;\r\nvCurrentDRMode = CellGetS( cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\t\t\r\nIF (cDataReservationType @<> '');\r\n\t# set DR mode when it has a valide mode type, otherwise do not overide other application's valid DR mode\r\n\tCellPutS(cDataReservationType, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\nEndif;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Data Reservation is now ' | cDataReservationType | ' on cube ' | vCubeName);\r\nEndIf;\r\n\r\n#***\r\n#Add data reservations, update security overlay and RD cell security cube if this is a new cube\r\nIf (cApprovalDIM @= '');\r\n\t# If the Central app has an existing owner make sure any new cubes get a data reservation.\r\n\tcState = CellGetS(cCentralApplicationStateCube, pAppId, 'State');\r\n\tIf (cState @= '2');\r\n\t\tcCurrentOwner = CellGetS(cCentralApplicationStateCube, pAppId, 'CurrentOwnerId');\r\n\t\tIf (cCurrentOwner @<> '');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pCube', vCubeName, 'pApprovalDim', '', 'pNode', '',  'pReserve', 'Y', 'pUser', cCurrentOwner, 'pControlDim','','pControlWritableSlices', '');\r\n\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\nElse;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for existing ownership for cube ' | vCubeName);\r\n\tEndIf;\r\n\r\n\t# If there are any existing node owners make sure any new cubes get a data reservation. \r\n\t#Also we need to update the newly created security overlay cube\r\n\t#We need to update the newly created Reduced Dimensionality cell security cube based on planning rights\r\n\tIf (CubeExists(cApplicationStateCube) = 1);\r\n\t\tcApprovalSubsetSize = SubsetGetSize(cApprovalDim,cApprovalSubset );\r\n\t\tvIndex = 1;\r\n\t\tWhile (vIndex <= cApprovalSubsetSize);\r\n\t\t\tvApprovalNode = SubsetGetElementName(cApprovalDIM, cApprovalSubset, vIndex);\r\n\t\t\tcState = CellGetS(cApplicationStateCube, vApprovalNode, 'State');\r\n\t\t\tIf (cState @= '4');\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pAppId', pAppId, 'pCube', vCubeName, 'pApprovalDim', cApprovalDIM, 'pNode', vApprovalNode, 'pLock', 'Y','pControlDim','','pControlWritableSlices', '');\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndif;\r\n\r\n\t\t\tIf (DTYPE(cApprovalDIM, vApprovalNode) @<> 'C');\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node state for node ' | vApprovalNode | ' in cube ' | vCubeName | ' is ' | cState);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (cState @= '2');\r\n\t\t\t\t\tcCurrentOwner = CellGetS(cApplicationStateCube, vApprovalNode, 'CurrentOwnerId');\r\n\t\t\t\t\tcOwnershipNode = CellGetS(cApplicationStateCube, vApprovalNode, 'TakeOwnershipNode');\r\n\t\t\t\t\tIf (cCurrentOwner @<> '' & cOwnershipNode @<> '');\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t\t'pAppId', pAppId, 'pCube', vCubeName, 'pApprovalDim', cApprovalDIM, 'pNode', cOwnershipNode, 'pReserve', 'Y', 'pUser', cCurrentOwner,'pControlDim','','pControlWritableSlices', '');\r\n\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndif;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_app_cubes_cleanup",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ncCubePropertiesCube = '}CubeProperties';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationStateCube = cControlPrefix | 'tp_application_state}'|pAppId;\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndif;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndif;\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndif;\r\n#***\r\nvAppSubset = 'temp_app_' | pAppId;\r\nvAppDim = '}tp_intermediate_security_applications';\r\nIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\nSubsetCreate(vAppDim, vAppSubset);\r\nSubsetElementInsert(vAppDim, vAppSubset, pAppId, 1);\r\n#***\r\n\r\n#clear existing cube flags in case this is a redeployment\r\nvCubeName = pCubeName;\r\nvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\nvRDCellSecurityCube = '}CellSecurity_' | vCubeName;\r\nvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\nvIntermediateApplicationsDim = '}tp_intermediate_security_applications';\r\nvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\r\ncIsAppCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\r\nIf (cIsAppCube @= 'A' % (cApprovalDIM @= '' & cIsAppCube @<> ''));\r\n\r\n\t#***Remove task security cube for this application\r\n\tcTaskSecurityCube = '}tp_task_security}' | pCubeName | '}' | pAppId;\r\n\tCubeDestroy(cTaskSecurityCube);\r\n\r\n\t#check whether this cube is shared by other applications\r\n\tvAppLooper = 1;\r\n\tvIsOtherAppCube = '';\r\n\tvUsedByOtherApp = 'F';\r\n\tvAppDimension = '}tp_applications';\r\n\tvOtherAppIsActive = 'F';\r\n\tvTotalApps = DIMSIZ(vAppDimension);\r\n\tvNewDRMode = '';\r\n\tWhile (vAppLooper <= vTotalApps);\r\n\t\tvOtherAppId = DIMNM(vAppDimension, vAppLooper);\r\n\t\tIF (trim(vOtherAppId) @<> trim(pAppId));\r\n\t\t\tvIsOtherAppCube = CellGetS(cApplicationCubesCube, vOtherAppId, vCubeName);\r\n\t\t\tvOtherAppActive = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'IsActive'); \r\n\t\t\tvOtherAppApprovalDim = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'ApprovalDimension'); \r\n\t\t\tIF (vIsOtherAppCube @= 'A' );\r\n\t\t\t\tvUsedByOtherApp = 'T';\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvOtherAppIsActive = 'T';\r\n\t\t\t\t\tvNewDRMode = ' REQUIREDSHARED';\r\n\t\t\t\tEndif;\r\n \t\t\tElseif (vIsOtherAppCube @='Y' & vOtherAppApprovalDim @='');\r\n\t\t\t\tvUsedByOtherApp = 'T';\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvOtherAppIsActive = 'T';\r\n\t\t\t\t\tvNewDRMode =  'ALLOWED';\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\r\n\t\tEndif;\r\n\t\tvAppLooper = vAppLooper +1;\r\n\tEnd;\r\n\r\n\tIF (vUsedByOtherApp @= 'F');\r\n\t\t#remove security overlay cube\r\n\t\tIF (CubeExists(vSecuirtyOverlayCube) = 1);\r\n\t\t\tSecurityOverlayDestroyGlobalDefault(vCubeName);\r\n\t\tEndif;\r\n\r\n\t\t#remove RDCellSecurity cube\r\n\t\t#IF (CubeExists(vRDCellSecurityCube) = 1);\r\n\t\t#\tCellSecurityCubeDestroy (vCubeName);\r\n\t\t#Endif;\r\n\r\n\t\t#remove RDCLS intermediate cube\r\n\t\tIF (CubeExists(vRDCLSIntermediateCube) = 1);\r\n\t\t\tCubeDestroy(vRDCLSIntermediateCube);\r\n\t\tEndif;\r\n\r\n\tElse;\r\n\t\tvDimIndex =1;\r\n\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\tvFoundVersion = 'F';\r\n\t\tWhile (vDimension @<> '');\r\n\t\t\tIF (vDimension @= cVersionDim);\r\n\t\t\t\tvFoundVersion = 'T';\r\n\t\t\tEndIf;\r\n\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\tEnd;\r\n\r\n\t\t#clear security overlay cube for this application only\r\n\t\tIF (CubeExists(vSecuirtyOverlayCube)>0);\r\n\t\t\tvAllView = 'tp_temp_scurity_overlay_view_' | pExecutionId;\r\n\t\t\tViewCreate(vSecuirtyOverlayCube, vAllView);\r\n\t\t\tViewColumnDimensionSet(vSecuirtyOverlayCube, vAllView, '}Groups', 1);\r\n\t\t\tViewRowDimensionSet(vSecuirtyOverlayCube, vAllView, cApprovalDim, 1);\r\n\t\t\tIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '' & vFoundVersion @= 'T' );\r\n\t\t\t\tViewTitleDimensionSet(vSecuirtyOverlayCube, vAllView, cVersionDim);\r\n\t\t\t\tViewSubsetAssign(vSecuirtyOverlayCube, vAllView, cVersionDim, vVersionSubset);\r\n\t\t\tEndif;\r\n\t\t\tViewZeroOut(vSecuirtyOverlayCube, vAllView);\r\n\t\t\tViewDestroy(vSecuirtyOverlayCube, vAllView);\r\n\t\tEndif;\r\n\r\n\r\n\t\t#sync up StaticRights field in intermediate cell security cube\r\n\t\tvReturnValue = ExecuteProcess('}tp_rights_update_RDCLS_static_rights', 'pExecutionId', pExecutionId,\r\n\t\t\t'pAppId', pAppId, 'pCube', pCubeName, 'pApprovalDim', cApprovalDim, 'pUpdateSubset', cApprovalSubset,\r\n\t\t\t'pVersionDim', cVersionDim, 'pGroupsDim', '}Groups');\r\n\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\tEndif;\r\n\r\n\t# clear the require reservation \r\n\tCellPutS(vNewDRMode, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Reset DR mode in ' | vCubeName);\r\n\tEndIf;\r\n\t\t\t\r\n\t#remove any existing data reservations by this application only\r\n\t#do NOT remove data reservations made by other applications\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t'pCube', vCubeName, 'pApprovalDim', '', 'pNode', '', 'pReserve', 'N', 'pUser', '','pControlDim','','pControlWritableSlices', '');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t## clear the flag\r\n\tCellPutS('', cApplicationCubesCube, pAppId, vCubeName);\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(vAppDim, vAppSubset) >0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_create_ElementSecurity_approval",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nDatasourceASCIIQuoteCharacter='';\r\nsingleQ = char(39);\r\n\r\n#***create intermediate element security cube for approval dimension\r\ncIMAppDim =  '}tp_intermediate_security_applications';\r\ncIMElemSecurityCube = '}tp_intermediate_ElementSecurity}' | pApprovalDim;\r\ncIMMeasuresDim = '}tp_intermediate_security_measures';\r\n\t\r\nIF (CubeExists(cIMElemSecurityCube) =0);\r\n\tCubeCreate(cIMElemSecurityCube, pApprovalDim,cIMAppDim, '}Groups',cIMMeasuresDim );\r\n\tCubeSetLogChanges(cIMElemSecurityCube, 1);\r\nElse;\r\n\t#zero out old security values on this application\r\n\r\n\r\nEndif;\r\n\r\n#***build cube rule for intermediate security cube\r\nvRule = '';\r\nvRule = '[' | singleQ | 'WriteCount' | singleQ | '] =IF(!' | cIMAppDim | '@<>' | singleQ | 'all_applications' | singleQ | ',\r\n \tIF(DB(' | singleQ  | cIMElemSecurityCube | singleQ | ',!' | pApprovalDim | ',!' | cIMAppDim | ', !}Groups, ' | singleQ | 'Rights' | singleQ | ') @= ' | singleQ | 'WRITE' | singleQ | ',1, 0 ),Continue);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'ReadCount' | singleQ | '] =IF(!' | cIMAppDim | '@<>' | singleQ | 'all_applications' | singleQ | ',\r\n \tIF(DB(' | singleQ  | cIMElemSecurityCube | singleQ | ',!' | pApprovalDim | ',!' | cIMAppDim | ', !}Groups, ' | singleQ | 'Rights' | singleQ | ') @= ' | singleQ | 'READ' | singleQ | ',1, 0 ),Continue);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'WriteCount' | singleQ  | ']=ConsolidateChildren(' | singleQ |  cIMAppDim | singleQ | ');';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'ReadCount' | singleQ  | ']=ConsolidateChildren(' | singleQ |  cIMAppDim | singleQ | ');';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'Rights' | singleQ | ']=\r\n\tS:IF(DB(' | singleQ | cIMElemSecurityCube | singleQ | ',!' | pApprovalDim | ',!' | cIMAppDim | ', !}Groups,' | singleQ | 'WriteCount' | singleQ | ')>0, ' | singleQ | 'WRITE' | singleQ | ', CONTINUE);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'Rights' | singleQ | ']=\r\n\tS:IF(DB(' | singleQ | cIMElemSecurityCube | singleQ | ',!' | pApprovalDim | ',!' | cIMAppDim | ', !}Groups,' | singleQ | 'ReadCount' | singleQ | ')>0, ' | singleQ | 'READ' | singleQ | ', CONTINUE);';\r\n\r\nvIMFile = 'IMElementSecurityRule' | pApprovalDim | '.txt';\r\nTextOutput(vIMFile, vRule);\r\n\r\n#***create element security cube for approval dimension\r\ncElementSecurityCube = '}ElementSecurity_' | pApprovalDim;\r\ncElementSecurityRule = '';\r\nIF (CubeExists(cElementSecurityCube) =0);\r\n\tCubeCreate(cElementSecurityCube, pApprovalDim, '}Groups' );\r\n\tCubeSetLogChanges(cElementSecurityCube, 1);\r\nEndif;\r\n\r\n#***build cube rule for element security cube\r\nvRule = '';\r\nvRule = '[] = S:DB(' | singleQ | cIMElemSecurityCube | singleQ | ',!' | pApprovalDim | ',' | singleQ | 'all_applications' | singleQ | ', !}Groups,' | singleQ | 'Rights' | singleQ | ');';\r\nvFile = 'ElementSecurityRule' | pApprovalDim | '.txt';\r\nTextOutput(vFile, vRule);",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nRuleLoadFromFile(cIMElemSecurityCube, vIMFile);\r\nASCIIDelete(vIMFile);\r\n\r\nRuleLoadFromFile(cElementSecurityCube, vFile);\r\nASCIIDelete(vFile);",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_create_RDCLS_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Process = '}tp_deploy_create_RDCLS_cube';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS('}tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n\r\n#*** Check if a new version dimension is added.\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncControlDimOld = ATTRS('}tp_applications', pAppId,  'VersionDimensionOld');\r\nseIsNewVersionDimensionAdded = 'N';\r\nIF (cControlDimOld @='' & cControlDim @<> '');\r\nseIsNewVersionDimensionAdded = 'Y';\r\nEndif;\r\n\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Version dimension is added in redeployment');\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n#*** Determine the order of approval dimension and version dimension\r\nDatasourceASCIIQuoteCharacter='';\r\nsingleQ = char(39);\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\n\r\n#***\r\nvAppSubset = 'temp_app_' | pAppId;\r\nvAppDim = '}tp_intermediate_security_applications';\r\nIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndIf;\r\nSubsetCreate(vAppDim, vAppSubset);\r\nSubsetElementInsert(vAppDim, vAppSubset, pAppId, 1);\r\n\r\n#***\r\nversionIndex = 0;\r\napprovalIndex = 0;\r\nvDimIndex =1;\r\nvDimension = TABDIM(pCube, vDimIndex);\r\nvTokenString = '';\r\n\r\nWhile (vDimension @<> '');\r\n\tIF (vDimension @= cApprovalDim);\r\n\t\tvSingleToken = '1';\r\n\t\tapprovalIndex = vDimIndex;\r\n\tElseIF (vDimension @= cVersionDim);\r\n\t\tvSingleToken = '1';\r\n\t\tversionIndex = vDimIndex;\r\n\tElse;\r\n\t\tvSingleToken = '0';\r\n\tEndIf;\r\n\tIF (vDimIndex > 1);\r\n\t\tvSingleToken = ':' | vSingleToken;\r\n\tEndIf;\r\n\tvTokenString = vTokenString | vSingleToken;\r\n\tvDimIndex = vDimIndex +1;\r\n\tvDimension = TABDIM(pCube, vDimIndex);\r\nEnd;\r\n\r\nIf (versionIndex < approvalIndex);\r\nversionFirst = 'Y';\r\nEndIf;\r\n\r\n\r\n#*** Check whether this is the first initial deployed application that gets to use this cube\r\ncApplicationCubesCube = '}tp_application_cubes';\r\n\r\nvVersion = '';\r\nvUsedByAnyApp = 'N';\r\nvAppLooper = 1;\r\nvIsOtherAppCube = '';\r\nvAppDimension = '}tp_applications';\r\nvTotalApps = DIMSIZ(vAppDimension);\r\nWhile (vAppLooper <= vTotalApps);\r\n\tvOtherAppId = DIMNM(vAppDimension, vAppLooper);\r\n\tvIsOtherAppCube = CellGetS(cApplicationCubesCube, vOtherAppId, pCube);\r\n\tvOtherAppApprovalDim = ATTRS( '}tp_applications', vOtherAppId, 'ApprovalDimension'); \r\n\tvAppSecuritySet = ATTRS( '}tp_applications', vOtherAppId, 'SecuritySet'); \r\n\tvVersion = ATTRS( '}tp_applications', vOtherAppId, 'Version');\r\n\t\r\n\t# It is an upgrade when version string is empty.\r\n    If (vVersion @<> '');\r\n\t\tIF (vIsOtherAppCube @= 'A' & vAppSecuritySet @= 'Y' );\r\n\t\t\tvUsedByAnyApp = 'Y';\r\n \t\tElseIf (vIsOtherAppCube @='Y' & vOtherAppApprovalDim @='');\r\n\t\t\tvUsedByAnyApp = 'Y';\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tvAppLooper = vAppLooper +1;\r\nEnd;\r\n\r\n\r\n#*** Create intermediate cell security cube\r\ncIMAppDim =  '}tp_intermediate_security_applications';\r\ncIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;\r\ncIMMeasuresDim = '}tp_intermediate_security_measures';\r\n\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tIf (CubeExists(cIMRDCLSCube) > 0);\r\n\t\tCubeDestroy(cIMRDCLSCube);\r\n\tEndIf;\r\nEndIf;\r\n\t\r\nIF (CubeExists(cIMRDCLSCube) =0);\r\n\tIF (versionIndex >0 & approvalIndex >0);\r\n\t\tIF (versionFirst @= 'Y');\r\n\t\t\tCubeCreate(cIMRDCLSCube, cVersionDim, cApprovalDim,cIMAppDim, '}Groups',cIMMeasuresDim );\r\n\t\tElse;\r\n\t\t\tCubeCreate(cIMRDCLSCube, cApprovalDim,cVersionDim, cIMAppDim, '}Groups',cIMMeasuresDim );\r\n\t\tEndIf;\r\n\tElseIf (versionIndex >0 & approvalIndex =0);\r\n\t\tCubeCreate(cIMRDCLSCube, cVersionDim, cIMAppDim, '}Groups',cIMMeasuresDim );\r\n\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\tCubeCreate(cIMRDCLSCube, cApprovalDim,cIMAppDim, '}Groups',cIMMeasuresDim );\r\n\tEndIf;\r\n\r\n\r\n\tCubeSetLogChanges(cIMRDCLSCube, 1);\r\n\r\nEndIf;\r\n\r\n\r\n#*** Build cube rule for intermediate security cube\r\nvMidString = '';\r\nIf (versionIndex >0 & approvalIndex >0);\r\n\tIf (versionFirst @= 'Y');\r\n\t\tvMidString = ',!' | cVersionDim | ',!' | cApprovalDim;\r\n\tElse;\r\n\t\tvMidString = ',!' | cApprovalDim | ',!' | cVersionDim;\r\n\tEndIf;\r\nElseIf (versionIndex >0 & approvalIndex =0);\r\n\tvMidString = ',!' | cVersionDim;\r\nElseIf (versionIndex =0 & approvalIndex >0);\r\n\tvMidString = ',!' | cApprovalDim;\r\nEndIf;\r\n\r\nvRule = '';\r\nvRule = '[' | singleQ | 'WriteCount' | singleQ | '] =IF(!' | cIMAppDim | '@<>' | singleQ | 'all_applications' | singleQ | ',\r\n \tIF(DB(' | singleQ  | cIMRDCLSCube | singleQ | vMidString | ',!' | cIMAppDim | ', !}Groups, ' | singleQ | 'Rights' | singleQ | ') @= ' | singleQ | 'WRITE' | singleQ | ',1, 0 ),Continue);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'ReadCount' | singleQ | '] =IF(!' | cIMAppDim | '@<>' | singleQ | 'all_applications' | singleQ | ',\r\n \tIF(DB(' | singleQ  | cIMRDCLSCube | singleQ | vMidString |  ',!' | cIMAppDim | ', !}Groups, ' | singleQ | 'Rights' | singleQ | ') @= ' | singleQ | 'READ' | singleQ | ',1, 0 ),Continue);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'WriteCount' | singleQ  | ']=ConsolidateChildren(' | singleQ |  cIMAppDim | singleQ | ');';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'ReadCount' | singleQ  | ']=ConsolidateChildren(' | singleQ |  cIMAppDim | singleQ | ');';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'Rights' | singleQ | ']=\r\n\tS:IF(DB(' | singleQ | cIMRDCLSCube | singleQ | vMidString |  ',!' | cIMAppDim | ', !}Groups,' | singleQ | 'WriteCount' | singleQ | ')>0, ' | singleQ | 'WRITE' | singleQ | ', CONTINUE);';\r\nvRule = vRule | char(10) | '[' | singleQ | 'all_applications' | singleQ | ',' | singleQ | 'Rights' | singleQ | ']=\r\n\tS:IF(DB(' | singleQ | cIMRDCLSCube | singleQ | vMidString |  ',!' | cIMAppDim | ', !}Groups,' | singleQ | 'ReadCount' | singleQ | ')>0, ' | singleQ | 'READ' | singleQ | ', ' | singleQ | '' | singleQ | ');';\r\n\r\nvIMFile = 'IMRDCLS_rule_' | pCube | '.txt';\r\nSetOutputCharacterSet(vIMFile, 'TM1CS_UTF8');\r\nTextOutput(vIMFile, vRule);\r\n\r\n#set default value to \"NONE\"\r\nvDefaultPropertyCube = '}CubeSecurityProperties';\r\ncTM1Process = GetProcessName();\r\nIF (CubeExists(vDefaultPropertyCube) = 0);\r\n\r\n\tExecuteProcess('}tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', vDefaultPropertyCube, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nElse;\r\n\tCellPutS('NONE', vDefaultPropertyCube, pCube, 'CELLSECURITYDEFAULTVALUE');\r\nEndIf;\r\n\r\n#***create RD cell security cube for approval dimension\r\ncRDCLSCube ='}CellSecurity_' | pCube;\r\n\r\nIF (CubeExists(cRDCLSCube) =0  );\r\n\tIF (SCAN('1', vTokenString) >0);\r\n\t\tCellSecurityCubeCreate (pCube,vTokenString);\r\n\t\tCubeSetLogChanges(cRDCLSCube, 1);\r\n\tEndIf;\r\nEndIf;",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\nRuleLoadFromFile(cIMRDCLSCube, vIMFile);\r\nASCIIDelete(vIMFile);\r\n\r\nIF (SubsetExists(vAppDim, vAppSubset) >0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pZeroOut",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_create_security_overlay_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncTaskNavDimensions = '}tp_task_navigation_dims}' | pAppId;\r\ncTaskNavigationCube = '}tp_task_navigations}' | pAppId;\r\n#***\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\nvCubeName = pCubeName;\r\n\r\n#***create Security overlay cube\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for security overly cube and RD cell security cube for ' | vCubeName);\r\nEndIf;\r\n\r\nvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\nvCellSecurityPermissionCube = '}CellSecurity_}tp_application_permission}' | pAppId;\t\t\t\r\nvDimIndex =1;\r\nvDimension = TABDIM(vCubeName, vDimIndex);\r\nvTokenString = '';\r\nvNavDimensionFound = 'F';\r\nvVersionFound = 'F';\r\nWhile (vDimension @<> '');\r\n\tvTotalNavDimensions = DIMSIZ(cTaskNavDimensions);\r\n\tvNavLooper = 1;\r\n\tvIsNavDimension = 'F';\r\n\tWhile (vNavLooper <= vTotalNavDimensions);\r\n\t\tvNavDimension = DIMNM(cTaskNavDimensions, vNavLooper);\r\n\t\tIF (vDimension @= vNavDimension);\r\n\t\t\tvIsNavDimension = 'T';\r\n\t\tEndif;\r\n\r\n\t\tvNavLooper = vNavLooper +1;\r\n\tEnd;\r\n\r\n\tIF (vIsNavDimension @= 'T');\r\n\t\tvSingleToken = '1';\r\n\t\tvNavDimensionFound  = 'T';\r\n\tElseIF (vDimension @= cVersionDim);\r\n\t\tvSingleToken = '1';\r\n\t\tvVersionFound = 'T';\r\n\tElse;\r\n\t\tvSingleToken = '0';\r\n\tEndIf;\r\n\r\n\tIF (vDimIndex > 1);\r\n\t\tvSingleToken = ':' | vSingleToken;\r\n\tEndif;\r\n\r\n\tvTokenString = vTokenString | vSingleToken;\r\n\tvDimIndex = vDimIndex +1;\r\n\tvDimension = TABDIM(vCubeName, vDimIndex);\r\nEnd;\r\n\r\nIF (vNavDimensionFound  @= 'T');\r\n\tIF (CubeExists(vSecuirtyOverlayCube) = 0);\r\n\t\tSecurityOverlayCreateGlobalDefault(vCubeName, vTokenString);\r\n\tEndif;\r\nEndif;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_create_shadow_dimension",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010, 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pAppId, pApprovalDim, pApprovalSubset);\r\nEndIf;\r\n\r\n\r\n#*** Define constants\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncAttributeCube = '}ElementAttributes_' | cShadowApprovalDim;\r\ncAttributeDim = cAttributeCube;\r\ncApprovalAttributeCube = '}ElementAttributes_' | pApprovalDim;\r\ncApprovalAttributeDim = cApprovalAttributeCube;\r\n\r\n\r\n#*** Create Shadow Dimension\r\nIf (pIncrShadowDimUpdate @= 'Y');\r\n\tvCopyApprovalHierarchyContents = 'N';\r\nElse;\r\n\tvCopyApprovalHierarchyContents = 'Y';\r\nEndIf;\r\n\r\nIf (DimensionExists(cShadowApprovalDim) = 0);\r\n\tDimensionCreate(cShadowApprovalDim);\r\n\tvCopyApprovalHierarchyContents = 'Y';\r\nEndIf;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, pApprovalSubset) = 0);\r\n\tSubsetCreate(cShadowApprovalDim, pApprovalSubset);\r\nEndIf;\r\n\r\n# The subset we create on the Shadow Approval Dim will always comprise the whole\r\n# contents of cShadowApprovalDim, so we can just set it to use the whole dimension\r\nSubsetIsAllSet(cShadowApprovalDim, pApprovalSubset,1);\r\n\r\n#*** copy all aliases from approval dimension to the shadow dimension\r\nvTotalAttributes = DIMSIZ(cApprovalAttributeDim);\r\nvAttrLooper = vTotalAttributes;\r\n\r\nWhile (vAttrLooper >=1);\r\n\tvAttribute = DIMNM(cApprovalAttributeDim, vAttrLooper);\r\n\tinsertAlias = 'N';\r\n\tIf (CubeExists(cAttributeCube) =0);\r\n\t\tinsertAlias = 'Y';\r\n\tElseIf (DIMIX(cAttributeDim, vAttribute) = 0);\r\n\t\tinsertAlias = 'Y';\r\n\tElse;\r\n\t\tinsertAlias = 'N';\r\n\tEndIf;\r\n\t\r\n\tIF (insertAlias @= 'Y');\r\n\t\tvAttributeType = DType(cApprovalAttributeDim, vAttribute);\r\n\t\tIF (vAttributeType @= 'AA');\r\n\t\t\tAttrInsert(cShadowApprovalDim, '', vAttribute, 'A');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tvAttrLooper = vAttrLooper -1;\r\nEnd;\r\n\r\n\r\n#*** Use the same alias\r\nIf (pSubsetAlias @<>'' & DIMIX(cAttributeDim, pSubsetAlias) >0);\r\n\tSubsetAliasSet(cShadowApprovalDim, pApprovalSubset, pSubsetAlias);\r\nEndIf;\r\n\r\n#*** Delete all elements in Shadow Approval Dimension and copy all elements from approval hierarchy\r\nIf (vCopyApprovalHierarchyContents @= 'Y');\r\n\tDimensionDeleteAllElements(cShadowApprovalDim);\r\n\r\n\tvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\n\tlooper = 1;\r\n\tWhile (looper <= vTotalNodes);\r\n\t\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\t\tvType = DType(pApprovalDim, vElem);\r\n\t\tDimensionElementInsert(cShadowApprovalDim, '', vElem, vType);\r\n\t\tlooper = looper +1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#  re-build the hierarchy in cShadowApprovalDim\r\nvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nlooper = 1;\r\n\r\nWhile (looper <=vTotalNodes);\r\n\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\t# Need to handle dimensions with multiple roll-ups...so when we look to find the shadow dimension element's parent in the original\r\n\t# pApprovalDim, we need to ensure that the parent is also in cShadowApprovalDim....if it's not, then\r\n\t# keep looking until you find it. We know we only have to look a maximum of ELPARN times.\r\n\tvElemParentCount = ELPARN(pApprovalDim, vElem);\r\n\trolluplooper = 1;\r\n\tWhile (rolluplooper <= vElemParentCount);\r\n\t\tvOriginalParent = ELPAR(pApprovalDim, vElem, rolluplooper);\r\n\t\t# Check that parent of selected node exists in the shadow a/h...if it doesn't, then keep looking\r\n\t\tIf (DIMIX(cShadowApprovalDim, vOriginalParent)<>0);\r\n\t\t\tvWeight = ELWEIGHT(pApprovalDim, vOriginalParent, vElem);\r\n\t\t\tDimensionElementComponentAdd(cShadowApprovalDim, vOriginalParent, vElem, vWeight);\r\n\t\tEndIf;\r\n\t\trolluplooper = rolluplooper + 1;\r\n\tEnd;\r\n\t\r\n\tlooper = looper +1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010, 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Add alias for each node on shadow dimension\r\nvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nlooper = 1;\r\nWhile (looper <=vTotalNodes);\r\n\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\r\n\tvTotalAttributes = DIMSIZ(cApprovalAttributeDim);\r\n\tvAttrLooper = vTotalAttributes;\r\n\r\n\tWhile (vAttrLooper >=1);\r\n\t\tvAttribute = DIMNM(cApprovalAttributeDim, vAttrLooper);\r\n\t\tvAttributeType = DType(cApprovalAttributeDim, vAttribute);\r\n\t\tIF (vAttributeType @= 'AA');\r\n\t\t\tvApprovalElemAlias = AttrS(pApprovalDim, vElem, vAttribute);\r\n\t\t\tvShadowElemAlias = AttrS(cShadowApprovalDim, vElem, vAttribute);\r\n\t\t\tIF (vApprovalElemAlias @<> vShadowElemAlias);\r\n\t\t\t\tAttrPutS(vApprovalElemAlias, cShadowApprovalDim, vElem, vAttribute);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\tvAttrLooper = vAttrLooper -1;\r\n\tEnd;\r\n\tlooper = looper +1;\r\nEnd;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pSubsetAlias",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIncrShadowDimUpdate",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_create_task_navigation_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncTaskNavigationDim = '}tp_task_navigation_dims}' | pAppId;\r\nIF (DimensionExists(cTaskNavigationDim)=0);\r\nDimensionCreate(cTaskNavigationDim);\r\nEndif;\r\n\r\ndimSeparater = '*';\r\nvPosDim = 0;\r\nvStringToScan = pNavigationDimensions;\r\nvPosDim = SCAN(dimSeparater, vStringToScan);\r\n\r\nWhile (vPosDim >0);\r\n\tvDimName = SUBST(vStringToScan, 1, vPosDim-1);\r\n\tDimensionElementInsert(cTaskNavigationDim, '', vDimName, 'N');\r\n\tvStringToScan = SUBST(vStringToScan, vPosDim +1, LONG(vStringToScan)-vPosDim);\r\n\tvPosDim = SCAN(dimSeparater, vStringToScan);\r\nEnd;\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncTaskNavigationCube = '}tp_task_navigations}' | pAppId;\r\ncTaskDimension = '}tp_tasks}' | pAppId;\r\ncTaskNavigationMeasureDim = '}tp_task_navigations';\r\nIF (cubeExists(cTaskNavigationCube) =0);\r\nCubeCreate(cTaskNavigationCube, cTaskDimension, cTaskNavigationDim, cTaskNavigationMeasureDim);\r\nEndif;\r\n\r\n#***\r\n#If there is one navigation dimension only and it is the same as the approval dimension, \r\n#then use the task dimension element to populate the navigation element\r\ncApprovalDIM = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncNavElemField = 'NavigationElement';\r\nIF (DIMSIZ(cTaskNavigationDim) =1 & DIMNM(cTaskNavigationDim, 1) @= cApprovalDim);\r\n\tvTotalTasks = DIMSIZ(cTaskDimension);\r\n\tlooper = 1;\r\n\tWhile (looper <= vTotalTasks);\r\n\t\tvNavigationElem = DIMNM(cTaskDimension, looper);\r\n\t\tCellPutS(vNavigationElem, cTaskNavigationCube, vNavigationElem, cApprovalDim, cNavElemField);\r\n\t\tlooper = looper +1;\r\n\tEnd;\r\n\r\nEndif;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNavigationDimensions",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_shadow_dim_add_direct_children",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\nvTotalChildren = ELCOMPN(pApprovalDim, pParent);\r\n\r\nlooper = 1;\r\n\r\nWhile (looper <=vTotalChildren);\r\nvChild = ELCOMP(pApprovalDim, pParent, looper);\r\n\r\nIF (DIMIX(cShadowApprovalDim, vChild) >0);\r\nvWeight = ELWEIGHT(pApprovalDim, pParent, vChild);\r\nDimensionElementComponentAdd(cShadowApprovalDim, pParent, vChild, vWeight);\r\nEndif;\r\n\r\nlooper = looper +1;\r\nend;",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nvTotalChildren = ELCOMPN(pApprovalDim, pParent);\r\n\r\nlooper = 1;\r\n\r\nWhile (looper <=vTotalChildren);\r\nvChild = ELCOMP(pApprovalDim, pParent, looper);\r\n\r\nIF (DIMIX(cShadowApprovalDim, vChild) >0);\r\nSubsetElementInsert(cShadowApprovalDim, pApprovalSubset, vChild, 0);\r\nvTotal = ELCOMPN(pApprovalDim, vChild);\r\nIF (vTotal >=1);\r\nvReturnValue = ExecuteProcess('}tp_deploy_shadow_dim_add_direct_children', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n'pApprovalDim', pApprovalDim, 'pApprovalSubset', pApprovalSubset, 'pParent', vChild);\r\n#textoutput('c:\\temp\\addchild.txt', pParent, vChild);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\n\r\nEndif;\r\n\r\nlooper = looper +1;\r\nend;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pParent",
        "Prompt": "",
        "Value": "ParentNode",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_sort_shadow_hierarchy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\n\r\nIf (DimensionExists(pApprovalDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pApprovalDim, pApprovalSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (DimensionExists(cShadowApprovalDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(cShadowApprovalDim, pApprovalSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncHierarchySize = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\n\r\nIf (cHierarchySize = SubsetGetSize(cShadowApprovalDim, pApprovalSubset));\r\n\r\n\tisSame = 'T';\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cHierarchySize);\r\n\t\tvElement = SubsetGetElementName(pApprovalDim, pApprovalSubset, vIndex);\r\n\t\tvShadowElement = SubsetGetElementName(cShadowApprovalDim, pApprovalSubset, vIndex);\r\n\t\tIf (vElement @<> vShadowElement);\r\n\t\t\tisSame = 'F';\r\n\t\t\tvIndex = cHierarchySize;\r\n\t\tENdIf;\r\n\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\n\tIf (isSame @= 'F');\r\n\t\tSubsetDeleteAllElements(cShadowApprovalDim, pApprovalSubset);\r\n\t\r\n\t\tvIndex = 1;\r\n\t\tWhile (vIndex <= cHierarchySize);\r\n\t\t\tvElement = SubsetGetElementName(pApprovalDim, pApprovalSubset, vIndex);\r\n\t\t\tIf (DIMIX(cShadowApprovalDim, vElement) <> 0);\r\n\t\t\t\tSubsetElementInsert(cShadowApprovalDim, pApprovalSubset, vElement, vIndex);\r\n\t\t\tElse;\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_deploy_update_cube_security_property",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#set default value to \"NONE\"\r\nvDefaultPropertyCube = '}CubeSecurityProperties';\r\ncTM1Process = GetProcessName();\r\nIF (CubeExists(vDefaultPropertyCube) = 0);\r\n\r\n\tExecuteProcess('}tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', vDefaultPropertyCube, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nElse;\r\n\tIf (pIsAddedCube @='Y');\r\n\t\tCellPutS('NONE', vDefaultPropertyCube, pCube, 'CELLSECURITYDEFAULTVALUE');\r\n\telse;\r\n\t\tCellPutS('', vDefaultPropertyCube, pCube, 'CELLSECURITYDEFAULTVALUE');\r\n\tEndif;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIsAddedCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_dyn_util_instant_action",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_dyn_util_instant_action\r\n#******\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = '}tp_Everyone';\r\nIf (DIMIX('}Groups', cCognosEveryoneGroup) <> 0);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__enter__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__own__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__release__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__save__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__offline__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__online__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__leave__central', cCognosEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__execute_action__central', cCognosEveryoneGroup);\r\nEndIf;\r\nIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__enter__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__own__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__release__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__save__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__offline__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__online__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__leave__central', cTpEveryoneGroup);\r\nCellPutS('READ', '}ProcessSecurity', '}tp_workflow__execute_action__central', cTpEveryoneGroup);\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_dyn_util_instant_action\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_error_add_guid",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** create a dimension to store process guid\r\nvGuidDim = cControlPrefix | 'tp_process_guids';\r\n\r\nIF ( DimensionExists ( vGuidDim ) = 0 );\r\n  ProcessError;\r\nENDIF;\r\n\r\nvAll = 'All';\r\n\r\nIF ( DIMIX ( vGuidDim, vAll ) = 0 );\r\n  ProcessError;\r\nENDIF;\r\n\r\nvToday = Today(1);\r\n\r\n#****add today's date as a consolidated element and add each guid as a child\r\n\r\nif (DIMIX (vGuidDim, vToday) =0);\r\n  DimensionElementComponentAdd ( vGuidDim, vAll, vToday, 1 );\r\nendif;\r\n\r\nif (DIMIX (vGuidDim, pGUID) =0);\r\n  DimensionElementComponentAdd(vGuidDim, vToday, pGuid, 1);\r\nendif;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_error_cleanup",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** get the number of days for expiration from the control cube (attribute)\r\nvConfigDim =cControlPrefix | 'tp_config';\r\nvDaysExpire = AttrN ( vConfigDim, 'TI Message Expiration (Days)', 'NumericValue' );\r\n\r\n#*** get today's date\r\nvToday = TODAY(1);\r\n#get the day number for today\r\nvTodayDay = DAYNO( vToday );\r\n\r\n#*** get all children from the 'All' consolidation in the tp_process_guids dimension\r\nvDim =cControlPrefix | 'tp_process_guids';\r\nvAll = 'All';\r\nvElem = '';\r\nvElem1 = '';\r\n\r\n#*** delete date elements that are expired and all their children elements\r\nvLooper = ELCOMPN ( vDim, vAll );\r\n\r\nWHILE ( vLooper > 0 );\r\n  vElem = ELCOMP ( vDim, vAll, vLooper );\r\n  vElemDay = DAYNO( vElem );\r\n  IF ( vTodayDay - vElemDay >= vDaysExpire );\r\n    vLooper1 = ELCOMPN ( vDim, vElem );\r\n    WHILE ( vLooper1 > 0 );\r\n      vElem1 = ELCOMP ( vDim, vElem, vLooper1 );\r\n      DimensionElementDelete ( vDim, vElem1 );\r\n      vLooper1 = vLooper1 - 1;\r\n    END;\r\n  DimensionElementDelete ( vDim, vElem );\r\n  ENDIF;\r\n  vLooper = vLooper - 1;\r\nEND;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_error_setup",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#***Create error cube and dimensions\r\nvCube=cControlPrefix | 'tp_process_errors';\r\nvGuidDim =cControlPrefix |  'tp_process_guids';\r\nvMeasureDim =cControlPrefix | 'tp_process_error_measures';\r\n\r\nif (CubeExists(vCube)=1);\r\nCubeDestroy(vCube);\r\nendif;\r\n\r\nif (DimensionExists(vGuidDim) = 1);\r\nDimensionDestroy(vGuidDim);\r\nendif;\r\n\r\nif (DimensionExists(vMeasureDim)=1);\r\nDimensionDestroy(vMeasureDim);\r\nendif;\r\n\r\nDimensionCreate(vGuidDim);\r\nDimensionCreate(vMeasureDim);\r\n\r\n#add meatures to error measure dimension\r\nDimensionElementInsert(vMeasureDim, '', 'UserName','S');\r\nDimensionElementInsert(vMeasureDim, '', 'SourceProcess','S');\r\nDimensionElementInsert(vMeasureDim, '', 'Status','S');\r\nDimensionElementInsert(vMeasureDim, '', 'StartTime','S');\r\nDimensionElementInsert(vMeasureDim, '', 'ClientStartTime','S');\r\nDimensionElementInsert(vMeasureDim, '', 'EndTime','S');\r\nDimensionElementInsert(vMeasureDim, '', 'PrologFile','S');\r\nDimensionElementInsert(vMeasureDim, '', 'MetadataFile','S');\r\nDimensionElementInsert(vMeasureDim, '', 'DataFile','S');\r\nDimensionElementInsert(vMeasureDim, '', 'EpilogFile','S');\r\nDimensionElementInsert(vMeasureDim, '', 'ErrorCode','S');\r\nDimensionElementInsert(vMeasureDim, '', 'ErrorDetails','S');\r\n\r\nDimensionElementInsert(vGuidDim, '', 'All', 'S');\r\nCubeCreate(vCube, vGuidDim, vMeasureDim);\r\nCubeSetLogChanges(vCube, 1);\r\n\r\n#***Update tp_config dimension\r\n\r\n#***Create tp_cofig dimension if it doesn't exist\r\nvConfigDim =cControlPrefix | 'tp_config';\r\nif (DimensionExists(vConfigDim)=0);\r\nDimensionCreate(vConfigDim);\r\nAttrInsert(vConfigDim, '', 'Numeric Value', 'N');\r\nAttrInsert(vConfigDim, '', 'String Value', 'S');\r\nendif;\r\n\r\n#***add attribute to set number of days that errors expire\r\nvElem = 'TI Message Expiration (Days)';\r\nif (DIMIX(vConfigDim, vElem) = 0);\r\nDimensionElementInsert(vConfigDim, '', vElem, 'S');\r\nendif;\r\n\r\n#***add attribute: whether we will generate log file or not\r\nvElem = 'Generate TI Log';\r\nif (DIMIX(vConfigDim, vElem) = 0);\r\nDimensionElementInsert(vConfigDim, '', vElem, 'S');\r\nendif;\r\n\r\n#***set log directory\r\nvElem = 'Log Directory';\r\nif (DIMIX(vConfigDim, vElem) = 0);\r\nDimensionElementInsert(vConfigDim, '', vElem, 'S');\r\nendif;\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n#***Set initial default value for \"errors expiration days\"\r\nvElem = 'TI Message Expiration (Days)';\r\nif (DIMIX(vConfigDim, vElem) = 1);\r\nAttrPutN(3, vConfigDim, vElem, 'NumericValue');\r\nendif;\r\n\r\n#***Set initial default value for \"Generate TI Log\"\r\nvElem = 'Generate TI Log';\r\nif (DIMIX(vConfigDim, vElem) = 1);\r\nAttrPutS('Y', vConfigDim, vElem, 'StringValue');\r\nendif;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_error_update_error_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#***\r\n\r\nvCube =cControlPrefix | 'tp_process_errors';\r\n\r\nIF ( CubeExists ( vCube ) = 0 );\r\n  ProcessError;\r\nENDIF;\r\n\r\n\r\n#*** add guid to the guid dimension\r\nExecuteProcess(cControlPrefix | 'tp_error_add_guid', 'pGUID', pGuid, 'pControl', pControl);\r\n\r\nCellPutS(TM1User, vCube, pGuid, 'UserName');\r\n\r\nIF (pProcess @<>'');\r\nCellPutS(pProcess, vCube, pGuid, 'SourceProcess');\r\nENDIF;\r\n\r\nIF ( pStartTime @<> '' );\r\n  CellPutS( pStartTime, vCube, pGuid, 'StartTime');\r\nENDIF;\r\n\r\nIF ( pEndTime @<> '' );\r\n  CellPutS( pEndTime, vCube, pGuid, 'EndTime');\r\nENDIF;\r\n\r\nvFileName= pProcess | '_' | pGuid | '_prolog.log';\r\nif (FileExists(vFileName)=1);\r\n  CellPutS( vFileName, vCube, pGuid, 'PrologFile');\r\nENDIF;\r\n\r\nvFileName= pProcess | '_' | pGuid | '_metadata.log';\r\nif (FileExists(vFileName)=1);\r\n  CellPutS( vFileName, vCube, pGuid, 'MetadataFile');\r\nENDIF;\r\n\r\nvFileName= pProcess | '_' | pGuid | '_data.log';\r\nif (FileExists(vFileName)=1);\r\n  CellPutS( vFileName, vCube, pGuid, 'DataFile');\r\nENDIF;\r\n\r\nvFileName= pProcess | '_' | pGuid | '_epilog.log';\r\nif (FileExists(vFileName)=1);\r\n  CellPutS( vFileName, vCube, pGuid, 'EpilogFile');\r\nENDIF;\r\n\r\nIF ( pErrorCode @<> '' );\r\n  CellPutS( pErrorCode, vCube, pGuid, 'ErrorCode');\r\nENDIF;\r\n\r\nIF ( pStatus @<> '' );\r\n  CellPutS( pStatus, vCube, pGuid, 'Status');\r\nENDIF;\r\n\r\nIF ( pClientStartTime @<> '' );\r\n  CellPutS( pClientStartTime, vCube, pGuid, 'ClientStartTime');\r\nENDIF;\r\n\r\n\r\nIF ( pErrorDetails @<> '' );\r\n  CellPutS( pErrorDetails, vCube, pGuid, 'ErrorDetails');\r\nENDIF;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pProcess",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pStartTime",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pEndTime",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorCode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pStatus",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pClientStartTime",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pErrorDetails",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_application_attributes",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** declare global variables\r\nStringGlobalVariable('gApprovalDim');\r\nStringGlobalVariable('gApprovalSubset');\r\nStringGlobalVariable('gIsActive');\r\nStringGlobalVariable('gStoreId');\r\nStringGlobalVariable('gSecuritySet');\r\nStringGlobalVariable('gVersionDimension');\r\nStringGlobalVariable('gApprovalSubsetComplementMdx');\r\n\r\n#* Check application\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Get Application attributes\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncApprovalSubsetAttr = 'ApprovalSubset';\r\ncApprovalShadowDimAttr = 'ApprovalShadowDimension';\r\ncIsActiveAttr = 'IsActive';\r\ncStoreIdAttr = 'StoreId';\r\ncSecuritySetAttr = 'SecuritySet';\r\ncVersionAttr = 'Version';\r\ncCubeViewsAttr = 'CubeViews';\r\ncMaintenanceAttr = 'IsRunningMaintenance';\r\ncVersionSlicesWrite = 'VersionSlicesWrite';\r\ncVersionSlicesRead = 'VersionSlicesRead';\r\ncVersionDimension = 'VersionDimension';\r\ncApplicationType = 'ApplicationType';\r\n\r\ngIsActive = ATTRS(cApplicationsDim, pAppId, cIsActiveAttr);\r\ngStoreId = ATTRS(cApplicationsDim, pAppId, cStoreIdAttr);\r\ngSecuritySet = ATTRS(cApplicationsDim, pAppId, cSecuritySetAttr);\r\ngApprovalDim = ATTRS(cApplicationsDim, pAppId, cApprovalDimensionAttr);\r\ngApprovalSubset = ATTRS(cApplicationsDim, pAppId, cApprovalSubsetAttr);\r\ngVersionDimension = ATTRS(cApplicationsDim, pAppId, cVersionDimension);\r\n\r\n#* Check approval dimension\r\nIf (gApprovalDim @= '');\r\n\t\tgApprovalSubset = '';\r\n\t\tgApprovalSubsetComplementMdx = '';\r\nElse;\r\n\r\n\tIf (gApprovalSubset @= '');\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DimensionExists(gApprovalDim) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#* Check approval subset\r\n\t\r\n\tIf (SubsetExists(gApprovalDim, gApprovalSubset) <> 0);\r\n\r\n\t\tcApprovalSubsetSize = SubsetGetSize(gApprovalDim, gApprovalSubset);\r\n\r\n\t\t#* Subset Complement\r\n\t\tgApprovalSubsetComplementMdx = '';\r\n\t\tIf (DIMSIZ(gApprovalDim) > cApprovalSubsetSize);\r\n\t\t\tIf (cApprovalSubsetSize = 0);\r\n\t\t\t\tProcessError;\r\n\t\t\tElseIf (cApprovalSubsetSize = 1);\r\n\t\t\t\tvNode = SubsetGetElementName(gApprovalDim, gApprovalSubset, 1);\r\n\t\t\t\tvMDX = 'EXCEPT([' | gApprovalDim | '].MEMBERS, {[' | gApprovalDim | '].[' | vNode | ']})';\r\n\t\t\t\tgApprovalSubsetComplementMdx = vMDX;\r\n\t\t\tElse;\r\n\t\t\t\tIf (CubeExists(gApprovalDim) = 0);\r\n\t\t\t\t\tvMDX = 'EXCEPT([' | gApprovalDim | '].MEMBERS, TM1SubsetToSet([' | gApprovalDim | '], \"' | gApprovalSubset | '\"))';\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvMDX = 'EXCEPT([' | gApprovalDim | '].MEMBERS, TM1SubsetToSet([' | gApprovalDim | '].[' | gApprovalDim | '], \"' | gApprovalSubset | '\"))';\r\n\t\t\t\tEndIf;\r\n\t\t\t\tgApprovalSubsetComplementMdx = vMDX;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tElse;\r\n\t\tgApprovalSubset = '';\r\n\t\tgApprovalSubsetComplementMdx = '';\r\n\tEndIf;\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_log_file_names",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nvLogPrefix = pProcess;\r\nIf (SUBST(vLogPrefix, 1, 1) @= '}');\r\n\tvLogPrefix = SUBST(vLogPrefix, 2, (LONG(vLogPrefix) - 1));\r\nEndIf;\r\n\r\n#*** Check tp_config dimension\r\ncConfigDim = cControlPrefix | 'tp_config';\r\n\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\r\n\tcLogDirectory = ATTRS(cConfigDim, 'Log Directory', 'String Value');\r\n\tIf (cLogDirectory @<> '' & SUBST(cLogDirectory, (LONG(cLogDirectory) - 1), 1) @<> '\\');\r\n\t\tcLogDirectory = cLogDirectory | '\\';\r\n\tEndIf;\r\n\t\r\n\tgPrologLog = cLogDirectory | vLogPrefix | '_' | pExecutionId | '_prolog.log';\r\n\tgEpilogLog = cLogDirectory | vLogPrefix | '_' | pExecutionId | '_epilog.log';\r\n\tgDataLog = cLogDirectory | vLogPrefix | '_' | pExecutionId | '_data.log';\r\n\tgMetadataLog = cLogDirectory | vLogPrefix | '_' | pExecutionId | '_metadata.log';\r\n\r\nElse;\r\n\r\n\tgPrologLog = vLogPrefix | '_' | pExecutionId | '_prolog.log';\r\n\tgEpilogLog = vLogPrefix | '_' | pExecutionId | '_epilog.log';\r\n\tgDataLog = vLogPrefix | '_' | pExecutionId | '_data.log';\r\n\tgMetadataLog = vLogPrefix | '_' | pExecutionId | '_metadata.log';\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pProcess",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_parent_in_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', pDim, pSubset, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nStringGlobalVariable('gParentInSubset');\r\ngParentInSubset = '';\r\n\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX(pDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nStringGlobalVariable('gIsInSubset');\r\ncParentCount = ELPARN(pDim, pNode);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Number of parents: ' | NumberToString(cParentCount));\r\nEndIf;\r\n\r\nIf (cParentCount > 0);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cParentCount);\r\nvParent = ELPAR(pDim, pNode, vIndex);\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_is_in_subset', 'pExecutionId', pExecutionId,\r\n'pDim', pDim, 'pSubset', pSubset, 'pNode', vParent);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n\r\nIf (gIsInSubset @= 'Y');\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Find parent in subset', vParent, NumberToString(vIndex));\r\nEndIf;\r\n\r\ngParentInSubset = vParent;\r\nvIndex = cParentCount;\r\nEndIf;\r\n\r\nvIndex = vIndex + 1;\r\nEnd;\r\n\r\nEndIf;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_top_node",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', pDim, pSubset, pControl);\r\nEndIf;\r\n\r\nStringGlobalVariable('gTopNode');\r\nNumericGlobalVariable('gTopLevel');\r\n\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\ncSubsetSize = SubsetGetSize(pDim, pSubset);\r\ngTopNode = '';\r\ngTopLevel = -1;\r\n\r\n#IF(1)\r\nIf (cSubsetSize = 0);\r\n\r\ngTopNode = '';\r\ngTopLevel = -1;\r\n\r\n#IF(1)\r\nElseIf (cSubsetSize = 1);\r\n\r\ngTopNode = SubsetGetElementName(pDim, pSubset, 1);\r\ngTopLevel = 0;\r\n\r\n#IF(1)\r\nElse;\r\n\r\nvNode = SubsetGetElementName(pDim, pSubset, 1);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cSubsetSize);\r\n\r\nStringGlobalVariable('gParentInSubset');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n'pDim', pDim, 'pSubset', pSubset, 'pNode', vNode);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n\r\nIf (gParentInSubset @= '');\r\nvIndex = cSubsetSize;\r\nElse;\r\nvNode = gParentInSubset;\r\nEndIf;\r\n\r\nvIndex = vIndex + 1;\r\nEnd;\r\n\r\ngTopNode = vNode;\r\ngTopLevel = ELLEV(pDim, gTopNode);\r\n\r\n#IF(1)\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Top node and level', gTopNode, NumberToString(gTopLevel));\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_user_permissions",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***log start\r\ncurrentTime=NOW;\r\ncurrentDate =TIMST(currentTime,'\\Y \\M \\d - \\h:\\i:\\s');\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Process: ', cTM1Process, ' started at ', currentDate);\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Parameters:', pGuid, pApplication, pNode, pUser, pControl);\r\nEndIf;\r\n\r\n## Check if a login user has permissions on Edit, Submit, Reject, View or Annotate\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gSubmit');\r\nStringGlobalVariable('gReject');\r\nStringGlobalVariable('gView');\r\nStringGlobalVariable('gAnnotate');\r\n\r\ngEdit = 'F';\r\ngSubmit = 'F';\r\ngReject = 'F';\r\ngView = 'F';\r\ngAnnotate = 'F';\r\n\r\nvApplicationDim = cControlPrefix | 'tp_applications';\r\nvApplication = DimensionElementPrincipalName(vApplicationDim, pApplication);\r\nvApprovalDim = AttrS(vApplicationDim, vApplication, 'ApprovalDimension');\r\nvNode = '';\r\nIF (DIMIX(vApprovalDim, pNode) >0);\r\nvNode = DimensionElementPrincipalName( vApprovalDim, pNode );\r\nENDIF;\r\n\r\nvPermissionCube = cControlPrefix | 'tp_application_permission}' | pApplication;\r\n\r\n#***Check permission cube\r\nIF (CubeExists(vPermissionCube) =0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', 'pGuid', pGuid, 'pProcess', cTM1Process,'pStartTime', '', 'pEndTime', currentDate,'pErrorCode', 'TI_CUBE_\r\nNOT_EXIST', 'pStatus', 'ERROR', 'pClientStartTime', '', 'pErrorDetails', vPermissionCube, 'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, vPermissionCube | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nENDIF;\r\n\r\nvCube = '}CellSecurity_' | vPermissionCube;\r\n#***Check cell level security cube for permission cube\r\nIF (CubeExists(vCube) =0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', 'pGuid', pGuid, 'pProcess', cTM1Process,'pStartTime', '', 'pEndTime', currentDate,'pErrorCode', 'TI_CUBE_\r\nNOT_EXIST', 'pStatus', 'ERROR', 'pClientStartTime', '', 'pErrorDetails', vCube, 'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, vCube | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nENDIF;\r\n\r\nvUser = pUser;\r\nvPermissionDim = cControlPrefix | 'tp_permissions';\r\nvGroupDim = '}Groups';\r\n\r\nvSubset='user_group_' | pGuid;\r\nif (subsetExists('}Groups', vSubset)<>0);\r\nsubsetdestroy('}Groups', vSubset);\r\nendif;\r\n\r\n#If a mdx return zero item, SubsetsetCreateByMdx will throw an error\r\n#workaround, add SecurityAdmin as a dummy member\r\nvMDX = '{ FILTER ( [}Groups].Members, [}ClientGroups].( [}Clients].[' | vUser | '] ) <> \"\" ), [}Groups].[SecurityAdmin]} ';\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'MDX', vMDX);\r\nEndIf;\r\n\r\nsubsetCreateByMdx(vSubset, vMDX);\r\nSubsetElementInsert('}Groups', vSubset, 'SecurityAdmin', 0);\r\n\r\nlooper =1;\r\nvSubsetSize = SubsetGetSize('}Groups', vSubset);\r\nwhile (looper <= vSubsetSize);\r\nvGroup = SubsetGetElementName ('}Groups', vSubset, looper);\r\nIF (UPPER(vGroup) @= 'ADMIN' % UPPER(vGroup) @= 'DATAADMIN');\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'User has ADMIN or DATAADMIN rights');\r\nEndIf;\r\n\r\ngEdit = 'T';\r\ngSubmit = 'T';\r\ngReject = 'T';\r\ngView = 'T';\r\ngAnnotate = 'T';\r\n\r\nELSE;\r\n\r\nIF (vNode @<> '');\r\n\r\n#VIEW permission\r\nvSecurity = CellGetS(vCube, vNode, 'VIEW', vGroup);\r\nIF (UPPER(vSecurity) @= 'READ');\r\ngView = 'T';\r\nENDIF;\r\n\r\n#EDIT permission\r\nvSecurity = CellGetS(vCube, vNode, 'EDIT', vGroup);\r\nIF (UPPER(vSecurity) @= 'READ');\r\ngEdit = 'T';\r\nENDIF;\r\n\r\n#SUBMIT permission\r\nvSecurity = CellGetS(vCube, vNode, 'SUBMIT', vGroup);\r\nIF (UPPER(vSecurity) @= 'READ');\r\ngSubmit = 'T';\r\nENDIF;\r\n\r\n#REJECT permission\r\nvSecurity = CellGetS(vCube, vNode, 'REJECT', vGroup);\r\nIF (UPPER(vSecurity) @= 'READ');\r\ngReject = 'T';\r\nENDIF;\r\n\r\n#ANNOTATE permission\r\nvSecurity = CellGetS(vCube, vNode, 'ANNOTATE', vGroup);\r\nIF (UPPER(vSecurity) @= 'READ');\r\ngAnnotate = 'T';\r\nENDIF;\r\n\r\nENDIF;\r\n\r\nENDIF;\r\n\r\nlooper = looper+1;\r\nend;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, gView, gAnnotate, gEdit, gReject, gSubmit);\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIF (SubsetExists('}Groups', vSubset) =1);\r\nSubsetDestroy('}Groups', vSubset);\r\nENDIF;\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApplication",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_get_user_root_permissions",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2014\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n### This utility process is used by central applications. \r\n### Approval applications can also use it to get the OFFLINE permission.\r\n\r\n## Check if the user has permissions on EDIT, OWN, OFFLINE.\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\ngEdit = 'F';\r\ngOwn = 'F';\r\ngOffline = 'F';\r\n\r\ncApplicationDim = '}tp_applications';\r\nIf (DIMIX(cApplicationDim, pAppId) = 0);\r\n    ProcessError;\r\nEndIf;\r\n\r\ncApplicationElementSecurityCube = '}ElementSecurity_' | cApplicationDim;\r\nIf (CubeExists(cApplicationElementSecurityCube) = 0);\r\n    ProcessError;\r\nEndIf;\r\n\r\ncRootPermissionsCube = '}tp_application_root_permissions';\r\ncRootPermissionsCellSecurityCube = '}CellSecurity_' | cRootPermissionsCube;\r\nIf (CubeExists(cRootPermissionsCellSecurityCube) = 0);\r\n    ProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX('}Clients', pUser) > 0);\r\n\tpUser = DimensionElementPrincipalName('}Clients', pUser);\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n\r\nvSubset='user_group_' | pGuid;\r\nIf (subsetExists('}Groups', vSubset)<>0);\r\n\tSubsetDestroy('}Groups', vSubset);\r\nEndIf;\r\n\r\n# If a mdx return zero item, SubsetsetCreateByMdx will throw an error\r\n# workaround, add SecurityAdmin as a dummy member\r\nvMDX = '{FILTER ([}Groups].Members, [}ClientGroups].( [}Clients].[' | pUser | ']) <> \"\" ), [}Groups].[SecurityAdmin]}';\r\nsubsetCreateByMdx(vSubset, vMDX);\r\nSubsetElementInsert('}Groups', vSubset, 'SecurityAdmin', 0);\r\n\r\nlooper = 1;\r\nvSubsetSize = SubsetGetSize('}Groups', vSubset);\r\nWhile (looper <= vSubsetSize);\r\n\tvGroup = SubsetGetElementName ('}Groups', vSubset, looper);\r\n\tIf (UPPER(vGroup) @= 'ADMIN' % UPPER(vGroup) @= 'DATAADMIN');\r\n\t\tgEdit = 'T';\r\n\t\tgOwn = 'T';\r\n\t\tgOffline = 'T';\r\n\tElse;\r\n\t\t#EDIT permission\r\n\t\tvSecurity = CellGetS(cApplicationElementSecurityCube, pAppId, vGroup);\r\n\t\tIf (vSecurity @= 'READ');\r\n\t\t\tgEdit = 'T';\r\n\t\tEndIf;\r\n\r\n\t\t#OWN permission\r\n\t\tvSecurity = CellGetS(cRootPermissionsCellSecurityCube, pAppId, 'OWN', vGroup);\r\n\t\tIf (vSecurity @= 'READ');\r\n\t\t\tgOwn = 'T';\r\n\t\tEndIf;\r\n\t\t\r\n\t\t#OFFLINE permission\r\n\t\tvSecurity = CellGetS(cRootPermissionsCellSecurityCube, pAppId, 'OFFLINE', vGroup);\r\n\t\tIf (vSecurity @= 'READ');\r\n\t\t\tgOffline = 'T';\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tlooper = looper + 1;\r\nEnd;\r\n\r\nIf (SubsetExists('}Groups', vSubset) = 1);\r\n\tSubsetDestroy('}Groups', vSubset);\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_incr_create_update_artifacts",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\nvDimRights = cControlPrefix | 'tp_rights';\r\nvDimRightsMeasures = cControlPrefix | 'tp_security_measures';\r\nvDimRightsUpdateMeasures = cControlPrefix | 'tp_security_update_measures';\r\nvGroups = '}Groups';\r\nvCube = cControlPrefix | 'tp_application_security}' | pAppId;\r\nvCubeUpdates = cControlPrefix | 'tp_application_security_update}' | pAppId;\r\n\r\nif (CubeExists(vCube) = 1);\r\n\tCubeDestroy(vCube);\r\nendif;\r\n\r\nif (CubeExists(vCubeUpdates) = 1);\r\n\tCubeDestroy(vCubeUpdates);\r\nendif;\r\n\r\nif (DimensionExists(vDimRights) = 1);\r\n\tDimensionDestroy(vDimRights);\r\nendif;\r\nDimensionCreate(vDimRights);\r\n\r\nDimensionElementInsert(vDimRights, '','VIEW', 'S');\r\nDimensionElementInsert(vDimRights, '','EDIT', 'S');\r\nDimensionElementInsert(vDimRights, '','REVIEW', 'S');\r\nDimensionElementInsert(vDimRights, '','SUBMIT', 'S');\r\n\r\nif (DimensionExists(vDimRightsMeasures) = 1);\r\n\tDimensionDestroy(vDimRightsMeasures);\r\nendif;\r\nDimensionCreate(vDimRightsMeasures);\r\n\r\nDimensionElementInsert(vDimRightsMeasures, '','Rights', 'S');\r\nDimensionElementInsert(vDimRightsMeasures, '','ViewDepth', 'S');\r\nDimensionElementInsert(vDimRightsMeasures, '','ReviewDepth', 'S');\r\n\r\nif (DimensionExists(vDimRightsUpdateMeasures) = 1);\r\n\tDimensionDestroy(vDimRightsUpdateMeasures);\r\nendif;\r\nDimensionCreate(vDimRightsUpdateMeasures);\r\nDimensionElementInsert(vDimRightsUpdateMeasures, '','Incremental', 'S');\r\nDimensionElementInsert(vDimRightsUpdateMeasures, '','Processed', 'S');\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nCubeCreate(vCube, pApprovalDim, vGroups, vDimRights, vDimRightsMeasures);\r\nCubeSetLogChanges(vCube, 1);\r\n\r\nCubeCreate(vCubeUpdates, pApprovalDim, vGroups, vDimRightsUpdateMeasures);\r\nCubeSetLogChanges(vCubeUpdates, 1);\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_incr_deploy_application_security",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_incr_deploy_application_security';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pAppId, pApprovalDim, pApprovalSubset, pReviewerEditOn, pSourceFile, pFullDeploy, pControl);\r\nEndIf;\r\n\r\n#***\r\nvDimRights = cControlPrefix | 'tp_rights';\r\nvDimRightsMeasures = cControlPrefix | 'tp_security_measures';\r\nvDimRightsUpdateMeasure = cControlPrefix | 'tp_security_update_measures';\r\nvRightsCube = cControlPrefix | 'tp_application_security}' | pAppId;\r\nvCubeUpdates = cControlPrefix | 'tp_application_security_update}' | pAppId;\r\n\r\nIf (pFullDeploy @= 'Y' & CubeExists(vRightsCube) = 1);\r\nCubeDestroy(vRightsCube);\r\nEndIf;\r\n\r\nIf (CubeExists(vCubeUpdates) = 1);\r\nCubeDestroy(vCubeUpdates);\r\nEndIf;\r\n\r\nIf (CubeExists(vRightsCube) = 0);\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_incr_create_update_artifacts', \r\n'pExecutionId', pExecutionId, \r\n'pAppId', pAppId, \r\n'pApprovalDim', pApprovalDim,\r\n'pApprovalSubset', pApprovalSubset,\r\n'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n\r\nEndIf;\r\n\r\nIf (pFullDeploy @<> 'Y' & CubeExists(vCubeUpdates) = 0);\r\n\tCubeCreate(vCubeUpdates, pApprovalDim, '}Groups', vDimRightsUpdateMeasure);\r\n\tCubeSetLogChanges(vCubeUpdates, 1);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIHeaderRecords = 1;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\n#*** Set input file encoding as UTF-8\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncTM1Log = cDataLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), vNode, vGroup, vRight, vViewDepth, vReviewDepth, vAction);\r\nEndIf;\r\n#IF (1)\r\nIf (DIMIX(pApprovalDim, vNode) >0 & DIMIX('}Groups', vGroup) >0);\r\n\r\nvNodePName = DimensionElementPrincipalName(pApprovalDim, vNode);\r\nvGroupPName = DimensionElementPrincipalName('}Groups', vGroup);\r\n\r\n#IF (2)\r\nIf (vAction @= 'D');\r\nCellPutS('', vRightsCube, vNodePName,vGroupPName, vRight, 'Rights');\r\nCellPutS('', vRightsCube,vNodePName,vGroupPName, vRight, 'ViewDepth');\r\nCellPutS('', vRightsCube, vNodePName, vGroupPName, vRight, 'ReviewDepth');\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Delete action: ' | vAction);\r\nEndIf;\r\n#IF (2)\r\nElse;\r\n\r\nIf (vRight @<> '');\r\nCellPutS(vRight, vRightsCube, vNodePName, vGroupPName, vRight, 'Rights');\r\nCellPutS(vViewDepth, vRightsCube, vNodePName, vGroupPName, vRight, 'ViewDepth');\r\nCellPutS(vReviewDepth, vRightsCube, vNodePName,vGroupPName, vRight, 'ReviewDepth');\r\nElse;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Right is empty, so do not add to rights cube', vNodePName, vGroupPName);\r\nEndIf;\r\n\r\nEndIf;\r\n\r\n#IF (2)\r\nEndIf;\r\n\r\n#IF (3)\r\nIF (pFullDeploy @<> 'Y');\r\nvChildrenSubset = 'tp_temp_children_' | pExecutionId | vAction;\r\nvMdxAllDescendants = 'Descendants([' | pApprovalDim | '].[' | vNodePName | '])';\r\nIF (SubsetExists(pApprovalDim, vChildrenSubset) =1);\r\nSubsetDestroy(pApprovalDim, vChildrenSubset);\r\nENDIF;\r\nSubsetCreateByMDX(vChildrenSubset, vMdxAllDescendants);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pExecutionId,\r\n'pDim', pApprovalDim, 'pSubset', vChildrenSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvChildrenSubsetSize = SubsetGetSize(pApprovalDim, vChildrenSubset);\r\nvIndex = 1;\r\nWhile (vIndex <= vChildrenSubsetSize);\r\nvChild = SubsetGetElementName(pApprovalDim, vChildrenSubset, vIndex);\r\nvChildPName = DimensionElementPrincipalName(pApprovalDim, vChild);\r\nvCellValue = CellGetS(vCubeUpdates, vChildPName, vGroupPName, 'Incremental');\r\nIF (vCellValue @= '');\r\nCellPutS('Y', vCubeUpdates, vChildPName, vGroupPName, 'Incremental');\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), vChildPName, vGroupPName);\r\nEndIf;\r\nENDIF;\r\n\r\nvIndex = vIndex +1;\r\nEND;\r\n\r\nSubsetDestroy(pApprovalDim, vChildrenSubset);\r\nENDIF;\r\n#IF (3)\r\n#IF (1)\r\nEndIf;",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#Create a view in update cube with items that are not in approval subset\r\n#then zero out the view\r\n\r\n#IF (1)\r\nIF (pFullDeploy @<>'Y');\r\nvDimSize = DIMSIZ(pApprovalDim);\r\nvSubsetSize = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nvZeroOutMdx = '';\r\nIF (vDimSize > vSubsetSize);\r\n\r\nIf (CubeExists(pApprovalDim) = 0);\r\nvZeroOutMdx= 'EXCEPT([' | pApprovalDim | '].MEMBERS, TM1SubsetToSet([' | pApprovalDim | '], \"' | pApprovalSubset | '\"))';\r\nElse;\r\nvZeroOutMdx = 'EXCEPT([' | pApprovalDim | '].MEMBERS, TM1SubsetToSet([' | pApprovalDim | '].[' | pApprovalDim | '], \"' | pApprovalSubset | '\"))';\r\nEndIf;\r\n\r\nENDIF;\r\n\r\nvTempView ='tp_temp_zeroout_nonapproval_' | pExecutionId;\r\nvTempSubset = vTempView;\r\nIF (SubsetExists(pApprovalDim, vTempSubset) = 1);\r\nSubsetDestroy(pApprovalDim, vTempSubset);\r\nENDIF;\r\n\r\nIF (ViewExists(vCubeUpdates, vTempView) =1);\r\nViewDestroy(vCubeUpdates, vTempView);\r\nENDIF;\r\n\r\nIF (vZeroOutMdx @<> '');\r\nViewCreate(vCubeUpdates, vTempView);\r\nViewRowDimensionSet(vCubeUpdates, vTempView, pApprovalDim, 1);\r\nViewRowDimensionSet(vCubeUpdates, vTempView, '}Groups', 2);\r\nViewRowDimensionSet(vCubeUpdates, vTempView, 'tp_rights_update_measures', 3);\r\nSubsetCreatebyMDX(vTempSubset, vZeroOutMdx);\r\nViewSubsetAssign(vCubeUpdates, vTempView, pApprovalDim, vTempView);\r\nViewZeroOut(vCubeUpdates, vTempView);\r\nViewDestroy(vCubeUpdates, vTempView);\r\nSubsetDestroy(pApprovalDim, vTempSubset);\r\nENDIF;\r\n\r\n\r\n#Create a view in update cube with\r\n#all elements in approval dimension\r\n#all groups in }Groups dimension\r\n#suppress zero is turned on\r\n#This view will be used row by row later to udpate cell level security cube\r\nvViewUpdate = 'tp_temp_records_for_processing_' | pExecutionId;\r\nViewCreate(vCubeUpdates, vViewUpdate);\r\nViewRowDimensionSet(vCubeUpdates, vViewUpdate, pApprovalDim, 1);\r\nViewRowDimensionSet(vCubeUpdates, vViewUpdate, '}Groups', 2);\r\nViewColumnDimensionSet(vCubeUpdates, vViewUpdate, 'tp_rights_update_measures', 3);\r\nViewSuppressZeroesSet(vCubeUpdates, vViewUpdate, 1);\r\n\r\nExecuteProcess(cControlPrefix | 'tp_incr_update_permission_cell_security', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pApprovalDim', pApprovalDim, 'pApprovalSubset', p\r\nApprovalSubset, 'pInputView', vViewUpdate, 'pReviewerEditOn', pReviewerEditOn, 'pControl', pControl);\r\n\r\n#IF (1)\r\nENDIF;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "plan_business_unit",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "All Business Units",
        "TYpe": "String"
      },
      {
        "Name": "pReviewerEditOn",
        "Prompt": "",
        "Value": "F",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "dummy.txt",
        "TYpe": "String"
      },
      {
        "Name": "pFullDeploy",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "vNode",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vGroup",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vRight",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vViewDepth",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vReviewDepth",
        "Type": "String",
        "Position": "5",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vAction",
        "Type": "String",
        "Position": "6",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_incr_update_permission_cell_security",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_incr_update_permission_cell_security';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pAppId, pApprovalDim, pApprovalSubset, pInputView, pReviewerEditOn, pControl);\r\nEndIf;\r\n\r\n#*** \r\nvCube = cControlPrefix | 'tp_application_security_update}' | pAppId;\r\n\r\n#*** Set local variables\r\nDataSourceType='VIEW';\r\nDatasourceNameForServer=vCube ;\r\nDatasourceCubeview=pInputView;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncTM1Log = cDataLog;\r\n\r\nIf (vNode @<>'' & vGroup @<>'' & vValue @='Y');\r\n\r\nExecuteProcess(cControlPrefix | 'tp_incr_update_single_node_and_group', \r\n'pExecutionId', pExecutionId, 'pAppId', pAppId,\r\n'pApprovalDim', pApprovalDim, 'pApprovalSubset', pApprovalSubset, \r\n'pUpdateNode', vNode, 'pUpdateGroup', vGroup, \r\n'pReviewerEditOn',pReviewerEditOn, 'pControl', pControl);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), vNode, vGroup, vValue);\r\nEndIf;\r\n\r\nEndIf;\r\n",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (ViewExists(vCube, pInputView)=1);\r\nViewDestroy(vCube, pInputView);\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pInputView",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pReviewerEditOn",
        "Prompt": "",
        "Value": "F",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "vNode",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vGroup",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vIncremental",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vValue",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_incr_update_single_node_and_group",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pAppId, pApprovalDim, pApprovalSubset, pUpdateNode, pUpdateGroup, pReviewerEditOn, pControl);\r\nEndIf;\r\n\r\n#***\r\ncCubeSecurityCube = '}CubeSecurity';\r\ncDimensionSecurityCube = '}DimensionSecurity';\r\ncElementAttributesPrefix = '}ElementAttributes_';\r\ncNone = 'NONE';\r\ncRead = 'READ';\r\ncWrite = 'WRITE';\r\ncLock = 'WRITE';\r\nvLeafElementSecurity = cREAD;\r\n\r\n#***\r\nvUpdateNodePName = DimensionElementPrincipalName(pApprovalDim, pUpdateNode);\r\nvUpdateGroupPName = DimensionElementPrincipalName('}Groups', pUpdateGroup);\r\nvRightsCube = cControlPrefix | 'tp_application_security}' | pAppId;\r\nvCellSecurityCube = '}CellSecurity_' | cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\r\nvIsLeafNode = 'T';\r\nIf (DTYPE(pApprovalDim, vUpdateNodePName) @= 'C');\r\nvIsLeafNode = 'F';\r\nElse;\r\nvIsLeafNode = 'T';\r\nEndIf;\r\n\r\nvSetElementSecurity = 'F';\r\nElementSecurityPut('NONE', pApprovalDim, vUpdateNodePName, vUpdateGroupPName);\r\nCellPutS('NONE', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\nCellPutS('NONE', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\nCellPutS('NONE', vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\nCellPutS('NONE', vCellSecurityCube, vUpdateNodePName, 'SUBMIT', vUpdateGroupPName);\r\nCellPutS('NONE', vCellSecurityCube, vUpdateNodePName, 'REJECT', vUpdateGroupPName);\r\n\r\n#*** assign rights to self\r\nvSelfRightView = CELLGETS(vRightsCube, vUpdateNodePName, vUpdateGroupPName, 'VIEW', 'Rights');\r\nvSelfRightEdit = CELLGETS(vRightsCube, vUpdateNodePName, vUpdateGroupPName, 'EDIT', 'Rights');\r\nvSelfRightSubmit = CELLGETS(vRightsCube, vUpdateNodePName, vUpdateGroupPName, 'SUBMIT', 'Rights');\r\nvSelfRightReview = CELLGETS(vRightsCube, vUpdateNodePName, vUpdateGroupPName, 'REVIEW', 'Rights');\r\n\r\n#IF (1)\r\nIF (vSelfRightView @= 'VIEW');\r\n\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\tvLeafElementSecurity = cREAD;\r\n\tvSetElementSecurity = 'T';\r\n#IF (1)\r\nENDIF;\r\n\r\n#IF (2)\r\nIF (vSelfRightEdit @='EDIT');\r\n\r\n\t#IF (2.1)\r\n\tIF (vIsLeafNode @= 'T');\r\n\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\t\tvLeafElementSecurity = cWrite;\r\n\t\tvSetElementSecurity = 'T';\r\n\r\n\t#IF (2.1)\r\n\tENDIF;\r\n\r\n#IF (2)\r\nENDIF;\r\n\r\n#IF (3)\r\nIF (vSelfRightSubmit @='SUBMIT');\r\n\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'SUBMIT', vUpdateGroupPName);\r\n\r\n\tIF (vIsLeafNode @= 'T');\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\n\tENDIF;\r\n\r\n\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\tvLeafElementSecurity = cLock;\r\n\tvSetElementSecurity = 'T';\r\n\r\n#IF (3)\r\nENDIF;\r\n\r\n#IF (4)\r\nIF (vSelfRightReview @='REVIEW');\r\n\r\n\tIF (vIsLeafNode @= 'F');\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\t\tvSetElementSecurity = 'T';\r\n\tENDIF;\r\n\r\n#IF (4)\r\nENDIF;\r\n\r\n#*** Pass rights down from ancestors\r\n\r\n#First get all ancestors in the approval subset\r\nvMdx = 'HIERARCHIZE({intersect ([' | pApprovalDim | '].[' | vUpdateNodePName | '].AncestorsAll, [' ;\r\nvMdx = vMDx | pApprovalDim | '].[' | pApprovalSubset | '])})';\r\n\r\nvSubsetAncestors = 'get_ancestors_' | pExecutionId;\r\nIf (SubsetExists(pApprovalDim, vSubsetAncestors) <>0);\r\n\tSubsetDestroy(pApprovalDim, vSubsetAncestors);\r\nEndIf;\r\nSubsetCreateByMdx(vSubsetAncestors, vMdx, pApprovalDim);\r\nSubsetElementInsert(pApprovalDim, vSubsetAncestors , vUpdateNodePName, 0);\r\n\r\nvSize = SubsetGetSize(pApprovalDim, vSubsetAncestors);\r\n\r\nvLooper =vSize;\r\nvLevel = 0;\r\nWHILE (vLooper > 0);\r\n\tvParent = SubsetGetElementName(pApprovalDim, vSubsetAncestors, vLooper);\r\n\tIf (vParent @<>vUpdateNodePName );\r\n\t\tvLevel = vLevel +1;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Passing down rights to' |  vUpdateNodePName, \r\n\t\t\t\t'Ancestor: ' | NumberToString(vLevel), ' ' | vParent);\r\n\t\tEndIf;\r\n\t\tvParentRightView = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'VIEW', 'Rights');\r\n\t\tvParentRightSubmit =  CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'SUBMIT', 'Rights');\r\n\t\tvParentRightReview =  CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'REVIEW', 'Rights');\r\n\r\n\t\tvParentViewDepth = 0;\r\n\t\tvTempValue = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'VIEW', 'ViewDepth');\r\n\t\tIf (vTempValue @<> '');\r\n\t\t\tvParentViewDepth = StringToNumber(vTempValue);\r\n\t\tEndIf;\r\n\t\tvTempValue = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'SUBMIT', 'ViewDepth');\r\n\t\tIf (vTempValue @<> '' & StringToNumber(vTempValue) > vParentViewDepth);\r\n\t\t\tvParentViewDepth = StringToNumber(vTempValue);\r\n\t\tEndIf;\r\n\t\tvTempValue = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'REVIEW', 'ViewDepth');\r\n\t\tIf (vTempValue @<> '' & StringToNumber(vTempValue) > vParentViewDepth);\r\n\t\t\tvParentViewDepth = StringToNumber(vTempValue);\r\n\t\tEndIf;\r\n\r\n\t\tvParentReviewDepth = 0;\r\n\t\tvTempValue = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'REVIEW', 'ReviewDepth');\r\n\t\tIf (vTempValue @<> '');\r\n\t\t\tvParentReviewDepth = StringToNumber(vTempValue);\r\n\t\tEndIf;\r\n\t\tvTempValue = CELLGETS(vRightsCube, vParent, vUpdateGroupPName, 'SUBMIT', 'ReviewDepth');\r\n\t\tIf (vTempValue @<> '' & StringToNumber(vTempValue) > vParentReviewDepth);\r\n\t\t\tvParentReviewDepth = StringToNumber(vTempValue);\r\n\t\tEndIf;\r\n\r\n\t\tvCellValueView = CellGetS(vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\t\tvCellValueEdit = CellGetS(vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\n\t\tvCellValueAnnotate = CellGetS(vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\t\tvCellValueReject = CellGetS(vCellSecurityCube, vUpdateNodePName, 'REJECT', vUpdateGroupPName);\r\n\t\tvCellValueSubmit = CellGetS(vCellSecurityCube, vUpdateNodePName, 'SUBMIT', vUpdateGroupPName);\r\n\r\n\t\t#IF (5)\r\n\t\tIF ((vParentRightView @= 'VIEW' % vParentRightSubmit @= 'SUBMIT' % \r\n     \t\t\tvParentRightReview @='REVIEW') & vParentViewDepth >= vLevel);\r\n\t\t\tIF (vCellValueView @<> 'READ');\r\n\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\t\t\tENDIF;\r\n\t\t\tIF (vLeafElementSecurity @<> cWrite &  vLeafElementSecurity @<> cLock);\r\n\t\t\t\tvLeafElementSecurity = cRead;\t\t\t\r\n\t\t\tEndif;\r\n\t\t\tvSetElementSecurity = 'T';\r\n\r\n\t\t#IF (5)\r\n\t\tENDIF;\r\n\r\n\t\t#IF (6)\r\n\t\tIF ((vParentRightSubmit @= 'SUBMIT' % vParentRightReview @='REVIEW') &\r\n    \t\t\t vParentReviewDepth >= vLevel);\r\n\r\n\t\t\tIF (vCellValueReject @<> 'READ');\r\n\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'REJECT', vUpdateGroupPName);\r\n\t\t\tENDIF;\r\n\t\t\tIF (vCellValueAnnotate @<> 'READ');\r\n\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\t\t\tENDIF;\r\n\t\t\tIF (vCellValueView @<> 'READ');\r\n\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\t\t\tENDIF;\r\n\r\n\t\t\t#*** Add additional privileges with reviewer edit on\r\n\t\t\tIF (pReviewerEditOn @= 'T');\r\n\r\n\t\t\t\tIF (vCellValueSubmit @<> 'READ');\r\n\t\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'SUBMIT', vUpdateGroupPName);\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tIF (vIsLeafNode @= 'T');\r\n\r\n\t\t\t\t\tIF (vCellValueEdit @<> 'READ');\r\n\t\t\t\t\t\tCellPutS('READ', vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t\tIF (vLeafElementSecurity @<> cLock );\r\n\t\t\t\t\t\tvLeafElementSecurity = cLock;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\tENDIF;\r\n\r\n\t\t\tvSetElementSecurity = 'T';\r\n\t\t#IF (6)\r\n\t\tENDIF;\r\n\r\n\tEndIf;\r\n\r\n\tvLooper = vLooper -1 ;\r\n\r\nEND;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (vSetElementSecurity @= 'T');\r\n\tIF (vIsLeafNode @= 'T');\r\n\t\tElementSecurityPut(vLeafElementSecurity, pApprovalDim, vUpdateNodePName, vUpdateGroupPName);\r\n\tELSE;\r\n\t\tElementSecurityPut(cWrite, pApprovalDim, vUpdateNodePName, vUpdateGroupPName);\r\n\tENDIF;\r\n\tElementSecurityPut('READ', cApplicationsDim, pAppId, vUpdateGroupPName);\r\n\tcElementAttributes = cElementAttributesPrefix | pApprovalDim;\r\n\tIf (DimensionExists(cElementAttributes) <> 0);\r\n\t\tCellPutS('READ', cDimensionSecurityCube, cElementAttributes, vUpdateGroupPName);\r\n\tEndIf;\r\n\tIf (CubeExists(cElementAttributes) <> 0);\r\n\t\tCellPutS('READ', cCubeSecurityCube, cElementAttributes, vUpdateGroupPName);\r\n\tEndIf;\r\nElse;\r\n\tElementSecurityPut('NONE', pApprovalDim, vUpdateNodePName, vUpdateGroupPName);\r\n\tCellPutS('', vCellSecurityCube, vUpdateNodePName, 'VIEW', vUpdateGroupPName);\r\n\tCellPutS('', vCellSecurityCube, vUpdateNodePName, 'ANNOTATE', vUpdateGroupPName);\r\n\tCellPutS('', vCellSecurityCube, vUpdateNodePName, 'EDIT', vUpdateGroupPName);\r\n\tCellPutS('', vCellSecurityCube, vUpdateNodePName, 'SUBMIT', vUpdateGroupPName);\r\n\tCellPutS('', vCellSecurityCube, vUpdateNodePName, 'REJECT', vUpdateGroupPName);\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIf (SubsetExists(pApprovalDim, vSubsetAncestors) <>0);\r\n\tSubsetDestroy(pApprovalDim, vSubsetAncestors);\r\nEndIf;",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "TestElist",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateGroup",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pReviewerEditOn",
        "Prompt": "",
        "Value": "F",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_init_new_server",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Change the password of admin user\r\n\r\nIf (pAdminPassword @<> '');\r\nAssignClientPassword('admin', pAdminPassword);\r\nEndIf;\r\n\r\n#*** Create test users\r\n\r\nvClient = 'tp_Smith';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Dale';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Larry';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Mike';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Mary';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Susan';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Lisa';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Jane';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_UK_user';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Germany_user';\r\nAddClient(vClient);\r\n\r\nvClient = 'tp_Europe_user';\r\nAddClient(vClient);\r\n\r\n#*** Create test groups\r\n\r\nvGroup = 'tp_Manager_Review';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Manager_Submit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Corporate_Edit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Corporate_Submit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Operations_Edit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Operations_Submit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_UK_submit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Germany_submit';\r\nAddGroup(vGroup);\r\n\r\nvGroup = 'tp_Europe_submit';\r\nAddGroup(vGroup);\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Dimensions security cube\r\n\r\nsGroupsDim = '}Groups';\r\nsDimensionsDim = '}Dimensions';\r\nsDimensionSecurityCube = '}DimensionSecurity';\r\nIf (CubeExists(sDimensionSecurityCube) = 0);\r\nCubeCreate(sDimensionSecurityCube, sDimensionsDim, sGroupsDim);\r\nCubeSetLogChanges(sDimensionSecurityCube, 1);\r\nEndIf;\r\n\r\n#*** Cubes security cube\r\n\r\nsCubesDim = '}Cubes';\r\nsCubeSecurityCube = '}CubeSecurity';\r\nIf (CubeExists(sCubeSecurityCube) = 0);\r\nCubeCreate(sCubeSecurityCube, sCubesDim, sGroupsDim);\r\nCubeSetLogChanges(sCubeSecurityCube, 1);\r\nEndIf;\r\n\r\n#*** Processes security cube\r\n\r\nsProcessesDim = '}Processes';\r\nsProcessSecurityCube = '}ProcessSecurity';\r\nIf (CubeExists(sProcessSecurityCube) = 0);\r\nCubeCreate(sProcessSecurityCube, sProcessesDim, sGroupsDim);\r\nCubeSetLogChanges(sProcessSecurityCube, 1);\r\nEndIf;\r\n\r\n#*** Assign password to test users\r\n\r\nvClient = 'tp_Smith';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Dale';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Larry';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Mike';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Mary';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Susan';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Lisa';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Jane';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_UK_user';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Germany_user';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\nvClient = 'tp_Europe_user';\r\nAssignClientPassword(vClient, 'apple');\r\n\r\n#*** Assign test users to test groups\r\n\r\nvGroup = 'tp_Manager_Review';\r\nAssignClientToGroup('tp_Smith', vGroup);\r\nAssignClientToGroup('tp_Mary', vGroup);\r\n\r\nvGroup = 'tp_Manager_Submit';\r\nAssignClientToGroup('tp_Smith', vGroup);\r\nAssignClientToGroup('tp_Mike', vGroup);\r\n\r\nAssignClientToGroup('tp_Mary', vGroup);\r\nAssignClientToGroup('tp_Susan', vGroup);\r\n\r\nvGroup = 'tp_Corporate_Edit';\r\nAssignClientToGroup('tp_Smith', vGroup);\r\nAssignClientToGroup('tp_Mike', vGroup);\r\nAssignClientToGroup('tp_Dale', vGroup);\r\n\r\nAssignClientToGroup('tp_Mary', vGroup);\r\nAssignClientToGroup('tp_Susan', vGroup);\r\n\r\nvGroup = 'tp_Corporate_Submit';\r\nAssignClientToGroup('tp_Mike', vGroup);\r\nAssignClientToGroup('tp_Dale', vGroup);\r\n\r\nAssignClientToGroup('tp_Susan', vGroup);\r\n\r\nvGroup = 'tp_Operations_Edit';\r\nAssignClientToGroup('tp_Lisa', vGroup);\r\n\r\nvGroup = 'tp_Operations_Submit';\r\nAssignClientToGroup('tp_Dale', vGroup);\r\nAssignClientToGroup('tp_Larry', vGroup);\r\n\r\nAssignClientToGroup('tp_Jane', vGroup);\r\n\r\nvGroup = 'tp_UK_submit';\r\nAssignClientToGroup('tp_UK_user', vGroup);\r\n\r\nvGroup = 'tp_Germany_submit';\r\nAssignClientToGroup('tp_Germany_user', vGroup);\r\n\r\nvGroup = 'tp_Europe_submit';\r\nAssignClientToGroup('tp_Europe_user', vGroup);\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAdminPassword",
        "Prompt": "",
        "Value": "apple",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_initialize_session",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nvReturn = EnablePersonalWorkspace(0);\r\nIF (vReturn =0);\r\nProcessError;\r\nENDIF;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_job_delete",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pJobId, pControl);\r\nEndIf;\r\n\r\n#*** Remove the job element\r\ncJobsDim = cControlPrefix | 'tp_jobs';\r\nDimensionElementDelete(cJobsDim, pJobId);\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pJobId",
        "Prompt": "",
        "Value": "MyJob",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_job_end",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pJobId, pTime, pStatus, pControl);\r\nEndIf;\r\n\r\ncJobCube = cControlPrefix | 'tp_application_jobs';\r\nIf (CubeExists(cJobCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cJobCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Set values\r\ncJobEndDate = 'EndDate';\r\ncJobStatus = 'JobStatus';\r\n\r\nCellPutS(pTime, cJobCube, pJobId, cJobEndDate);\r\nCellPutS(pStatus, cJobCube, pJobId, cJobStatus);\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pJobId",
        "Prompt": "",
        "Value": "MyJob",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pStatus",
        "Prompt": "",
        "Value": "Status",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_job_start",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pJobId, pAppId, pAppName, pJobType, pTime, pControl);\r\nEndIf;\r\n\r\n#*** Insert the job element\r\ncJobsDim = cControlPrefix | 'tp_jobs';\r\nIf (DIMIX(cJobsDim, pJobId) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert current job id');\r\n\tEndIf;\r\n\r\n\tDimensionElementInsert(cJobsDim, '', pJobId, 'S');\r\n\r\nEndIf;\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\ncJobCube = cControlPrefix | 'tp_application_jobs';\r\nIf (CubeExists(cJobCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cJobCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Set values\r\ncJobAppId = 'ApplicationId';\r\ncJobAppName = 'ApplicationName';\r\ncJobType = 'JobType';\r\ncJobOwner = 'Owner';\r\ncJobOwnerId = 'OwnerId';\r\ncJobStartDate = 'StartDate';\r\n\r\nCellPutS(pAppId, cJobCube, pJobId, cJobAppId);\r\nCellPutS(pAppName, cJobCube, pJobId, cJobAppName);\r\nCellPutS(pJobType, cJobCube, pJobId, cJobType);\r\nCellPutS(cDisplayUserName, cJobCube, pJobId, cJobOwner);\r\nCellPutS(TM1User, cJobCube, pJobId, cJobOwnerId);\r\nCellPutS(pTime, cJobCube, pJobId, cJobStartDate);\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pJobId",
        "Prompt": "",
        "Value": "MyJob",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pAppName",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pJobType",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_mdx_find_consolidate_descendants",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n#*** Check dimension\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check node in dimension\r\nIf (DIMIX(pDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\ncNodePName = DimensionElementPrincipalName(pDim, pNode);\r\n\r\n\r\n#*** Create MDX\r\n\r\nStringGlobalVariable('gMdxFindConsolidateDescendants');\r\n\r\nvMdxCon = '{INTERSECT(EXCEPT(DESCENDANTS([' | pDim | '].[' | cNodePName  | ']),';\r\nvMdxCon = vMdxCon | 'TM1FILTERBYLEVEL(DESCENDANTS([' | pDim | '].[' | cNodePName | ']),0)),';\r\nvMdxCon = vMdxCon | '{TM1SubsetToSet([' | pDim | '],\"' | pSubset | '\")}),';\r\nvMdxCon = vMdxCon | '[' | pDim | '].[' | cNodePName | ']}';\r\ngMdxFindConsolidateDescendants = vMdxCon;\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_mdx_find_descendants",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n#*** Check dimension\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check node in dimension\r\nIf (DIMIX(pDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\ncNodePName = DimensionElementPrincipalName(pDim, pNode);\r\n\r\n#*** Check depth\r\n\r\ncDepth = NUMBR(pDepth);\r\nIf (cDepth < 0);\r\nProcessError;\r\nElse;\r\ncDepth = cDepth + 1;\r\nEndIf;\r\n\r\n#*** Create MDX\r\n\r\nStringGlobalVariable('gMdxFindDescendants');\r\n\r\nIf (pSelf @= 'Y');\r\nvMDX1 = 'DESCENDANTS([' | pDim | '].[' | cNodePName | '], 0, SELF_AND_AFTER)';\r\nElse;\r\nvMDX1 = 'DESCENDANTS([' | pDim | '].[' | cNodePName | '], 0, AFTER)';\r\nEndIf;\r\n\r\nvMDX2 = 'DESCENDANTS([' | pDim | '].[' | cNodePName | '], ' | TRIM(STR(cDepth, 5, 0)) | ', SELF_AND_AFTER)';\r\nvMDX3 = 'EXCEPT(' | vMDX1 | ', ' | vMDX2 | ')';\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\ngMdxFindDescendants = vMDX3;\r\nElse;\r\nIf (CubeExists(pDim) = 0);\r\nvMDX4 = 'INTERSECT(TM1SubsetToSet([' | pDim | '], \"' | pSubset | '\"), ' | vMDX3 | ')';\r\nElse;\r\nvMDX4 = 'INTERSECT(TM1SubsetToSet([' | pDim | '].[' | pDim | '], \"' | pSubset | '\"), ' | vMDX3 | ')';\r\nEndIf;\r\ngMdxFindDescendants = vMDX4;\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDepth",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSelf",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_modify_application_attribute",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Parameters:', \r\npExecutionId, pAppId, pAttrName, pAttrValue, pControl);\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Check application id', pAppId);\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Check application attribute', pAttrName);\r\nEndIf;\r\n\r\ncApplicationsAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\nIf (DIMIX(cApplicationsAttrDim, pAttrName) = 0);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n'pErrorDetails', cApplicationsAttrDim | ', ' | pAttrName,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Set application attribute', pAttrValue);\r\nEndIf;\r\n\r\nIf (pAttrName @= 'IsRunningMaintenance');\r\n\tIf (pAttrValue @= 'Y');\r\n\t\t# insure an application task is not running on this server\r\n\t\tcAppsDimSize = DIMSIZ(cApplicationsDim);\r\n\t\tvIndex = 1;\r\n\t\tWhile (vIndex <= cAppsDimSize);\r\n\t\t\tvElement = DIMNM(cApplicationsDim, vIndex);\r\n\t\t\tcurrentValue = ATTRS(cApplicationsDim, vElement, 'IsRunningMaintenance');\r\n\t\t\tIf ('Y' @= currentValue);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_ATTR_ALREADY_SET',\r\n\t\t\t\t'pErrorDetails', cApplicationsAttrDim | ', ' | pAttrName,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tvIndex = vIndex+1;\r\n\t\tEnd;\r\n\tEndIf;\r\nEndIf;\r\n\r\nAttrPutS(pAttrValue, cApplicationsDim, pAppId, pAttrName);\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pAttrName",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pAttrValue",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reserve_release_all",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\n\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Release all slices pAppId=' | pAppId | '|User=' | TM1User();\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 0;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube < totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @<> '');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t## debug list reservations\r\n\t\t\tvIndex = 1;\r\n\t\t\tvDelim = '|';\r\n\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '',vDelim);\r\n\t\t\tIf (vAddress @= '');\r\n\t\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\tWHILE (vAddress @<> '');\r\n\t\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '', vDelim);\r\n\t\t\tEnd;\t\r\n\t\tEndIf;\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t'pCube', cCubeName, 'pApprovalDim', '', 'pNode', '', 'pReserve', 'N', 'pUser', '','pControlDim','','pControlWritableSlices', '');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n \r\n\tindexCube = indexCube + 1;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\t## debug list reservations\r\n\t\tvIndex = 1;\r\n\t\tvDelim = '|';\r\n\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '',vDelim);\r\n\t\tIf (vAddress @= '');\r\n\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n\t\tWHILE (vAddress @<> '');\r\n\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '', vDelim);\r\n\t\tEnd;\t\r\n\tEndIf;\r\nEnd;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reserve_slice",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve slice pAppId=' | pAppId | '|pNode=' | pNode | '|pApprovalDim=' | pApprovalDim | '|pReserve=' | pReserve | '|User=' | pUser;\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 0;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check=' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube < totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\taddConcatSymbol = 0;\r\n\tIf (cIsAppCube @= 'A' % (cIsAppCube @='Y' & pApprovalDim @=''));\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t## debug list reservations\r\n\t\t\tvIndex = 1;\r\n\t\t\tvDelim = '|';\r\n\t\t\tvAddress = CubeDataReservationGet(vIndex, cCubeName, '', vDelim);\r\n\t\t\tIf (vAddress @= '');\r\n\t\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\tWHILE (vAddress @<> '');\r\n\t\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tvAddress = CubeDataReservationGet(vIndex, cCubeName, '', vDelim);\r\n\t\t\t\tIf (vAddress @= '');\r\n\t\t\t\t\tcLogCubeText = 'There are no more reservations on cube ' | cCubeName;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\tEnd;\t\r\n\t\tEndIf;\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t'pCube', cCubeName, 'pApprovalDim', pApprovalDim, 'pNode', pNode, 'pReserve', pReserve, 'pUser', pUser, 'pControlDim','','pControlWritableSlices', '');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t## debug list reservations\r\n\t\t\tvIndex = 1;\r\n\t\t\tvDelim = '|';\r\n\t\t\tvAddress = CubeDataReservationGet(vIndex, cCubeName, '', vDelim);\r\n\t\t\tIf (vAddress @= '');\r\n\t\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tWHILE (vAddress @<> '');\r\n\t\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tvAddress = CubeDataReservationGet(vIndex, cCubeName, '', vDelim);\r\n\t\t\t\tIf (vAddress @= '');\r\n\t\t\t\t\tcLogCubeText = 'There are no more reservations on cube ' | cCubeName;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\tEnd;\t\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pReserve",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reset_permission_on_failure",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reset_state",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Parameters:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pExecutionId, pAppId, pControl);\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check application dimension');\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check application id', pAppId);\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Get Approval dimension and subset');\r\nEndIf;\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndif;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndif;\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndif;\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check state cube');\r\nEndIf;\r\n\r\nIf (cApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\nElse;\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\ncState = 'State';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncCurrentOwner = 'CurrentOwner';\r\ncWorkInProgress = '2';\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\t\r\n# remove existing reservations for the application\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Revoke all owners');\r\nEndIf;\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_release_all', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pControl', pControl);\r\n\t\t\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\t\r\nIf (cApprovalDim @= '');\r\n\t\r\n\tcApplicationsDim = cControlPrefix | 'tp_applications';\r\n\tcApplicationSubset = 'tp_temp_reset_application_subset_' | pExecutionId;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Application reset subset : ' | cApplicationSubset);\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out application values on State cube');\r\n\tEndIf;\r\n\t\r\n\tIf (SubsetExists(cApplicationsDim, cApplicationSubset) = 1);\r\n\t\tSubsetDestroy(cApplicationsDim, cApplicationSubset);\r\n\tEndIf;\t\r\n\tSubsetCreate(cApplicationsDim, cApplicationSubset);\r\n\tSubsetElementInsert(cApplicationsDim, cApplicationSubset, pAppId, 0);\r\n\t\t\r\n\tcApplicationView = 'tp_temp_reset_application_view_' | pExecutionId;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Application reset view : ' | cApplicationView);\r\n\tEndIf;\r\n\tIf (ViewExists(cStateCube, cApplicationView) = 1);\r\n\t\tViewDestroy(cStateCube, cApplicationView);\t\r\n\tEndIf;\t\r\n\tViewCreate(cStateCube, cApplicationView);\r\n\tViewColumnDimensionSet(cStateCube, cApplicationView, cNodeInfoDim, 1);\r\n\tViewRowDimensionSet(cStateCube, cApplicationView, cApplicationsDim, 1);\r\n\tViewSubsetAssign(cStateCube, cApplicationView, cApplicationsDim, cApplicationSubset);\t\r\n\tViewZeroOut(cStateCube, cApplicationView);\r\n\tViewDestroy(cStateCube, cApplicationView);\t\r\n\tSubsetDestroy(cApplicationsDim, cApplicationSubset);\r\nElse;\r\n\t\r\n\t#*** \r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out all view on State cube');\r\n\tEndIf;\r\n\tcAllView = 'All_reset_' | pAppId;\r\n\tIf (ViewExists(cStateCube, cAllView) = 1);\r\n\t\tViewDestroy(cStateCube, cAllView);\t\r\n\tEndIf;\t\r\n\tViewCreate(cStateCube, cAllView);\r\n\tViewColumnDimensionSet(cStateCube, cAllView, cNodeInfoDim, 1);\r\n\tViewSubsetAssign(cStateCube, cAllView, cShadowApprovalDim, cApprovalSubset);\r\n\tViewZeroOut(cStateCube, cAllView);\r\n\tViewDestroy(cStateCube, cAllView);\r\n\r\n\t#***\r\n\tcApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\t\r\n\ttotalCubes = DIMSIZ('}Cubes');\r\n\tindexCube = totalCubes;\r\n\t\r\n\t#ZeroOut Global overlay cubes\r\n\tWhile (indexCube >= 1);\r\n\t\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\t\r\n\t\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\t\tcOverlayCube = '}SecurityOverlayGlobal_' | cCubeName;\r\n\t\tcOverlayMeasureDim = '}SecurityOverlay';\r\n\t\tIf (cIsAppCube @= 'A' );\r\n\t\t\t#***check whether overlay cube contains version dimension\r\n\t\t\tvDimIndex =1;\r\n\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tvFoundVersion = 'F';\r\n\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\tIF (vDimension @= cVersionDim);\r\n\t\t\t\t\tvFoundVersion = 'T';\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tEnd;\r\n\r\n\t\t\tIF (CubeExists(cOverlayCube) >0);\r\n\t\t\t\t#*** reset secruity overlay cubes\r\n\t\t\t\tcAllView = 'All';\r\n\t\t\t\tIf (ViewExists(cOverlayCube, cAllView) = 1);\r\n\t\t\t\t\tViewDestroy(cOverlayCube, cAllView);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tViewCreate(cOverlayCube, cAllView);\r\n\t\t\t\tViewColumnDimensionSet(cOverlayCube, cAllView, cOverlayMeasureDim, 1);\r\n\t\t\t\tViewRowDimensionSet(cOverlayCube, cAllView, cApprovalDim, 1);\r\n\t\t\t\tIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '' & vFoundVersion @= 'T' );\r\n\t\t\t\t\tViewTitleDimensionSet(cOverlayCube, cAllView, cVersionDim);\r\n\t\t\t\t\tViewSubsetAssign(cOverlayCube, cAllView, cVersionDim, vVersionSubset);\r\n\t\t\t\tEndif;\r\n\t\t\t\tViewZeroOut(cOverlayCube, cAllView);\r\n\t\t\t\tViewDestroy(cOverlayCube, cAllView);\r\n\t\t\tEndif;\r\n\r\n\r\n\t\tEndIf;\r\n\t\t\r\n\t\tindexCube = indexCube - 1;\r\n\tEnd;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set node state to Not Started if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\t#***\r\n\t\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set state cube value for state if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\tcDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\n\tIf (cDisplayUserName @= '');\r\n\t\tcDisplayUserName = TM1User;\r\n\tEndIf;\r\n\t\t\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cApprovalDimSize);\r\n\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\r\n\t\tvValue = CellGetS(cStateCube, vElement, 'State');\r\n\t\tIf (vValue @= '');\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cState) = 0);\r\n\t\t\t\tvDetail=INSRT(cState,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('0', cStateCube, vElement, cState);\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cStateChangeUser) = 0);\r\n\t\t\t\tvDetail=INSRT(cStateChangeUser,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, vElement, cStateChangeDate);\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cStateChangeDate) = 0);\r\n\t\t\t\tvDetail=INSRT(cStateChangeDate,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS(pTime, cStateCube, vElement, cStateChangeDate);\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\t\r\n\t#***\r\n\t\r\nEndIf;\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\n#***\r\n#Truncate the error dimension\r\nvReturnValue = ExecuteProcess('}tp_util_truncate_error_dim');\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reset_view_by_cube_user",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#delete private views (.vue files)\r\nvPath = pUser | '\\' | pCube | '}vues\\';\r\nvFilePattern =  '*_' | pAppId |  '*.vue';\r\nvFile = wildcardfilesearch( vPath | vFilePattern , '');\r\nAsciiDelete(vPath | vFile);\r\nvPropertyFile = pCube | '.' | SUBST(vFile, 1, Long(vFile)-4) | '.' | pUser | '.blb';\r\nAsciiDelete(vPropertyFile);\r\nvFileCount = 0;\r\nWhile (vFile @<> '' );\r\n\tvFileCount = vFileCount + 1;\r\n\tvFile = wildcardfilesearch( vPath | vFilePattern , '');\r\n\tAsciiDelete(vPath | vFile);\r\n\tAsciiDelete(vPath | vFile);\r\n\tvPropertyFile = pCube | '.' | SUBST(vFile, 1, Long(vFile)-4) | '.' | pUser | '.blb';\r\n\tAsciiDelete(vPropertyFile);\r\nEND;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_reset_views",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nvAppCube = '}tp_application_cubes';\r\nvCubesDim = '}Cubes';\r\nvClientsDim = '}Clients';\r\nvTotalCubes = DIMSIZ(vCubesDim);\r\n\r\nlooper =1;\r\nWhile (looper <= vTotalCubes);\r\n\tvCube = DIMNM(vCubesDim, looper);\r\n\tIF (SUBST(vCube, 1,1) @<> '}');\r\n\t\tvCubeType = CellGetS(vAppCube, pAppId, vCube);\r\n\t\tIF (vCubeType @= 'A' % vCubeType @= 'Y');\r\n\t\t\tvTotalClients = DIMSIZ(vClientsDim);\r\n\t\t\tvClientLooper = 1;\r\n\t\t\tWhile (vClientLooper <= vTotalClients);\r\n\t\t\t\tvClient = DIMNM(vClientsDim, vClientLooper);\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_reset_view_by_cube_user', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pAppId', pAppId, 'pCube', vCube, 'pUser', vClient);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvClientLooper = vClientLooper +1;\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\tEndif;\r\n\tlooper = looper +1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_rights_update_preparation",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',pExecutionId, pAppId);\r\nEndIf;\r\n\r\n#***\r\ncIMApplicationDim = '}tp_intermediate_security_applications';\r\ncIMMeasures = '}tp_intermediate_security_measures';\r\nvIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;\r\ncApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');\r\n\r\n#***\r\n#create an application subset that contains this application Id only\r\nvTempAppSubset = 'temp_app_' | pAppId;\r\nIF (SubsetExists(cIMApplicationDim, vTempAppSubset)>0);\r\n\tSubsetDestroy(cIMApplicationDim, vTempAppSubset);\r\nEndif;\r\nSubsetCreate(cIMApplicationDim, vTempAppSubset);\r\nSubsetElementInsert(cIMApplicationDim, vTempAppSubset, pAppId, 1);\r\n\r\n#***\r\n#create a group subset that contains groups in the vIncrGroupDim\r\nIF (pIncremental @= 'Y');\r\n\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\tvGroupsControlDim = '}Groups';\r\n\tIF (SubsetExists(vGroupsControlDim, vTempGroupSubset)>0);\r\n\t\tSubsetDestroy(vGroupsControlDim, vTempGroupSubset);\r\n\tEndif;\r\n\tSubsetCreate(vGroupsControlDim, vTempGroupSubset);\r\n\r\n\tvTotalTempGroups = DIMSIZ(vIncrGroupDim);\r\n\tgroupLooper = 1;\r\n\tWhile (groupLooper <= vTotalTempGroups);\r\n\t\tvGroup = DIMNM(vIncrGroupDim, groupLooper);\r\n\t\tSubsetElementInsert(vGroupsControlDim, vTempGroupSubset, vGroup, 1);\r\n\t\tgroupLooper = groupLooper +1;\r\n\tEnd;\r\nEndif;\r\n\r\n#***split approval subset into a small subsets based on available thread number\r\ncTotalNodes = SubsetGetSize(cApprovalDim, cApprovalSubset);\r\nvNodesInSubset = cTotalNodes;\r\nvMultiThreads = StringToNumber(pMultiThreads);\r\n\r\nIF (vMultiThreads > vNodesInSubset);\r\n\tvMultiThreads = vNodesInSubset;\r\nEndif;\r\n\r\nIF (vMultiThreads >1);\r\n\tvRemainingNodes = Mod(cTotalNodes, vMultiThreads);\r\n\tIF ( vRemainingNodes>0);\r\n\t\tvAvgNodesInSubset = Int((cTotalNodes-vRemainingNodes)/vMultiThreads);\r\n\tElse;\r\n\t\tvAvgNodesInSubset = Int(cTotalNodes/vMultiThreads);\r\n\tEndif;\r\n\r\n\r\n\tlooper = 1;\r\n\tWhile (looper <= vMultiThreads);\r\n\t\tvSubsetName = 'update_thread' | numberToString(looper);\r\n\r\n\t\tIF (SubsetExists(cApprovalDim, vSubsetName) >0);\r\n\t\t\tSubsetDestroy(cApprovalDim, vSubsetName);\r\n\t\tEndif;\r\n\t\r\n\t\tSubsetCreate(cApprovalDim, vSubsetName);\r\n\t\r\n\t\tIF (looper <vMultiThreads);\r\n\t\t\tvNodesInSubsets = vAvgNodesInSubset;\r\n\t\tElse;\r\n\t\t\tvNodesInSubsets = vRemainingNodes + vAvgNodesInSubset;\r\n\t\tEndif;\r\n\r\n\t\tnodeLooper = 1;\r\n\t\tWhile (nodeLooper <= vNodesInSubsets);\r\n\t\t\tvNodeIndex = (looper -1)*vAvgNodesInSubset + nodeLooper;\r\n\t\t\tvNode = SubsetGetElementName(cApprovalDim, cApprovalSubset, vNodeIndex);\r\n\t\t\tSubsetElementInsert(cApprovalDim, vSubsetName, vNode, 0);\r\n\t\t\tnodeLooper = nodeLooper +1;\r\n\t\tEnd;\r\n\t\tlooper = looper +1;\r\n\tEnd;\r\nEndif;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIncremental",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pMultiThreads",
        "Prompt": "",
        "Value": "5",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_rights_update_RDCLS_cube_by_permission",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',pExecutionId, pAppId, pCube,pApprovalDim, pUpdateSubset, pVersionDim, pVersionSlicesWrite, pVersionSlicesRead);\r\nEndIf;\r\n\r\n#***\r\nvCellSecurityPermissionCube = '}CellSecurity_}tp_application_permission}' | pAppId;\r\ncIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;\r\ncCellSecurityCube = '}CellSecurity_' | pCube;\r\ncAllApplications = 'all_applications';\r\nvIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;\r\n\r\n#***\r\nIF (CubeExists(cIMRDCLSCube) >0);\r\n\r\n#***\r\ncGroupsDim = '}Groups';\r\nIF (pIncremental @= 'Y');\r\n\tcGroupsDim = vIncrGroupDim;\r\nEndif;\r\n\r\n#***\r\nversionIndex = 0;\r\napprovalIndex = 0;\r\ndimensionIndex = 1;\r\nWhile (dimensionIndex > 0 ); \r\n\tcCubeDimensionName = TABDIM(pCube, dimensionIndex);\r\n\tIf (cCubeDimensionName @= '');\r\n\t\tdimensionIndex = -1;\r\n\tElse;\r\n\t\tIF (cCubeDimensionName @=pVersionDim);\r\n\t\t\tversionIndex = dimensionIndex;\r\n\t\tEndif;\r\n\t\t\t\t\r\n\t\tIF (cCubeDimensionName @= pApprovalDim );\r\n\t\t\tapprovalIndex =dimensionIndex ;\r\n\t\tEndif;\r\n\r\n\tEndIf;\r\n\r\n\tdimensionIndex = dimensionIndex + 1;\r\nEnd;\r\n\r\nIF (versionIndex < approvalIndex);\r\n\tversionFirst = 'Y';\r\nEndif;\r\n\r\n#*Update Intermediate cell security cube\r\nIF (pUpdateIntermediateSecurity @= 'Y');\r\n\r\n\tvTotalGroups = DIMSIZ(cGroupsDim);\r\n\tvGroupLooper = 1;\r\n\tWhile (vGroupLooper <= vTotalGroups);\r\n\t\tvGroup = DIMNM(cGroupsDim, vGroupLooper);\r\n\t\tvTotalNodes = SubsetGetSize(pApprovalDim, pUpdateSubset);\r\n\t\tvNodeLooper = 1;\r\n\t\tWhile (vNodeLooper <= vTotalNodes);\r\n\t\t\tvApprovalNode = SubsetGetElementName(pApprovalDim, pUpdateSubset, vNodeLooper);\r\n\t\t\tvView = CellGetS(vCellSecurityPermissionCube, vApprovalNode, 'VIEW', vGroup);\r\n\t\t\tvEdit = CellGetS(vCellSecurityPermissionCube, vApprovalNode, 'EDIT', vGroup);\r\n\t\t\tvNodeSecurity = '';\r\n\t\t\tvVersionSecurity = '';\r\n\t\t\tvFinalSecurity = '';\r\n\t\t\tIF (vView @= 'READ');\r\n\t\t\t\tIF (DType(pApprovalDim, vApprovalNode) @='C');\r\n\t\t\t\t\tvNodeSecurity = 'WRITE';\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvNodeSecurity = 'READ';\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\r\n\t\t\tIF (vEdit @= 'READ');\r\n\t\t\t\tvNodeSecurity = 'WRITE';\r\n\t\t\tEndif;\r\n\t\t\t\t\t\t\t\r\n\t\t\tIF (vNodeSecurity @<> '');\r\n\r\n\t\t\t#***readable version slices\r\n\t\t\tversionSeparater = '|';\r\n\t\t\tvPosVersion = 0;\r\n\t\t\tvStringToScan = pVersionSlicesRead;\r\n\t\t\tIF (pVersionSlicesRead @<> '');\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tElse;\r\n\t\t\t\t#Even no readable version slices are defined, we still need to apply security\r\n\t\t\t\t#based on approval dimension\r\n\t\t\t\tvPosVersion = 1;\r\n\t\t\tEndif;\r\n\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\t\t\t\tIF (versionIndex >0);\r\n\t\t\t\t\tIF (vVersionSlice @<> '' );\r\n\t\t\t\t\t\tIF (DIMIX(pVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t\t\t'pErrorCode', 'TI_READABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t\t\t'pErrorDetails', pVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\tIF (approvalIndex >0);\r\n\t\t\t\t\t\t\tIF (versionFirst @= 'Y');\r\n\t\t\t\t\t\t\t\tCellPutS('READ', cIMRDCLSCube, vVersionSlice, vApprovalNode,pAppId, vGroup,'Rights' );\r\n\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\tCellPutS('READ', cIMRDCLSCube, vApprovalNode, vVersionSlice,pAppId, vGroup,'Rights' );\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tCellPutS('READ', cIMRDCLSCube, vVersionSlice, pAppId, vGroup,'Rights' );\t\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\t\t\t\tCellPutS('READ', cIMRDCLSCube, vApprovalNode, pAppId, vGroup,'Rights' );\r\n\t\t\t\tEndif;\r\n\r\n\t\t\tEnd;\r\n\r\n\t\t\t#***writable version slices\r\n\t\t\tversionSeparater = '|';\r\n\t\t\tvPosVersion = 0;\r\n\t\t\tvStringToScan = pVersionSlicesWrite;\r\n\t\t\tIF (pVersionSlicesWrite @<> '');\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tElse;\r\n\t\t\t\t#Even no writable version slices are defined, we still need to apply security\r\n\t\t\t\t#based on approval dimension\r\n\t\t\t\tvPosVersion = 1;\r\n\t\t\tEndif;\r\n\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\t\tIF (vNodeSecurity @= 'READ');\r\n\t\t\t\t\tvFinalSecurity = 'READ';\r\n\t\t\t\tElseif (vNodeSecurity @= 'WRITE');\r\n\t\t\t\t\tvFinalSecurity = 'WRITE';\r\n\t\t\t\tEndif;\r\n\t\r\n\t\t\t\tIF (versionIndex >0);\r\n\t\t\t\t\tIF (vVersionSlice @<>'');\r\n\t\t\t\t\t\tIF (DIMIX(pVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t\t\t'pErrorDetails', pVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\tIF (approvalIndex >0);\r\n\t\t\t\t\t\t\tIF (versionFirst @= 'Y');\r\n\t\t\t\t\t\t\t\tCellPutS(vFinalSecurity, cIMRDCLSCube, vVersionSlice, vApprovalNode,pAppId, vGroup,'Rights' );\r\n\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\tCellPutS(vFinalSecurity, cIMRDCLSCube, vApprovalNode, vVersionSlice,pAppId, vGroup,'Rights' );\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tCellPutS(vFinalSecurity, cIMRDCLSCube, vVersionSlice, pAppId, vGroup,'Rights' );\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\t\t\t\tCellPutS(vFinalSecurity, cIMRDCLSCube, vApprovalNode, pAppId, vGroup,'Rights' );\r\n\t\t\t\tEndif;\r\n\t\t\tEnd;\r\n\t\t\tEndif;\r\n\r\n\t\t\tvNodeLooper = vNodeLooper  +1;\r\n\t\tEnd;\r\n\t\tvGroupLooper = vGroupLooper +1;\r\n\tEnd;\r\n\r\nEndif;\r\n\r\nEndif;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*Update RD cell security cubes\r\nIF (CubeExists(cIMRDCLSCube) >0);\r\nvTotalGroups = DIMSIZ(cGroupsDim);\r\nvGroupLooper = 1;\r\nWhile (vGroupLooper <= vTotalGroups);\r\n\tvGroup = DIMNM(cGroupsDim, vGroupLooper);\r\n\r\n\tvTotalNodes = SubsetGetSize(pApprovalDim, pUpdateSubset);\r\n\tvNodeLooper = 1;\r\n\tWhile (vNodeLooper <= vTotalNodes);\r\n\t\tvApprovalNode = SubsetGetElementName(pApprovalDim, pUpdateSubset, vNodeLooper);\r\n\t\tvFinalCellSecurity ='NONE';\r\n\r\n\t\tIF (versionIndex >0);\r\n\t\t\tvTotalVersions = DIMSIZ(pVersionDim);\r\n\t\t\tvVersionLooper = 1;\r\n\t\t\tWhile (vVersionLooper <= vTotalVersions);\r\n\t\t\t\tvVersion = DIMNM(pVersionDim, vVersionLooper);\r\n\t\t\t\tIF (approvalIndex >0)\t;\t\r\n\t\t\t\t\tIF (versionFirst @= 'Y');\r\n\t\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube, vVersion, vApprovalNode,cAllApplications, vGroup,'Rights' );\r\n\t\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube, vVersion, vApprovalNode,cAllApplications, vGroup,'StaticRights');\r\n\t\t\t\t\t\tIF (vFinalCellSecurity @<> vCurrentCellSecurity);\r\n\t\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube, vVersion, vApprovalNode,cAllApplications, vGroup,'StaticRights');\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,cAllApplications, vGroup,'Rights' );\r\n\t\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,cAllApplications, vGroup,'StaticRights');\r\n\t\t\t\t\t\tIF (vFinalCellSecurity @<> vCurrentCellSecurity);\r\n\t\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube, vApprovalNode, vVersion,cAllApplications, vGroup,'StaticRights');\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube,vVersion, cAllApplications, vGroup,'Rights' );\r\n\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube,vVersion, cAllApplications, vGroup,'StaticRights' );\r\n\t\t\t\t\tIF (vFinalCellSecurity @<>vCurrentCellSecurity);\r\n\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube,vVersion, cAllApplications, vGroup,'StaticRights');\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tEndif;\r\n\t\t\t\tvVersionLooper = vVersionLooper +1;\r\n\t\t\tEnd;\r\n\r\n\t\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube,vApprovalNode, cAllApplications, vGroup,'Rights' );\r\n\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube,vApprovalNode, cAllApplications, vGroup,'StaticRights');\r\n\t\t\tIF (vFinalCellSecurity @<>vCurrentCellSecurity);\r\n\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube,vApprovalNode, cAllApplications, vGroup,'StaticRights');\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\t\tvNodeLooper = vNodeLooper  +1;\t\t\r\n\tEnd;\r\n\tvGroupLooper = vGroupLooper +1;\r\nEnd;\r\n\r\nEndif;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesWrite",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesRead",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateIntermediateSecurity",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pIncremental",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_rights_update_RDCLS_post",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',pExecutionId, pAppId);\r\nEndIf;\r\n\r\n#***\r\ncIMApplicationDim = '}tp_intermediate_security_applications';\r\ncIMMeasures = '}tp_intermediate_security_measures';\r\nvIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;\r\ncApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');\r\nvMultiThreads = StringToNumber(pMultiThreads);\r\n\r\n#***\r\n#delete the application subset that contains this application Id only\r\nvTempAppSubset = 'temp_app_' | pAppId;\r\nIF (SubsetExists(cIMApplicationDim, vTempAppSubset)>0);\r\n\tSubsetDestroy(cIMApplicationDim, vTempAppSubset);\r\nEndif;\r\n\r\n#***\r\n#Delete the temp dimension that stores list of changed groups\r\nIF (pIncremental @= 'Y');\r\n\tIF (DimensionExists(vIncrGroupDim) >0);\r\n\t\tDimensionDestroy(vIncrGroupDim);\r\n\tEndif;\r\nEndif;\r\n\r\n#***\r\n#delete group subset that contains groups in the vIncrGroupDim\r\nIF (pIncremental @= 'Y');\r\n\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\tvGroupsControlDim = '}Groups';\r\n\tIF (SubsetExists(vGroupsControlDim, vTempGroupSubset)>0);\r\n\t\tSubsetDestroy(vGroupsControlDim, vTempGroupSubset);\r\n\tEndif;\r\nEndif;\r\n\r\n#***\r\nif (vMultiThreads >1);\r\nlooper = 1;\r\n\tWhile (looper <= vMultiThreads);\r\n\t\tvSubsetName = 'update_thread' | numberToString(looper);\r\n\r\n\t\tIF (SubsetExists(cApprovalDim, vSubsetName) >0);\r\n\t\t\tSubsetDestroy(cApprovalDim, vSubsetName);\r\n\t\tEndif;\r\n\t\tlooper = looper +1;\r\n\tEnd;\r\nEndif;\r\n\r\n#***\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateIntermediateSecurity",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pIncremental",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pMultiThreads",
        "Prompt": "",
        "Value": "5",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_rights_update_RDCLS_pre",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',pExecutionId, pAppId, pCube);\r\nEndIf;\r\n\r\n#***\r\ncIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;\r\ncIMApplicationDim = '}tp_intermediate_security_applications';\r\ncIMMeasures = '}tp_intermediate_security_measures';\r\ncApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');\r\n\r\n#**\r\nIF (CubeExists(cIMRDCLSCube) >0);\r\n\r\n#***Reset \"Rights\" field on Intermediate cell security cube based for this application only\r\nIF (DIMIX(cIMApplicationDim, pAppId) >0);\r\n\t#check application subset that contains this application Id only\r\n\tvTempAppSubset = 'temp_app_' | pAppId;\r\n\tIF (SubsetExists(cIMApplicationDim, vTempAppSubset)=0);\r\n\t\t#Error;\r\n\tEndif;\r\n\r\n\tIF (pIncremental @<> 'Y');\r\n\t\tvAllView = 'tp_temp_RDCLS_view_' | pExecutionId;\r\n\t\tViewCreate(cIMRDCLSCube, vAllView);\r\n\t\tViewTitleDimensionSet(cIMRDCLSCube, vAllView, cIMApplicationDim);\r\n\t\tViewSubsetAssign(cIMRDCLSCube, vAllView, cIMApplicationDim, vTempAppSubset);\r\n\t\tViewZeroOut(cIMRDCLSCube, vAllView);\r\n\t\tViewDestroy(cIMRDCLSCube, vAllView);\r\n\tElse;\r\n\t\t#group subset that contains changed groups only\r\n\t\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\t\tvGroupsControlDim = '}Groups';\r\n\t\tIF (SubsetExists(vGroupsControlDim, vTempGroupSubset)=0);\r\n\t\t\t#Error;\r\n\t\tEndif;\r\n\r\n\t\tvGroupView = 'tp_temp_group_view_'  | pExecutionId;\r\n\t\tViewCreate(cIMRDCLSCube, vGroupView);\r\n\t\tViewTitleDimensionSet(cIMRDCLSCube, vGroupView, vGroupsControlDim);\r\n\t\tViewTitleDimensionSet(cIMRDCLSCube, vGroupView, cIMApplicationDim);\r\n\t\tViewSubsetAssign(cIMRDCLSCube, vGroupView, vGroupsControlDim, vTempGroupSubset );\r\n\t\tViewSubsetAssign(cIMRDCLSCube, vGroupView, cIMApplicationDim, vTempAppSubset);\r\n\t\tViewZeroOut(cIMRDCLSCube, vGroupView);\r\n\t\tViewDestroy(cIMRDCLSCube, vGroupView);\r\n\r\n\tEndif;\r\nEndif;\r\n\r\n\r\n#***Reset StaticRights field on Intermediate cell security cube\r\n#Create a subset that contains StaticRights only\r\nvTempStaticRightsSubset = 'temp_static_rights_' | pAppId;\r\nIF (SubsetExists(cIMMeasures, vTempStaticRightsSubset)=0);\r\n\t#Error;\r\nEndif;\r\n\r\n#zeroOut all related cell values related to StaticRights and approvalSubset in the intermediate cube\r\nIF (pIncremental @<> 'Y');\r\n\tvZerooutView = 'temp_IMCube_zeroout_' | pAppId;\r\n\tViewCreate(cIMRDCLSCube, vZerooutView);\r\n\tViewRowDimensionSet(cIMRDCLSCube, vZerooutView, cIMMeasures,1);\r\n\tViewColumnDimensionSet(cIMRDCLSCube, vZerooutView, cApprovalDim,1);\r\n\tViewSubsetAssign(cIMRDCLSCube, vZerooutView, cIMMeasures, vTempStaticRightsSubset);\r\n\tViewSubsetAssign(cIMRDCLSCube, vZerooutView, cApprovalDim, cApprovalSubset);\r\n\tViewZeroOut(cIMRDCLSCube, vZerooutView);\r\n\tViewDestroy(cIMRDCLSCube, vZerooutView);\r\nElse;\r\n\t#create a group subset that contains this group only\r\n\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\tvGroupsControlDim = '}Groups';\r\n\tIF (SubsetExists(vGroupsControlDim, vTempGroupSubset)=0);\r\n\t\t#Error;\r\n\tEndif;\r\n\r\n\tvGroupView = 'tp_temp_group_view_' | pExecutionId;\r\n\tViewCreate(cIMRDCLSCube, vGroupView);\r\n\tViewTitleDimensionSet(cIMRDCLSCube, vGroupView, vGroupsControlDim);\r\n\tViewSubsetAssign(cIMRDCLSCube, vGroupView, vGroupsControlDim, vTempGroupSubset );\r\n\tViewTitleDimensionSet(cIMRDCLSCube, vGroupView,cIMMeasures);\r\n\tViewSubsetAssign(cIMRDCLSCube, vGroupView, cIMMeasures, vTempStaticRightsSubset );\r\n\tViewZeroOut(cIMRDCLSCube, vGroupView);\r\n\tViewDestroy(cIMRDCLSCube, vGroupView);\r\n\r\nEndif;\r\n\r\nEndif;\r\n#**\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (CubeExists(cIMRDCLSCube) >0);\r\nversionIndex = 0;\r\napprovalIndex = 0;\r\ndimensionIndex = 1;\r\nWhile (dimensionIndex > 0 ); \r\n\tcCubeDimensionName = TABDIM(pCube, dimensionIndex);\r\n\tIf (cCubeDimensionName @= '');\r\n\t\tdimensionIndex = -1;\r\n\tElse;\r\n\t\tIF (cCubeDimensionName @=cVersionDim);\r\n\t\t\tversionIndex = dimensionIndex;\r\n\t\tEndif;\r\n\t\t\t\t\r\n\t\tIF (cCubeDimensionName @= cApprovalDim );\r\n\t\t\tapprovalIndex =dimensionIndex ;\r\n\t\tEndif;\r\n\r\n\tEndIf;\r\n\r\n\tdimensionIndex = dimensionIndex + 1;\r\nEnd;\r\n\r\nversionFirst = 'N';\r\nIF (versionIndex < approvalIndex);\r\n\tversionFirst = 'Y';\r\nEndif;\r\n\r\nvGroup = DIMNM('}Groups',1);\r\nvApprovalNode = DIMNM(cApprovalDim, 1);\r\nvApplication = 'all_applications';\r\nIF (versionIndex >0);\r\n\tvVersion = DIMNM(cVersionDim,1);\r\nEndif;\r\n\r\n\r\nIF (versionIndex >0 & approvalIndex >0 & versionFirst @='Y');\r\n\r\n\tvSecurity = CellGetS( cIMRDCLSCube, vVersion, vApprovalNode, vApplication,  vGroup,'Rights' );\r\n\r\nElseif (versionIndex >0 & approvalIndex >0 & versionFirst @<> 'Y');\r\n\r\n\tvSecurity = CellGetS( cIMRDCLSCube, vApprovalNode, vVersion, vApplication,  vGroup,'Rights' );\r\n\r\nElseif (versionIndex =0 & approvalIndex >0);\r\n\r\n\tvSecurity = CellGetS( cIMRDCLSCube, vApprovalNode, vApplication,  vGroup,'Rights' );\r\n\r\nElseif (versionIndex >0 & approvalIndex =0);\r\n\tvSecurity = CellGetS( cIMRDCLSCube, vVersion, vApplication,  vGroup,'Rights' );\r\n\r\nEndif;\r\n\r\nEndif;",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateIntermediateSecurity",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pIncremental",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pMultiThreads",
        "Prompt": "",
        "Value": "5",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_rights_update_RDCLS_static_rights",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#****String Caching Workaround\r\n#This TI can be removed once String cache is implemented on TM1\r\n\r\n#****\r\n\r\ncIMRDCLSCube = '}tp_intermediate_RDCLS}' | pCube;\r\ncGroupsDim = pGroupsDim;\r\ncAllApplications = 'all_applications';\r\n\r\nversionIndex = 0;\r\napprovalIndex = 0;\r\ndimensionIndex = 1;\r\nWhile (dimensionIndex > 0 ); \r\n\tcCubeDimensionName = TABDIM(pCube, dimensionIndex);\r\n\tIf (cCubeDimensionName @= '');\r\n\t\tdimensionIndex = -1;\r\n\tElse;\r\n\t\tIF (cCubeDimensionName @=pVersionDim);\r\n\t\t\tversionIndex = dimensionIndex;\r\n\t\tEndif;\r\n\t\t\t\t\r\n\t\tIF (cCubeDimensionName @= pApprovalDim );\r\n\t\t\tapprovalIndex =dimensionIndex ;\r\n\t\tEndif;\r\n\r\n\tEndIf;\r\n\r\n\tdimensionIndex = dimensionIndex + 1;\r\nEnd;\r\n\r\nIF (versionIndex < approvalIndex);\r\n\tversionFirst = 'Y';\r\nEndif;\r\n\r\n#*Update RD cell security cubes\r\nIF (CubeExists(cIMRDCLSCube) >0);\r\nvTotalGroups = DIMSIZ(cGroupsDim);\r\nvGroupLooper = 1;\r\nWhile (vGroupLooper <= vTotalGroups);\r\n\tvGroup = DIMNM(cGroupsDim, vGroupLooper);\r\n\r\n\tvTotalNodes = SubsetGetSize(pApprovalDim, pUpdateSubset);\r\n\tvNodeLooper = 1;\r\n\tWhile (vNodeLooper <= vTotalNodes);\r\n\t\tvApprovalNode = SubsetGetElementName(pApprovalDim, pUpdateSubset, vNodeLooper);\r\n\t\tvFinalCellSecurity ='NONE';\r\n\r\n\t\tIF (versionIndex >0);\r\n\t\t\tvTotalVersions = DIMSIZ(pVersionDim);\r\n\t\t\tvVersionLooper = 1;\r\n\t\t\tWhile (vVersionLooper <= vTotalVersions);\r\n\t\t\t\tvVersion = DIMNM(pVersionDim, vVersionLooper);\r\n\t\t\t\tIF (approvalIndex >0)\t;\t\r\n\t\t\t\t\tIF (versionFirst @= 'Y');\r\n\t\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube, vVersion, vApprovalNode, vGroup,cAllApplications,'Rights' );\r\n\t\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube, vVersion, vApprovalNode,vGroup,cAllApplications, 'StaticRights');\r\n\t\t\t\t\t\tIF (vFinalCellSecurity @<> vCurrentCellSecurity);\r\n\t\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube, vVersion, vApprovalNode,vGroup,cAllApplications, 'StaticRights');\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications, 'Rights' );\r\n\t\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications, 'StaticRights');\r\n\t\t\t\t\t\tIF (vFinalCellSecurity @<> vCurrentCellSecurity);\r\n\t\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube, vApprovalNode, vVersion,vGroup,cAllApplications,'StaticRights');\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube,vVersion, vGroup,cAllApplications, 'Rights' );\r\n\t\t\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube,vVersion, vGroup,cAllApplications,'StaticRights' );\r\n\t\t\t\t\tIF (vFinalCellSecurity @<>vCurrentCellSecurity);\r\n\t\t\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube,vVersion, vGroup,cAllApplications, 'StaticRights');\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tEndif;\r\n\t\t\t\tvVersionLooper = vVersionLooper +1;\r\n\t\t\tEnd;\r\n\r\n\t\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\t\tvFinalCellSecurity=CellGetS(cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'Rights' );\r\n\t\t\tvCurrentCellSecurity = CellGetS(cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'StaticRights');\r\n\t\t\tIF (vFinalCellSecurity @<>vCurrentCellSecurity);\r\n\t\t\t\tCellPutS(vFinalCellSecurity, cIMRDCLSCube,vApprovalNode, vGroup,cAllApplications, 'StaticRights');\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\t\tvNodeLooper = vNodeLooper  +1;\t\t\r\n\tEnd;\r\n\tvGroupLooper = vGroupLooper +1;\r\nEnd;\r\n\r\nEndif;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pGroupsDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_access_to_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_set_access_to_cube';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pSourceFile, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\nTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\nTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\nTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#*** Check TM1 security right\r\n\r\ncAdmin = 'ADMIN';\r\ncLock = 'LOCK';\r\ncReserve = 'RESERVE';\r\ncWrite = 'WRITE';\r\ncRead = 'READ';\r\ncNone = 'NONE';\r\n\r\nvRight = '';\r\nIf (pRight @= cAdmin);\r\nvRight = cAdmin;\r\nElseIf (pRight @= cLock);\r\nvRight = cLock;\r\nElseIf (pRight @= cReserve);\r\nvRight = cReserve;\r\nElseIf (pRight @= cWrite);\r\nvRight = cWrite;\r\nElseIf (pRight @= cRead);\r\nvRight = cRead;\r\nElseIf (pRight @= cNone);\r\nvRight = cNone;\r\nElse;\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n'pGuid', pExecutionId,\r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_WRONG_PERMISSION',\r\n'pErrorDetails', pRight | ', ' | pCube,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncCubeSecurityCube = '}CubeSecurity';\r\ncDimensionSecurityCube = '}DimensionSecurity';\r\ncElementAttributesPrefix = '}ElementAttributes_';\r\n\r\nCellPutS(vRight, cCubeSecurityCube, pCube, varGroup);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <> 0);\r\nvDim = TABDIM(pCube, vIndex);\r\n\r\nIf (vDim @<> '' & vRight @<> cNone);\r\n\r\nCellPutS(cRead, cDimensionSecurityCube, vDim, varGroup);\r\nvElementAttributes = cElementAttributesPrefix | vDim;\r\nIf (DimensionExists(vElementAttributes) <> 0);\r\nCellPutS(cRead, cDimensionSecurityCube, cElementAttributesPrefix | vDim, varGroup);\r\nEndIf;\r\nIf (CubeExists(vElementAttributes) <> 0);\r\nCellPutS(cRead, cCubeSecurityCube, cElementAttributesPrefix | vDim, varGroup);\r\nEndIf;\r\n\r\nEndIf;\r\n\r\nIf (vDim @<> '');\r\nvIndex = vIndex + 1;\r\nElse;\r\nvIndex = 0;\r\nEndIf;\r\nEnd;\r\n\r\n\r\n",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pRight",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "varGroup",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_access_to_cubes",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_set_access_to_cubes';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pSourceFile, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\nTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\nTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\nTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_set_access_to_cube', \r\n'pExecutionId', pExecutionId, \r\n'pCube', varCube,\r\n'pRight', varRight,\r\n'pSourceFile', pSecondSourceFile,\r\n'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSecondSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "varCube",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varRight",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_app_user_preference",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_set_app_user_preference';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\ncGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\ncGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\npExecutionId, pApplicationId, pPreferenceTag, pValue, pControl);\r\nEndIf;\r\n\r\nCellPutS(pValue, '}tp_app_user_preferences', TM1User(), pApplicationId, pPreferenceTag);\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApplicationId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pPreferenceTag",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pValue",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_dr_capabilities",
    "HasSecurityAccess": false,
    "PrologProcedure": "cControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\n#Grant DataReservation capabilities to the tp_everyone group\r\n\r\ncCapabilityCube = '}Capabilities';\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Grant', cCapabilityCube, 'ManageDataReservation', 'EXECUTE', cCognosEveryoneGroup);\r\n\tCellPutS('Grant', cCapabilityCube, 'DataReservationOverride', 'EXECUTE', cCognosEveryoneGroup);\r\nElse;\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Grant', cCapabilityCube, 'ManageDataReservation', 'EXECUTE', cTpEveryoneGroup);\r\n\tCellPutS('Grant', cCapabilityCube, 'DataReservationOverride', 'EXECUTE', cTpEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_running_maintenance",
    "HasSecurityAccess": false,
    "PrologProcedure": "cControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncServerMaintenanceRunning = 'ApplicationMaintenanceRunning';\r\nIf (pValue @= 'Y');\r\n\tvRunningMaintenanceMode = ATTRS(cConfigDim, cServerMaintenanceRunning, 'String Value');\r\n\tIf (vRunningMaintenanceMode @= 'Y');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', 'tp_set_running_maintenance', \r\n\t\t\t\t'pErrorCode', 'TI_ATTR_ALREADY_SET',\r\n\t\t\t\t'pErrorDetails', 'ApplicationMaintenanceRunning',\r\n\t\t\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\t\r\n\r\nAttrPutS(pValue, cConfigDim, cServerMaintenanceRunning, 'StringValue');\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pValue",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_state_reviewers",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_set_state_reviewers';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pControl, pAppId);\r\nEndIf;\r\n\r\n\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncPermissionsSecurityCube = '}CellSecurity_}tp_application_permission}'|pAppId;\r\ncStateCube = '}tp_application_state}'|pAppId;\r\ncGroupsDimension = '}Groups';\r\nvGroupsSize = DIMSIZ(cGroupsDimension);\r\n\r\ncApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cApprovalDimSize);\r\n\tcNodeId = DIMNM(cShadowApprovalDim, vIndex);\r\n\tcReviewer = '';\r\n\tvGroupIndex = 1;\r\n\tWhile (vGroupIndex <= vGroupsSize & cReviewer @= '');\r\n\t\tcGroupId = DIMNM(cGroupsDimension, vGroupIndex);\r\n\t\tvPermValue = CellGetS(cPermissionsSecurityCube, cNodeId, 'REJECT', cGroupId);\r\n\t\tIf (vPermValue @= 'READ');\r\n\t\t\tcReviewer = cGroupId; \r\n\t\tEndIf;\r\n\t\tvGroupIndex = vGroupIndex + 1;\r\n\tEnd;\r\n\tCellPutS(cReviewer, cStateCube, cNodeId, 'Reviewer'); \r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n  \r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_state_reviewers_all",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_set_state_reviewers_all';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pControl);\r\nEndIf;\r\n\r\n\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\n\r\ncAppsDimSize = DIMSIZ(cApplicationsDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cAppsDimSize);\r\n\tcAppId = DIMNM(cApplicationsDim, vIndex);\r\n\tcVersion = ATTRS(cApplicationsDim, cAppId, 'Version');\r\n\tcApproval = ATTRS(cApplicationsDim, cAppId, 'ApprovalDimension');\r\n\tIf (cVersion @= '10.2.2' & cApproval @<> '');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set reviewers for app:',\r\n\t\t\tcAppId);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_set_state_reviewers',\r\n\t\t\t'pExecutionId', pExecutionId, 'pAppId', cAppId, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n  \r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_set_system_config",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2009, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\nvDimension =cControlPrefix | 'tp_system_config';\r\nvAttrConfigValue='ConfigValue';\r\n\r\nIF ( DimensionExists ( vDimension ) = 0 );\r\n  \tDimensionCreate(vDimension);\r\nENDIF;\r\n\r\nAttrInsert(vDimension, '', vAttrConfigValue, 'S');\r\n\t\r\nDimensionDeleteAllElements(vDimension);\r\nDimensionElementInsert(vDimension, '', 'IntegratedSecurityMode', 'S');\r\nDimensionElementInsert(vDimension, '', 'AdminHost', 'S');\r\nDimensionElementInsert(vDimension, '', 'ServerCAMURI', 'S');\r\nDimensionElementInsert(vDimension, '', 'ClientCAMURI', 'S');\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2009, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nAttrPutS(pIntegratedSecurityMode, vDimension, 'IntegratedSecurityMode', vAttrConfigValue);\r\nAttrPutS(pAdminHost, vDimension, 'AdminHost', vAttrConfigValue);\r\nAttrPutS(pServerCAMURI, vDimension, 'ServerCAMURI', vAttrConfigValue);\r\nAttrPutS(pClientCAMURI, vDimension, 'ClientCAMURI', vAttrConfigValue);\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pIntegratedSecurityMode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAdminHost",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pServerCAMURI",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pClientCAMURI",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_setup_application_dr",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Parameters:', \r\npExecutionId, pAppId, pEnable, pControl);\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Check application id', pAppId);\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#Set '}CubeProperties' data reservation flag\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = totalCubes;\r\ncCubePropertiesCube = '}CubeProperties';\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\n#clear existing cube flags in case this is a redeployment\r\nWhile (indexCube >= 1);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf ((cApprovalDIM @= '' & cIsAppCube @= 'Y') % cIsAppCube @= 'A');\r\n\r\n\t\t#Decide the final DR mode on this cube\r\n\t\tvAppLooper = 1;\r\n\t\tvIsOtherAppCube = '';\r\n\t\tvAppDimension = '}tp_applications';\r\n\t\tvTotalApps = DIMSIZ(vAppDimension);\r\n\t\tvNewDRMode = '';\r\n\t\tWhile (vAppLooper <= vTotalApps);\r\n\t\t\tvOtherAppId = DIMNM(vAppDimension, vAppLooper);\r\n\t\t\tvIsOtherAppCube = CellGetS(cApplicationCubesCube, vOtherAppId, cCubeName);\r\n\t\t\tvOtherAppActive = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'IsActive'); \r\n\t\t\tvOtherAppApprovalDim = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'ApprovalDimension'); \r\n\t\t\tIF (vIsOtherAppCube @= 'A' );\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvNewDRMode = ' REQUIREDSHARED';\r\n\t\t\t\tEndif;\r\n \t\t\tElseif (vIsOtherAppCube @='Y' & vOtherAppApprovalDim @='');\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvNewDRMode =  'ALLOWED';\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\r\n\t\t\tvAppLooper = vAppLooper +1;\r\n\t\tEnd;\r\n\t\tCellPutS(vNewDRMode, cCubePropertiesCube, cCubeName, 'DATARESERVATIONMODE');\r\n\r\n\tEndIf;\r\n\t\r\n\tindexCube = indexCube - 1;\r\nEnd;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pEnable",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =  ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncControlDimOld = ATTRS('}tp_applications', pAppId,  'VersionDimensionOld');\r\n\r\ncWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');\r\ncWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');\r\ncReadableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesReadOld');\r\ncReadableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesRead');\r\n\r\n#*** Check if a new version dimension is added.\r\nseIsNewVersionDimensionAdded = 'N';\r\nIF (cControlDimOld @='' & cControlDim @<> '');\r\nseIsNewVersionDimensionAdded = 'Y';\r\nEndif;\r\n\r\n#if a new version dimension is added, we need to recreate security overlay cubes with added dimension\r\nIF (seIsNewVersionDimensionAdded @= 'Y');\r\n\tvReturnValue = ExecuteProcess('}tp_update_application_cubes_pre', 'pExecutionId', pExecutionId, 'pAppId', pAppId);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncApplicationCubesCube = '}tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\tIf (cIsAppCube @= 'A');\r\n\r\n\t\tIF (seIsNewVersionDimensionAdded @= 'Y');\r\n\t\t\t#IF a new version demension is added, we need to remove all DRs from the data cube\r\n\t\t\tvDimIndex = 1;\r\n\t\t\tvAddress = '';\r\n\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\tIf (vDimIndex = 1);\r\n\t\t\t\t\tvAddress = '';\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvAddress = vAddress |  '|';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tEnd;\r\n\t\t\tCubeDataReservationReleaseAll(cCubeName,'',vAddress);\r\n\r\n\t\tEndif;\r\n\r\n\t\tIF (seIsNewVersionDimensionAdded @= 'N' & cControlDim @<> '' & (cWritableSlicesOld @='' & cReadableSlicesOld @=''));\r\n\t\t\t#This is an initial rights saving, do nothing here\r\n\t\tElse;\r\n\t\t\tIF (cWritableSlicesOld @<> cWritableSlicesNew);\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_update_application_DR', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\t#update security overlay cube with new writable slices\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_update_application_securityOverlay', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\tEndIf;\r\n\r\n\tindexCube = indexCube +1;\r\nEnd;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application_cubes",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\n#***\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ncCubePropertiesCube = '}CubeProperties';\r\n\r\n#***\r\ncDataReservationType = '';\r\nIf (cAppActive @= 'Y');\r\n\tcDataReservationType = 'REQUIREDSHARED';\r\n\tIf (cApprovalDIM @= '');\r\n\t\tcDataReservationType = 'ALLOWED';\r\n\tEndIf;\r\nEndIf;\r\n\r\n# parse application cube string and set values in application cubes and set DR mode\r\ncubeSeparater = '*';\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nvFirstElement = 1;\r\n\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' CubeName=' | vCubeName | ' Flag=' | vFlagCube);\r\n\tEndIf;\r\n\t\r\n\tIf (pIsAddedCube @= 'Y');\r\n\t\tIf (vFlagCube @= 'A' % cApprovalDIM @= '') ;\r\n\t\t\tIF (cDataReservationType @<> '');\r\n\t\t\t\t# set DR mode when it has a valide mode type, otherwise do not overide other application's valid DR mode\r\n\t\t\t\tCellPutS(cDataReservationType, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\t\t\tEndif;\r\n\t\tEndIf;\r\n\r\n\t\tCellPutS(vFlagCube, cApplicationCubesCube, pAppId, vCubeName);\r\n\tElse;\r\n\t\t#this is a cube that is removed from the application definition\r\n\t\tCellPutS('', cApplicationCubesCube, pAppId, vCubeName);\r\n\tEndif;\r\n\t\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeInfo",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIsUpgrade",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pIsAddedCube",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application_cubes_pre",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters', pExecutionId, pAppId);\r\nEndIf;\r\n\r\n\r\n#*** Get application info\r\ncApprovalDIM = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS('}tp_applications', pAppId, 'IsActive'); \r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionDimOld = ATTRS('}tp_applications', pAppId, 'VersionDimensionOld');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\n\r\n#*** Check if a new version dimension is added.\r\nseIsNewVersionDimensionAdded = 'N';\r\nIF (cVersionDimOld @='' & cVersionDim @<> '');\r\n\tseIsNewVersionDimensionAdded = 'Y';\r\nEndif;\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Version dimension is added in redeployment');\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n#*** Export security overlay cube data, destroy and recreate security overlay cubes\r\nNumericGlobalVariable('gDim_1IndexInCube');\r\nNumericGlobalVariable('gDim_2IndexInCube');\r\nNumericGlobalVariable('gDim_3IndexInCube');\r\nStringGlobalVariable('gSecurityOverlayTokenString');\r\nStringGlobalVariable('gImportPattern');\r\n\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tcApplicationCubesCube = '}tp_application_cubes';\r\n\tsCubesDim = '}Cubes';\r\n\tcCubesDimSize = DIMSIZ(sCubesDim);\r\n\tvIndex = 1;\r\n\r\n\tWhile (vIndex <= cCubesDimSize);\r\n\t\tvCubeName = DIMNM(sCubesDim, vIndex);\r\n\t\tvFlagCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\t    \tvSecurityOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tIf (CubeExists(vSecurityOverlayCube) = 0);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vCubeName, 'pDim_1', cVersionDim, 'pDim_2', cApprovalDIM);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tvVersionIndexInCube = gDim_1IndexInCube;\r\n\t\t\tvApprovalIndexInCube = gDim_2IndexInCube;\r\n\t\t\tvSecurityOverlayTokenString = gSecurityOverlayTokenString;\r\n\t\t\t\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vSecurityOverlayCube, 'pDim_1', cVersionDim);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tvVersionIndexInSecurityOverlayCube = gDim_1IndexInCube;\r\n\t\t\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t'cube: ' | vCubeName, 'dim: ' | cVersionDim, 'index in cube: ' | NumberToString(vVersionIndexInCube), 'index in security overlay cube: ' | NumberToString(vVersionIndexInSecurityOverlayCube));\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tIf (vVersionIndexInCube > 0 & vVersionIndexInSecurityOverlayCube = 0);\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | vCubeName,\r\n\t\t\t\t\t'pCube', vSecurityOverlayCube, 'pBlob', vSecurityOverlayCube | '_' | pExecutionId, 'pAlt', 'Y');\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tSecurityOverlayDestroyGlobalDefault(vCubeName);\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_deploy_create_security_overlay_cube', 'pExecutionId',pExecutionId, 'pAppId', pAppId, 'pCubeName',vCubeName );\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncTM1Log = cEpilogLog;\r\n\r\n\r\n#*** Import security overlay cube data.\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\r\n\tcCubesDimSize = DIMSIZ(sCubesDim);\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cCubesDimSize);\r\n\t\tvCubeName = DIMNM(sCubesDim, vIndex);\r\n\t\tvFlagCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\t\t\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tvSecurityOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\n\t\t\tIf (CubeExists(vSecurityOverlayCube) = 0);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvSecurityOverlayBlb = vSecurityOverlayCube | '_' | pExecutionId | '.blb';\r\n\t\t\tIf (FileExists(vSecurityOverlayBlb) = 1);\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Find security overlay import file: ' | vSecurityOverlayBlb);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vSecurityOverlayCube, 'pDim_1', cVersionDim);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvVersionIndexInSecurityOverlayCube = gDim_1IndexInCube;\r\n\t\t\t\tvImportPatternForSecurityOverlayCube = gImportPattern;\r\n\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Version index in security overlay cube: ' | NumberToString(vVersionIndexInSecurityOverlayCube),\r\n\t\t\t\t\t\t'Import pattern for security overlay cube: ' | vImportPatternForSecurityOverlayCube);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_import_cube', 'pExecutionId', pExecutionId | vCubeName,\r\n\t\t\t\t\t'pCube', vSecurityOverlayCube, 'pSourceFile', vSecurityOverlayBlb, 'pSlicer', vImportPatternForSecurityOverlayCube);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Cannot find security overlay import file: ' | vSecurityOverlayBlb);\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application_DR",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncShadowApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');\r\ncWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');\r\ncStateCube = '}tp_application_state}' | pAppId;\r\ncNodeInfoDim = '}tp_node_info';\r\ncStateField = 'State';\r\ncOwnerIdField = 'CurrentOwnerId';\r\ncOwnershipNodeField = 'TakeOwnershipNode';\r\nvSingleQ = '''';\r\n\r\nIF (cWritableSlicesOld @<> cWritableSlicesNew);\r\n\tvMdx = '{FILTER([' | cShadowApprovalDim | '].MEMBERS, [' | cStateCube | '].[' | cNodeInfoDim | '].[' | cStateField | '] =' | vSingleQ | '2' | vSingleQ | ')}';\r\n\tvSubsetOwnedNodes = 'tp_temp_owned_nodes';\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetOwnedNodes) =1);\r\n\t\tSubsetDestroy(cShadowApprovalDim,vSubsetOwnedNodes);\r\n\tEndif;\r\n\r\n\tSubsetCreateByMdx(vSubsetOwnedNodes, vMdx, cShadowApprovalDim);\r\n\r\n\tvTotalOwnedNodes = SubsetGetSize(cShadowApprovalDim,vSubsetOwnedNodes );\r\n\r\n\tvLooper =1 ;\r\n\r\n\tWhile (vLooper <= vTotalOwnedNodes);\r\n\t\tvOwnedNode = SubsetGetElementName(cShadowApprovalDim, vSubsetOwnedNodes, vLooper);\r\n\t\tIF (DTYPE(cShadowApprovalDim, vOwnedNode) @<> 'C');\r\n\r\n\t\t\tvOwner = CellGetS(cStateCube, vOwnedNode, cOwnerIdField);\r\n\t\t\tvOwnershipNode = CellGetS(cStateCube, vOwnedNode, cOwnershipNodeField);\r\n\t\t\t#First release all old DRs on old control slices\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDim, 'pNode', vOwnershipNode,  'pReserve', 'N', \r\n\t\t\t\t'pUser', vOwner, 'pControlDim', cControlDim, 'pControlWritableSlices', cWritableSlicesOld );\r\n\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'DR released on node: ' | vOwnedNode | ', user: ' | vOwner | ', cube: ' | pCube);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#Next reacquire new DRs on new control slices\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDim, 'pNode', vOwnershipNode,  'pReserve', 'Y', \r\n\t\t\t\t'pUser', vOwner, 'pControlDim', cControlDim, 'pControlWritableSlices', cWritableSlicesNew );\r\n\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'DR reacquired on node: ' | vOwnedNode | ', user: ' | vOwner | ', cube:' | pCube);\r\n\t\t\tEndIf;\r\n\r\n\t\tEndif;\r\n\t\tvLooper = vLooper +1;\r\n\tEnd;\r\n\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetOwnedNodes) =1);\r\nSubsetDestroy(cShadowApprovalDim,vSubsetOwnedNodes);\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application_RDCS_cubes",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',pExecutionId, pAppId, pCubeInfo,pNode, pGroup, pRights);\r\nEndIf;\r\n\r\n\r\n#*Update RD cell security cubes\r\ncubeSeparater = '*';\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nvFirstElement = 1;\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Update RDSC cubes  pAppId=' | pAppId |\r\n\t\t\t ' CubeName=' | vCubeName | ' Node Name =' | pNode | ' GroupName= ' | pGroup|  ' Rights=' | pRights );\r\n\tEndIf;\r\n\t\r\n\tIf (vFlagCube @= 'A' );\r\n\r\n\t\tversionIndex = 0;\r\n\t\tapprovalIndex = 0;\r\n\t\tdimensionIndex = 1;\r\n\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\tcCubeDimensionName = TABDIM(vCubeName, dimensionIndex);\r\n\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\tdimensionIndex = -1;\r\n\t\t\tElse;\r\n\r\n\t\t\t\tIF (cCubeDimensionName @=pVersionDim);\r\n\t\t\t\t\tversionIndex = dimensionIndex;\r\n\t\t\t\tEndif;\r\n\t\t\t\t\r\n\t\t\t\tIF (cCubeDimensionName @= pApprovalDim );\r\n\t\t\t\t\tapprovalIndex =dimensionIndex ;\r\n\t\t\t\tEndif;\r\n\r\n\t\t\tEndIf;\r\n\r\n\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\tEnd;\r\n\t\tIF (versionIndex < approvalIndex);\r\n\t\t\tversionFirst = 'Y';\r\n\t\tendif;\r\n\r\n\r\n\t\t#***start\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = pVersionSlicesWrite;\r\n\t\tIF (pVersionSlicesWrite @<> '');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\tElse;\r\n\t\t\tvPosVersion = 1;\r\n\t\tEndif;\r\n\r\n\t\tWhile (vPosVersion >0);\r\n\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\t\t\t#***start\r\n\t\t\t#cIMAppDim =  '}tp_intermediate_security_applications';\r\n\t\t\tcIMRDCLSCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\n\t\t\t#cIMMeasuresDim = '}tp_intermediate_security_measures';\r\n\t\r\n\t\t\tIF (CubeExists(cIMRDCLSCube) >0);\r\n\t\t\t\tIF (versionIndex >0 & approvalIndex >0);\r\n\t\t\t\t\tIF (versionFirst @= 'Y');\r\n\t\t\t\t\t\tCellPutS('', cIMRDCLSCube, vVersionSlice, pNode,pAppId, pGroup,'Rights' );\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tCellPutS('', cIMRDCLSCube, pNode, vVersionSlice,pAppId, pGroup,'Rights' );\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tElseif (versionIndex >0 & approvalIndex =0);\r\n\t\t\t\t\tCellPutS('', cIMRDCLSCube, vVersionSlice, pAppId, pGroup,'Rights' );\r\n\t\t\t\tElseIf (versionIndex = 0 & approvalIndex >0);\r\n\t\t\t\t\tCellPutS('', cIMRDCLSCube, pNode, pAppId, pGroup,'Rights' );\r\n\t\t\t\tEndif;\r\n\r\n\t\t\tEndif;\r\n\r\n\t\tEnd;\r\n\r\n\tEndIf;\r\n\t\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCubeInfo",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesWrite",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pVersionSlicesRead",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "node name",
        "TYpe": "String"
      },
      {
        "Name": "pGroup",
        "Prompt": "",
        "Value": "group name",
        "TYpe": "String"
      },
      {
        "Name": "pRights",
        "Prompt": "",
        "Value": "security rights",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_application_securityOverlay",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncShadowApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');\r\ncWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');\r\ncStateCube = '}tp_application_state}' | pAppId;\r\ncNodeInfoDim = '}tp_node_info';\r\ncStateField = 'State';\r\ncOwnerIdField = 'CurrentOwnerId';\r\ncOwnershipNodeField = 'TakeOwnershipNode';\r\nvSingleQ = '''';\r\n\r\nIF (cWritableSlicesOld @<> cWritableSlicesNew);\r\n\tvMdx = '{FILTER([' | cShadowApprovalDim | '].MEMBERS, [' | cStateCube | '].[' | cNodeInfoDim | '].[' | cStateField | '] =' | vSingleQ | '4' | vSingleQ | ')}';\r\n\tvSubsetLockedNodes = 'tp_temp_locked_nodes';\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetLockedNodes) =1);\r\n\t\tSubsetDestroy(cShadowApprovalDim,vSubsetLockedNodes);\r\n\tEndif;\r\n\r\n\tSubsetCreateByMdx(vSubsetLockedNodes, vMdx, cShadowApprovalDim);\r\n\r\n\tvTotalLockedNodes = SubsetGetSize(cShadowApprovalDim,vSubsetLockedNodes );\r\n\r\n\tvLooper =1 ;\r\n\r\n\tWhile (vLooper <= vTotalLockedNodes);\r\n\t\tvLockedNode = SubsetGetElementName(cShadowApprovalDim, vSubsetLockedNodes, vLooper);\r\n\r\n\t\t#now update security overlay cube\r\n\t\t#first remove all locks on old slices\r\n\t\t#then apply locks on new slices\r\n\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDIM, 'pNode', vLockedNode, \r\n\t\t\t'pLock', 'N', 'pControlDim', cControlDim, 'pControlWritableSlices',cWritableSlicesOld );\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Lock removed on node: ' | vLockedNode | ', cube: ' | pCube);\r\n\t\tEndIf;\r\n\r\n\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDIM, 'pNode', vLockedNode, \r\n\t\t\t'pLock', 'Y', 'pControlDim', cControlDim, 'pControlWritableSlices',cWritableSlicesNew );\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Lock re-acquired on node: ' | vLockedNode | ', cube:' | pCube);\r\n\t\tEndIf;\r\n\r\n\r\n\t\tvLooper = vLooper +1;\r\n\tEnd;\r\n\r\nEndif;\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLockedNodes) =1);\r\nSubsetDestroy(cShadowApprovalDim,vSubsetLockedNodes);\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_ownership",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuid,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pGuid, pAppId,  pControl);\r\nEndIf;\r\n\r\n#*** Check application\r\n\r\ncApplicationsDim = cControlPrefix |  'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, cApplicationsDim | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', pAppId, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, pAppId | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check State cube\r\nvStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nvNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\nIf (CubeExists(vStateCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', vStateCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | vStateCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#* Check permission cube\r\ncPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\ncCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\nIf (CubeExists(cPermissionCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | cPermissionCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cCellSecurityCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | cCellSecurityCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#* Get Approval dimension and subset\r\n\r\n#*** declare global variables\r\n\r\nvApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', vApprovalDim, cApprovalSubset, cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\nvSubset = 'currentOwner_' | pGuid;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n\r\nvDummyNode = DIMNM(cShadowApprovalDim, 1);\r\n#If a mdx returns zero item, SubsetCreateByMdx will throw an error, add the first element as a dummy member\r\nvMDX = '{ FILTER ( [' | cShadowApprovalDim | '].Members, [' | vStateCube | '].( [' | vNodeInfoDim | '].[CurrentOwner] ) <> \"\" ), [' | cShadowApprovalDim | '].['\r\n\t| vDummyNode | ']} ';\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Mdx to get nodes with current owner: ' | vMDX);\r\nEndIf;\r\nsubsetCreateByMdx(vSubset, vMDX);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pGuid,\r\n'pDim',cShadowApprovalDim, 'pSubset', vSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvSubsetSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\nlooper =vSubsetSize;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'subset Size: ' | NumberToString(vSubsetSize));\r\nEndIf;\r\n\r\nvConsolidationOwnershipNodeDim = 'tp_temp_consolidation_ownership_node_' | pGuid;\r\nvConsolidationOwnershipIdDim = 'tp_temp_consolidation_ownership_id_' | pGuid;\r\n\r\nvDummyCount =0;\r\nWHILE (looper >=1);\r\n\tvOwner = '';\r\n\tvNode = '';\r\n\tvNode = SubsetGetElementName (cShadowApprovalDim, vSubset, looper);\r\n\t\r\n\t#***Need to take care of dummy member\r\n\t\r\n\tIF (vNode @= vDummyNode);\r\n\t\tvDummyCount = vDummyCount +1;\r\n\t\t#***If dummy node shows up more than once, it is also a real one\r\n\t\tIF (vDummyCount >1);\r\n\t\t\tvOwner = CellGetS(vStateCube, vNode, 'CurrentOwner');\r\n\t\t\tvCurrentOwnerId = CellGetS(vStateCube, vNode, 'CurrentOwnerId');\r\n\t\tENDIf;\r\n\t\r\n\tELSE;\r\n\t\tvOwner = CellGetS(vStateCube, vNode, 'CurrentOwner');\r\n\t\tvCurrentOwnerId = CellGetS(vStateCube, vNode, 'CurrentOwnerId');\r\n\tENDIF;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'node: ' | vNode);\r\n\t\tTextOutput(cTM1Log, 'Current Owner: ' | vOwner);\r\n\tENDIF;\r\n\t\r\n\tIF (DIMIX('}Clients', vOwner) = 0);\r\n\t\t#***Node owner doesn't exist in }Clients dimension any more\r\n\t\t#***Reset currentOwner field,\r\n\t\t#***we need a separate TI to take care of ownership whose owner has been deleted\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Current Owner: ' | vOwner | ' does not exist.');\r\n\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\tENDIF;\r\n\t\tIf (CellIsUpdateable(vStateCube, vNode, 'State') = 0);\r\n\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pGuid, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\t\r\n\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwnerId') = 0);\r\n\t\t\tvDetail=INSRT('CurrentOwnerId',')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pGuid, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\r\n\tElseIf (DTYPE(cShadowApprovalDim, vNode) @= 'N');\r\n\t\r\n\t\t#***If leaf node: need to revoke ownership as well as clear currentOwer in state cube\r\n\t\r\n\t\tStringGlobalVariable('gEdit');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t'pGuid', pGuid, 'pApplication', pAppId, 'pNode', vNode, 'pUser', vOwner, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (gEdit @= 'F');\r\n\t\r\n\t\t\t#*** Clear Reservation approval node slice using TM1 data reservation\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pGuid, \r\n\t\t\t\t'pAppId', pAppId, 'pNode', vNode, 'pApprovalDim', vApprovalDim, 'pReserve', 'N', 'pUser', vCurrentOwnerId, 'pControl', pControl);\r\n\t\t\t\t\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwner') = 0);\r\n\t\t\t\tvDetail=INSRT('CurrentOwner',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\t\t\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwnerId') = 0);\r\n\t\t\t\tvDetail=INSRT('CurrentOwnerId',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'No edit permission. The ownership of ' | vNode | ' is revoked from user ' | vOwner);\r\n\t\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\t\tENDIF;\r\n\r\n\t\t\t# Put TakeOwnershipNode in temp dimension\r\n\t\t\tvTakeOwnershipNode = CellGetS(vStateCube, vNode, 'TakeOwnershipNode');\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'TakeOwnershipNode') = 0);\r\n\t\t\t\tvDetail=INSRT('TakeOwnershipNode',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'TakeOwnershipNode');\r\n\t\t\tIf (vTakeOwnershipNode @<> vNode);\r\n\t\t\t\tIf (DTYPE(cShadowApprovalDim, vTakeOwnershipNode) @<> 'C');\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (DimensionExists(vConsolidationOwnershipNodeDim) = 0);\r\n\t\t\t\t\tDimensionCreate(vConsolidationOwnershipNodeDim);\r\n\t\t\t\t\tDimensionCreate(vConsolidationOwnershipIdDim);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (DIMIX(vConsolidationOwnershipNodeDim, vTakeOwnershipNode) = 0 & vCurrentOwnerId @<> '');\r\n\t\t\t\t\tDimensionElementInsert(vConsolidationOwnershipNodeDim, '', vTakeOwnershipNode, 'S');\r\n\t\t\t\t\tDimensionElementInsert(vConsolidationOwnershipIdDim, '', vTakeOwnershipNode | '}' | vCurrentOwnerId, 'S');\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\tEndIf;\r\n\t\r\n\tElse;\r\n\t\r\n\t\t#***If consolidated node: clear currentOwer in state cube, we don't set owner on a consolidated node\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\tENDIF;\r\n\t\r\n\tEndIf;\r\n\t\r\n\tlooper = looper -1 ;\r\n\r\nEND;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIf (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nEndIf;\r\n\r\nIf (DimensionExists(vConsolidationOwnershipNodeDim) = 1);\r\n\tDimensionDestroy(vConsolidationOwnershipNodeDim);\r\nEndIf;\r\n\r\nIf (DimensionExists(vConsolidationOwnershipIdDim) = 1);\r\n\tDimensionDestroy(vConsolidationOwnershipIdDim);\r\nEndIf;\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_planning_rights",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_update_state_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuid,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalSubset, cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW,'\\Y \\M \\d - \\h:\\i:\\s'), 'Parameters:', pGuid, pAppId,  pControl);\r\nEndIf;\r\n\r\n#*** Check application\r\n\r\ncApplicationsDim = cControlPrefix |  'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n'pErrorDetails', cApplicationsDim, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, cApplicationsDim | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n'pErrorDetails', pAppId, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, pAppId | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check State cube\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n'pErrorDetails', cStateCube, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Cube ' | cStateCube | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\n\r\n#***Check invalid node states\r\n\r\n#***States\r\ncNotStarted= '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\nvLevel = 0;\r\nIf (pUpdateLeafState @= 'N');\r\nvLevel = 1;\r\nEndif;\r\n\r\nvSubset = 'nodes_in_level_' | pGuid;\r\nvReachTopLevel = 'F';\r\nWHILE (vReachTopLevel @= 'F');\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\n\tENDIF;\r\n\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL( TM1SUBSETALL( [' | cShadowApprovalDim | '] ), ' | NumberToString(vLevel) | '), \r\n\t\t[' | cShadowApprovalDim | '].[' | cApprovalSubset | '])}';\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Mdx to get nodes with level ' | numberToString(vLevel) | ' : ' | vMDX);\r\n\tENDIF;\r\n\tsubsetCreateByMdx(vSubset, vMDX, cShadowApprovalDim);\r\n\tvSubsetSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\n\r\n\tIF (vSubsetSize >0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pGuid,\r\n\t\t\t'pDim', cShadowApprovalDim, 'pSubset', vSubset);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIF;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'subset Size: ' | numbertostring(vSubsetSize) | ' for level: ' | NumberToString(vLevel));\r\n\tENDIF;\r\n\r\n\tIF (vSubsetSize = 0);\r\n\r\n\t\tIF (vLevel >= 20);\r\n\t\t\tvReachTopLevel = 'T';\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, ' Reach top level: ' | NumberToString(vLevel));\r\n\t\t\tENDIF;\r\n\t\tENDIF;\r\n\tELSE;\r\n\t\tvReachTopLevel = 'F';\r\n\t\tlooper =vSubsetSize;\r\n\t\tWHILE (looper >0);\r\n\t\t\tvNode = SubsetGetElementName (cShadowApprovalDim, vSubset, looper);\r\n\t\t\tvState = CellGetS(cStateCube, vNode, 'State');\r\n\r\n\t\t\tIf (vNode @<> '');\r\n\t\t\t\tif (CellIsUpdateable(cStateCube, vNode, 'State') = 0);\r\n\t\t\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIF (vNode @<>'' & vLevel = 0 & DTYPE(cShadowApprovalDim, vNode) @<> 'C');\r\n\r\n\t\t\t\tIF (vState @= '');\r\n\t\t\t\t\tCellPutS('0', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state from null to NotStarted 0' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tIF (vState @= cReady % vState @= cIncomplete);\r\n\t\t\t\t\tCellPutS('2', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state to WorkInProgress 2' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\tELSEIF (vNode @<>'' & vLevel >0 & DTYPE(cShadowApprovalDim, vNode) @= 'C');\r\n\t\t\t\tIF (vState @= '');\r\n\t\t\t\t\tCellPutS('0', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state from null to NotStarted 0' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tvChildrenSize = ELCOMPN(cShadowApprovalDim, vNode);\r\n\r\n\t\t\t\tvNotStartedCount = 0;\r\n\t\t\t\tvIncompleteCount = 0;\r\n\t\t\t\tvInProgressCount =0;\r\n\t\t\t\tvReadyCount =0;\r\n\t\t\t\tvLockedCount =0;\r\n\r\n\r\n\t\t\t\tlooper2 =1;\r\n\t\t\t\tWhile (looper2<=vChildrenSize);\r\n\t\t\t\t\tvChild = ELCOMP(cShadowApprovalDim, vNode, looper2);\r\n\t\t\t\t\tvChildState = CellGetS(cStateCube, vChild, 'State');\r\n\t\t\t\t\tIF (vChildState @= '0');\r\n\t\t\t\t\t\tvNotStartedCount = vNotStartedCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '1');\r\n\t\t\t\t\t\tvIncompleteCount = vIncompleteCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '2');\r\n\t\t\t\t\t\tvInProgressCount = vInProgressCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @='3');\r\n\t\t\t\t\t\tvReadyCount = vReadyCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '4');\r\n\t\t\t\t\t\tvLockedCount = vLockedCount +1;\r\n\t\t\t\t\tENDIF;\r\n\t\t\t\t\tlooper2 = looper2+1;\r\n\t\t\t\tEND;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'NotStartedCount: ' | NumberToString(vNotStartedCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'InCompleteCount: ' | NumberToString(vIncompleteCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'InProgressCount: ' | NumberToString(vInProgressCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'ReadyCount: ' | NumberToString(vReadyCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'LockedCount: ' | NumberToString(vLockedCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Current State: ' | vState);\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Current Node: ' | vNode);\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tvNewState = '';\r\n\t\t\t\t#***NotStarted for consolidated node: If all children are NotStarted, parent should be NotStarted\r\n\t\t\t\tIF (vNotStartedCount >0 & vInProgressCount =0 & vLockedCount =0 & vReadyCount =0 & vInCompleteCount =0);\r\n\t\t\t\t\tvNewState = cNotStarted;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to NotStarted 0.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***Incomplete for consolidated node: At least one of the items that makes up this e.List item\r\n\t\t\t\t#has not started or Incomplete and at least one other item has started\r\n\t\t\t\tELSEIF ((vNotStartedCount) >0 & (vInProgressCount >0 % vLockedCount >0  % vReadyCount>0 % vIncompleteCount >0));\r\n\t\t\t\t\tvNewState = cIncomplete;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Incomplete 1.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***#***Incomplete for consolidated node: At least one of the items that makes up this e.List item\r\n\t\t\t\t#has not started or Incomplete and at least one other item has started\r\n\t\t\t\tELSEIF (vIncompleteCount >0);\r\n\t\t\t\t\tvNewState = cIncomplete;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Incomplete 1.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***WorkInProgress for consolidated node: All items making up this e.List item have started (nothing notStarted or incomplete)\r\n\t\t\t\t#at least one item has not been submitted\r\n\t\t\t\tELSEIF ( vNotStartedCount =0 & vIncompleteCount=0 & (vInProgressCount +  vReadyCount) >0);\r\n\t\t\t\t\tvNewState = cWorkInProgress;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to WorkInProgress 2.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#Ready for consolidated node: All items making up this e.List item have been submitted\r\n\t\t\t\tELSEIF (vLockedCount >0 & vInProgressCount =0 & vNotStartedCount =0 & vReadyCount =0 & vIncompleteCount =0);\r\n\t\t\t\t\tvNewState = cReady;\r\n\t\t\t\t\tIF (vState @<> cReady & vState @<> cLocked);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Ready 3.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\tENDIF;\r\n\r\n\t\t\tlooper = looper -1;\r\n\t\tEND;\r\n\r\n\tENDIF;\r\n\r\n\tvLevel = vLevel +1;\r\nEND;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\nSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pGuid",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateLeafState",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_from_v10_1_to_v10_2",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2012\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\n\r\n#*** Add element: Offline to node info dimension\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Add element: Offline to node info dimension');\r\nEndIf;\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\nIf (DimensionExists(cNodeInfoDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncOffline = 'Offline';\r\ncCurrentOwner = 'CurrentOwner';\r\nIf (DIMIX(cNodeInfoDim, cOffline) = 0);\r\n\tDimensionElementInsert(cNodeInfoDim, cCurrentOwner, cOffline, 'S');\r\nEndIf;\r\n\r\n\r\n\r\n#*** Get approval dimension, approval subset and isActive\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Get approval dimension, approval subset and isActive');\r\nEndIf;\r\n\r\nStringGlobalVariable('gApprovalDim');\r\nStringGlobalVariable('gApprovalSubset');\r\nStringGlobalVariable('gIsActive');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId,\r\n\t'pAppId', pAppId, 'pControl',  pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', gApprovalDim, gApprovalSubset, gIsActive);\r\nEndIf;\r\n\r\n\r\n\r\n#*** Insert new attributes into applications dimension\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Insert new attributes into applications dimension');\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\n\r\ncApprovalShadowDimAttr = 'ApprovalShadowDimension';\r\ncVersionDimension = 'VersionDimension';\r\ncMaintenanceAttr = 'IsRunningMaintenance';\r\ncVersionSlicesWrite = 'VersionSlicesWrite';\r\ncVersionSlicesRead = 'VersionSlicesRead';\r\ncApplicationType = 'ApplicationType';\r\n\r\nIf (DimensionExists(cApplicationsDim) > 0);\r\n\t\r\n\tIf (DIMIX(cAppAttrDim, cMaintenanceAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cMaintenanceAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApprovalShadowDimAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApprovalShadowDimAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesWrite) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesWrite, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesRead) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesRead, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim,  cVersionDimension) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '',  cVersionDimension, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApplicationType) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApplicationType, 'S');\r\n\tEndIf;\r\n\t\r\n\tIf (subsetExists(cApplicationsDim, 'Default') = 0);\r\n\t\tSubsetCreate(cApplicationsDim, 'Default');\r\n\tEndIf;\r\n\t\r\n\tSubsetIsAllSet(cApplicationsDim, 'Default', 1);\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Create shadow dimension \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Create the shadow dimension of' | gApprovalDim);\r\nEndIf;\r\n\t\r\nvReturnValue = ExecuteProcess('}tp_deploy_create_shadow_dimension', 'pExecutionId', pExecutionId,\r\n\t'pAppId', pAppId, 'pApprovalDim', gApprovalDim, 'pApprovalSubset', gApprovalSubset, 'pSubsetAlias', pSubsetAlias);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Insert application ID to intermediate applications dim\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Insert current application id: ' | pAppId);\r\nEndIf;\r\n\r\ncIntermediateApplicationsDim =  '}tp_intermediate_security_applications';\r\ncParent = 'all_applications';\r\n\r\nIf (DIMIX(cIntermediateApplicationsDim, pAppId) = 0);\t\r\n\tDimensionElementInsert(cIntermediateApplicationsDim, '', pAppId, 'N');\r\n\tDimensionElementComponentAdd(cIntermediateApplicationsDim, cParent, pAppId, 1);\r\nEndIf;\r\n\r\n\r\n#*** Export control cubes and delete application control cubes \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Export control cubes and delete application control cubes');\r\nEndIf;\r\n\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncPermissionsDim = cControlPrefix | 'tp_permissions';\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\ncPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\ncCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\ncDefaultView = 'Default';\r\ncAllView = 'All';\r\n\r\nIf (CubeExists(cCellSecurityCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | cCellSecurityCube,\r\n\t\t'pCube', cCellSecurityCube, 'pBlob', cCellSecurityCube, 'pAlt', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy permission cell security cube: ' | cCellSecurityCube);\r\n\tEndIf;\r\n\t\r\n\tCubeDestroy(cCellSecurityCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cPermissionCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | cPermissionCube,\r\n\t\t'pCube', cPermissionCube, 'pBlob', cPermissionCube, 'pAlt', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy permission cube: ' | cPermissionCube);\r\n\tEndIf;\r\n\t\r\n\tCubeDestroy(cPermissionCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | cStateCube,\r\n\t\t'pCube', cStateCube, 'pBlob', cStateCube, 'pAlt', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy state cube: ' | cStateCube);\r\n\tEndIf;\r\n\t\r\n\tCubeDestroy(cStateCube);\r\nEndIf;\r\n\r\n\r\n#*** Recreate application control cubes\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Recreate application control cubes');\r\nEndIf;\r\n\r\nIf (CubeExists(cPermissionCube) = 0);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cube: ' | cPermissionCube);\r\n\tEndIf;\r\n\t\r\n\tCubeCreate(cPermissionCube, cShadowApprovalDim, cPermissionsDim);\r\n\tCubeSetLogChanges(cPermissionCube, 1);\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityCube) = 0);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cell security cube: ' | cCellSecurityCube);\r\n\tEndIf;\r\n\t\r\n\tCubeCreate(cCellSecurityCube, cShadowApprovalDim, cPermissionsDim, '}Groups');\r\n\tCubeSetLogChanges(cCellSecurityCube, 1);\r\nEndIf;\r\n\r\n\t\r\nIf (CubeExists(cStateCube) = 0);\t\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create state cube: ' | cStateCube);\r\n\tEndIf;\r\n\t\r\n\tCubeCreate(cStateCube, cShadowApprovalDim, cNodeInfoDim);\r\n\tCubeSetLogChanges(cStateCube, 1);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create default view');\r\n\tEndIf;\r\n\t\r\n\tViewCreate(cStateCube, cDefaultView);\r\n\tViewColumnDimensionSet(cStateCube, cDefaultView, cNodeInfoDim, 1);\r\n\tViewRowDimensionSet(cStateCube, cDefaultView, cShadowApprovalDim, 1);\r\n\tViewSubsetAssign(cStateCube, cDefaultView, cShadowApprovalDim, gApprovalSubset);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create All view');\r\n\tEndIf;\r\n\t\r\n\tViewCreate(cStateCube, cAllView);\r\n\tViewColumnDimensionSet(cStateCube, cAllView, cNodeInfoDim, 1);\r\n\tViewRowDimensionSet(cStateCube, cAllView, cShadowApprovalDim, 1);\t\r\nEndIf;\r\n\r\n\r\n#*** Export element security cube of approval dimension and destroy element security cube\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Export element security cube of approval dimension and destroy element security cube');\r\nEndIf;\r\n\r\ncElementSecurityCube = '}ElementSecurity_' | gApprovalDim;\r\n\r\nIf (CubeExists(cElementSecurityCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | cElementSecurityCube,\r\n\t\t'pCube', cElementSecurityCube, 'pBlob', cElementSecurityCube, 'pAlt', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy element security cube: ' | cElementSecurityCube);\r\n\tEndIf;\r\n\t\r\n\tCubeDestroy(cElementSecurityCube);\r\nElse;\r\n    If (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Element security cube does not exist: ' | cElementSecurityCube);\r\n\tEndIf;\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Create shadow dimensions element security cube\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Create shadow dimensions element security cube');\r\nEndIf;\r\n\r\nsGroupsDim = '}Groups';\r\ncShadowElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\nIf (CubeExists(cShadowElementSecurityCube) = 0);\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create element security cube for Shadow approval hierarchy');\r\n\tEndIf;\r\n\t\r\n\tCubeCreate(cShadowElementSecurityCube, cShadowApprovalDim, sGroupsDim);\r\n\tCubeSetLogChanges(cShadowElementSecurityCube, 1);\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\n\r\ncTM1Log = cEpilogLog;\r\n\r\n#*** Set applications dimension attribute values\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Set applications dimension attribute values');\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nAttrPutS('}tp_tasks}' | pAppId, cApplicationsDim, pAppId, cApprovalShadowDimAttr);\r\nAttrPutS('N', cApplicationsDim, pAppId, cMaintenanceAttr);\r\n\r\n#*** Remove version\r\n\r\ncVersionAttr = 'Version';\r\nAttrPutS('', cApplicationsDim, pAppId, cVersionAttr);\r\n\r\n\r\n#*** Create RDCLS cubes\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Create RDCLS cubes');\r\nEndIf;\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\nsCubesDim = '}Cubes';\r\ncCubesDimSize = DIMSIZ(sCubesDim);\r\nvIndex = 1;\r\n\r\nWhile (vIndex <= cCubesDimSize);\r\n\tvCubeName = DIMNM(sCubesDim, vIndex);\r\n\tvFlagCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\t\r\n\tIf (vFlagCube @= 'A' );\r\n\t\tvReturnValue = ExecuteProcess( '}tp_deploy_create_RDCLS_cube','pExecutionId', pExecutionId,\r\n\t\t\t'pAppId', pAppId, 'pCube', vCubeName, 'pZeroOut', 'Y');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n\r\n#*** Import state, permission, and permission cell security control data\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Import state, permission, and permission cell security control data');\r\nEndIf;\r\n\r\nIf (CubeExists(cPermissionCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_import_cube', 'pExecutionId', pExecutionId | cPermissionCube,\r\n\t\t'pCube', cPermissionCube, 'pSourceFile', cPermissionCube | '.blb');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityCube) <> 0);\r\n\tvReturnValue = ExecuteProcess('}tp_util_import_cube', 'pExecutionId', pExecutionId | cCellSecurityCube,\r\n\t\t'pCube', cCellSecurityCube, 'pSourceFile', cCellSecurityCube | '.blb');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n\t\r\nIf (CubeExists(cStateCube) <> 0);\t\t\r\n\tvReturnValue = ExecuteProcess('}tp_util_import_cube', 'pExecutionId', pExecutionId | cStateCube,\r\n\t\t'pCube', cStateCube, 'pSourceFile', cStateCube | '.blb');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n#*** Import element security data into shadow element security cube\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Import element security data into shadow element security cube');\r\nEndIf;\r\n\r\nvReturnValue = ExecuteProcess( '}tp_util_import_cube','pExecutionId', pExecutionId | cShadowElementSecurityCube,\r\n\t'pCube', cShadowElementSecurityCube, 'pSourceFile', cElementSecurityCube | '.blb');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Insert Version\r\n\r\nAttrPutS(pVersion, cApplicationsDim, pAppId, cVersionAttr);\r\n\r\n\r\n#*** Set security for non-admin users\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Set security for non-admin users');\r\nEndIf;\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\n\r\ncEveryoneGroup = cTpEveryoneGroup;\r\nIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) <> 0);\r\n\t\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\tElse;\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\nsDimensionSecurityCube = '}DimensionSecurity';\r\nIf (CubeExists(sDimensionSecurityCube) = 1);\r\n\tCellPutS('Read', sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup);\r\nEndIf;\r\n\r\nsCubeSecurityCube = '}CubeSecurity';\r\nIf (CubeExists(sCubeSecurityCube) = 1);\r\n\tCellPutS('Read', sCubeSecurityCube, cPermissionCube, cEveryoneGroup);\r\n\tCellPutS('Read', sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup);\r\n\tCellPutS('Read', sCubeSecurityCube, cStateCube, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n#*** Delete obsolete application artifacts\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Delete obsolete application artifacts');\r\nEndIf;\r\n\r\ncApplicationSecurityCube = '}tp_application_security}' | pAppId;\r\ncApplicationSecurityUpdateCube = '}tp_application_security_update}' | pAppId;\r\ncSecurityMeasuresDim = '}tp_security_measures';\r\ncSecurityUpdateMeasuresDim = '}tp_security_update_measures';\r\n\r\nIf (CubeExists(cApplicationSecurityCube) <> 0);\r\n\tCubeDestroy(cApplicationSecurityCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cApplicationSecurityUpdateCube) <> 0);\r\n\tCubeDestroy(cApplicationSecurityUpdateCube);\r\nEndIf;\r\n\r\nIf (DimensionExists(cSecurityMeasuresDim) <> 0);\r\n\tDimensionDestroy(cSecurityMeasuresDim);\r\nEndIf;\r\n\r\nIf (DimensionExists(cSecurityUpdateMeasuresDim) <> 0);\r\n\tDimensionDestroy(cSecurityUpdateMeasuresDim);\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pVersion",
        "Prompt": "",
        "Value": "10.1",
        "TYpe": "String"
      },
      {
        "Name": "pSubsetAlias",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_from_v10_2_to_v10_2_2",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2012\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Get approval dimension, approval subset and isActive\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Get approval dimension, approval subset and isActive');\r\nEndIf;\r\n\r\nStringGlobalVariable('gApprovalDim');\r\nStringGlobalVariable('gApprovalSubset');\r\nStringGlobalVariable('gIsActive');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId,\r\n\t'pAppId', pAppId, 'pControl',  pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', gApprovalDim, gApprovalSubset, gIsActive);\r\nEndIf;\r\n\r\nIf (gApprovalDim @= '');\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '****** Granting owner rights for application');\r\n\tEndIf;\r\n\t\r\n\tcOwnPermissionElement = 'OWN';\r\n\tcAppSecurityCube = '}ElementSecurity_' | cControlPrefix | 'tp_applications';\r\n\tcAppPermSecurityCube = '}CellSecurity_' | cControlPrefix | 'tp_application_root_permissions';\r\n\t\r\n\tcGroupsDimSize = DIMSIZ('}Groups');\r\n\tvIndexI = 1;\r\n\tWhile (vIndexI <= cGroupsDimSize);\r\n\t\r\n\t\tvGroup = DIMNM('}Groups', vIndexI);\r\n\t\tIf (vGroup @<> 'Admin' & vGroup @<> 'DataAdmin' & vGroup @<> 'SecurityAdmin');\r\n\t\t\tvPerm = CellGetS(cAppSecurityCube, pAppId, vGroup);\r\n\t\t\tIf (vPerm @= 'READ');\r\n\t\t\t\tCellPutS('READ', cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutS('NONE', cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndexI = vIndexI + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n### Set value to version attribute\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncVersionAttr = 'Version';\r\nAttrPutS(pVersion, cApplicationsDim, pAppId, cVersionAttr);\r\n\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pVersion",
        "Prompt": "",
        "Value": "10.1",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_from_v9_5_1_to_v9_5_2",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n### Add element: TakeOwnershipNode\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\nIf (DimensionExists(cNodeInfoDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStartEditingDate = 'StartEditingDate';\r\nIf (DIMIX(cNodeInfoDim, cTakeOwnershipNode) = 0);\r\n\tDimensionElementInsert(cNodeInfoDim, cStartEditingDate, cTakeOwnershipNode, 'S');\r\nEndIf;\r\n\r\n### Add attribute: Version\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncApplicationsAttributesDim = '}ElementAttributes_' | cApplicationsDim;\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0 % DimensionExists(cApplicationsAttributesDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncVersionAttr = 'Version';\r\nIf (DIMIX(cApplicationsAttributesDim, cVersionAttr) = 0);\r\n\tAttrInsert(cApplicationsDim, cApprovalDimensionAttr, cVersionAttr, 'S');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n### Set value to version attribute\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nAttrPutS(pVersion, cApplicationsDim, pAppId, cVersionAttr);\r\n\r\ncTM1Process = cControlPrefix | 'tp_update_from_v9_5_1_to_v9_5_2';\r\n\r\n### Get Approval dimension and subset\r\n\r\n#* declare global variables\r\nStringGlobalVariable('gApprovalDim');\r\nStringGlobalVariable('gApprovalSubset');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pControl',  pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncApprovalDim = gApprovalDim;\r\ncApprovalSubset = gApprovalSubset;\r\n\r\nIf (DimensionExists(cApprovalDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n### Write taking ownership nodes \r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nIf (CubeExists(cStateCube) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncTakeOwnershipNode = 'TakeOwnerShipNode';\r\n\r\ncApprovalDimSize = DIMSIZ(cApprovalDim);\r\nvIndex = 1;\r\nWhile (vIndex <= cApprovalDimSize);\r\n\tvNode = DIMNM(cApprovalDim, vIndex);\r\n\t\r\n\tvCurrentOwnerValue = CellGetS(cStateCube, vNode, cCurrentOwner);\r\n\tvTakeOwnershipNode = CellGetS(cStateCube, vNode, cTakeOwnershipNode);\r\n\tIf (vCurrentOwnerValue @<> '' & vTakeOwnershipNode @= '');\r\n\t\tIf (CellIsUpdateable(cStateCube, vNode, cTakeOwnershipNode) = 0);\r\n\t\t\tvDetail=INSRT(cTakeOwnershipNode,')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess('|tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS(vNode, cStateCube, vNode, cTakeOwnershipNode);\r\n\tEndIf;\r\n\t\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n### Create \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\n\t\tDeleteGroup(cTpEveryoneGroup);\r\n\tEndIf;\r\n\t\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\t\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tAddGroup(cEveryoneGroup);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n### Give everyone access to process: tp_workflow_submit_leaf_children\r\n\r\nsProcessesDim = '}Processes';\r\nsProcessSecurityCube = '}ProcessSecurity';\r\nIf (CubeExists(sProcessSecurityCube) = 0);\r\n\t\r\n\tCubeCreate(sProcessSecurityCube, sProcessesDim, '}Groups');\r\n\tCubeSetLogChanges(sProcessSecurityCube, 1);\r\nEndIf;\r\n\r\ncSubmitLeafChildrenProc = cControlPrefix | 'tp_workflow_submit_leaf_children';\r\nIf (DIMIX(sProcessesDim, cSubmitLeafChildrenProc) = 0);\r\n\tProcessError;\r\nElse;\r\n\tcCurrentCellValue = CellGetS(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup); \r\n\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\tIf (CellIsUpdateable(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup) = 0);\r\n\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(cSubmitLeafChildrenProc,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_SEMAPHORE_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS('Read', sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup);\r\n\tEndIf;\r\nEndIf;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pVersion",
        "Prompt": "",
        "Value": "9.5.2",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_from_v9_5_2_to_v10_1",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***Get approval dimension, approval subset and isActive\r\n\r\nStringGlobalVariable('gApprovalDim');\r\nStringGlobalVariable('gApprovalSubset');\r\nStringGlobalVariable('gIsActive');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId,\r\n\t'pAppId', pAppId, 'pControl',  pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', gApprovalDim, gApprovalSubset, gIsActive);\r\nEndIf;\r\n\r\n#***Insert CubeView \r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\ncCubeViewsAttr = 'CubeViews';\r\nIf (DimensionExists(cApplicationsDim) > 0);\r\n\r\n\tIf (DIMIX(cAppAttrDim, cCubeViewsAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cCubeViewsAttr, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n#***get \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#Grant DataReservation capabilities to the tp_everyone group\r\ncCapabilityCube = '}Capabilities';\r\nCellPutS('Grant', cCapabilityCube, 'ManageDataReservation', 'EXECUTE', cEveryoneGroup);\r\nCellPutS('Grant', cCapabilityCube, 'DataReservationOverride', 'EXECUTE', cEveryoneGroup);\r\n\r\n\r\n#***Set security\r\nsProcessSecurityCube = '}ProcessSecurity';\r\ncExecuteActionProc = cControlPrefix | 'tp_workflow_execute_action';\r\ncBounceConflictUsersProc = cControlPrefix | 'tp_workflow_bounce_conflict_users';\r\n\r\nCellPutS('Read', sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup);\r\nCellPutS('Read', sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup);\r\n\r\n#*** create applicationCubes cube\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\r\nsCubesDim = '}Cubes';\r\n\r\nIf (CubeExists(cApplicationCubesCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application cubes cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cApplicationCubesCube, cApplicationsDim, sCubesDim);\r\n\tCubeSetLogChanges(cApplicationCubesCube, 1);\r\n\r\nEndIf;\r\n\r\n#***\r\n# Remove owner groups, do it first so that there are less rows to scan when upgrading security\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_clean_owner_groups', 'pExecutionId', pExecutionId, 'pApprovalDim', gApprovalDim);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_upgrade_security_pre_from_v9_5_2_to_v10_1', 'pExecutionId', pExecutionId,\r\n\t'pAppId', pAppId, 'pApprovalDim', gApprovalDim, 'pApprovalSubset', gApprovalSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\ncAnnotationChangeUser = 'AnnotationChangeUser';\r\ncAnnotationChangeDate = 'AnnotationChangeDate';\r\n\r\nIf (DIMIX(cNodeInfoDim, cAnnotationChangeUser) <> 0);\r\n\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeUser);\r\nEndIf;\r\n\r\nIf (DIMIX(cNodeInfoDim, cAnnotationChangeDate) <> 0);\r\n\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeDate);\r\nEndIf;\r\n\r\n#***\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n##################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n### Set value to version attribute\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncVersionAttr = 'Version';\r\nAttrPutS(pVersion, cApplicationsDim, pAppId, cVersionAttr);\r\n\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pVersion",
        "Prompt": "",
        "Value": "10.1",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_security_post_from_v9_5_2_to_v10_1",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\n\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ncTemporaryCubesDimension = cControlPrefix | 'tp_temp_app_cubes_'|pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' pCubeInfo=' | pCubeInfo );\r\nEndIf;\r\n\r\nIf (DimensionExists(cTemporaryCubesDimension) = 1);\r\n\tDimensionDestroy(cTemporaryCubesDimension);\r\nEndIf;\r\n\r\nDimensionCreate(cTemporaryCubesDimension);\r\n\r\n# parse application cube string and set values in a temporary dimension \r\ncubeSeparater = '*';\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nvFirstElement = 1;\r\n\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' CubeName=' | vCubeName | ' Flag=' | vFlagCube);\r\n\tEndIf;\r\n\t\r\n\tIf (vFlagCube @= 'A' % cApprovalDIM @= '');\r\n\t\tDimensionElementInsert(cTemporaryCubesDimension, '', vCubeName, 'S');\r\n\tEndIf;\r\n\t\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;\r\n\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tvNumCubes = DIMSIZ(cTemporaryCubesDimension);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The temporary cubes dimension ' | cTemporaryCubesDimension | ' has ' | STR(vNumCubes, 6, 0)  | ' members');\r\n\tvTempCubesIdx = 1;\r\n\tWhile (vTempCubesIdx <= vNumCubes);\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '---------------------------------------');\r\n\t\tvThisCubeName = DIMNM(cTemporaryCubesDimension, vTempCubesIdx);\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '-------' | vThisCubeName | '-------------');\r\n\t\tvTempCubesIdx = vTempCubesIdx + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 0;\r\ncCubePropertiesCube = '}CubeProperties';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationStateCube = cControlPrefix | 'tp_application_state}'|pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nvAppWasAlreadyDeployed = 0;\r\n#clear existing cube flags in case this is a redeployment\r\nWhile (indexCube < totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve flag=' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @= 'A' % (cApprovalDIM @= '' & cIsAppCube @<> ''));\r\n\t\tvAppWasAlreadyDeployed = 1;\r\n\t\tIf (DIMIX(cTemporaryCubesDimension, cCubeName) < 1);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tcLogCubeText = 'Cube '|cCubeName|' was used by this application but is no longer';\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tcLogCubeText = 'Clear data reservations for cube '|cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tcLogCubeText = 'Clear locks for cube '|cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t#remove security overlay cube\r\n\t\t\tvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | cCubeName;\t\t\t\t\r\n\t\t\tIF (CubeExists(vSecuirtyOverlayCube) = 1);\r\n\t\t\t\tSecurityOverlayDestroyGlobalDefault(cCubeName);\r\n\t\t\tEndif;\r\n\r\n\t\t\t# clear the require reservation lag\r\n\t\t\tCellPutS('', cCubePropertiesCube, cCubeName, 'DATARESERVATIONMODE');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Data Reservation is no longer required on cube ' | cCubeName);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t#remove any existing data reservations\r\n\t\t\tcCubeAddress = '';\r\n\t\t\taddConcatSymbol = 0;\r\n\t\t\tdimensionIndex = 1;\r\n\t\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\t\tcCubeDimensionName = TABDIM(cCubeName, dimensionIndex);\r\n\t\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\t\tdimensionIndex = -1;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\taddConcatSymbol = 1;\r\n\t\t\t\t\tEndIf; \r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\t\tEnd;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tcLogCubeText = 'Calling CubeDataReservationReleaseAll(' | cCubeName | ',' | cCubeAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\tCubeDataReservationReleaseAll(cCubeName, '', cCubeAddress);\r\n\t\t\t## clear the flag\r\n\t\t\tCellPutS('', cApplicationCubesCube, pAppId, cCubeName);\r\n\t\tEndIf;\r\n\t\t\r\n\tEndIf;\r\n\t\r\n\t\r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\n# parse application cube string and set values in application_cubes cube\r\ncubeSeparater = '*';\r\n\r\ncDataReservationType = '';\r\nIf (cAppActive @= 'Y');\r\n\tcDataReservationType = 'REQUIREDSHARED';\r\n\tIf (cApprovalDIM @= '');\r\n\t\tcDataReservationType = 'ALLOWED';\r\n\tEndIf;\r\nEndIf;\r\n\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' CubeName=' | vCubeName | ' Flag=' | vFlagCube);\r\n\tEndIf;\r\n\r\n\tvOldFlagValue = CellGetS(cApplicationCubesCube, pAppId, vCubeName); \r\n\tCellPutS(vFlagCube, cApplicationCubesCube, pAppId, vCubeName);\r\n\t\r\n\tIf (cApprovalDIM @= '' % vFlagCube @= 'A');\r\n\t\t# if this cube uses the approval hierarchy then require reservation to edit\r\n\t\tCellPutS(cDataReservationType, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Data Reservation is now ' | cDataReservationType | ' on cube ' | vCubeName);\r\n\t\tEndIf;\r\n\t\t#Add data reservations if this is a new cube there are currently owners of nodes in this application\r\n\t\tIf ((vOldFlagValue @<> vFlagCube & vAppWasAlreadyDeployed = 1) % pUpgrade @= 'Y');\r\n\t\t\tIf (cApprovalDIM @= '');\r\n\t\t\t\t# If the Central app has an existing owner make sure any new cubes get a data reservation.\r\n\t\t\t\tcState = CellGetS(cCentralApplicationStateCube, pAppId, 'State');\r\n\t\t\t\tIf (cState @= '2');\r\n\t\t\t\t\tcCurrentOwner = CellGetS(cCentralApplicationStateCube, pAppId, 'CurrentOwnerId');\r\n\t\t\t\t\tIf (cCurrentOwner @<> '');\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t\t\t'pAppId', pAppId, 'pNode', '', 'pApprovalDim', '', 'pReserve', 'Y', 'pUser', cCurrentOwner, 'pControl', pControl);\r\n\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\t#***Security overlay cube\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for security overly cube for ' | vCubeName);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\t\t\t\t\r\n\t\t\t\tIF (CubeExists(vSecuirtyOverlayCube) = 0);\r\n\t\t\t\t\tvDimIndex =1;\r\n\t\t\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\t\t\t\tvTokenString = '';\r\n\t\t\t\t\tvFoundApproval = 'F';\r\n\t\t\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\t\t\tIF (vDimension @= cApprovalDim);\r\n\t\t\t\t\t\t\tvSingleToken = '1';\r\n\t\t\t\t\t\t\tvFoundApproval = 'T';\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tvSingleToken = '0';\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tIF (vDimIndex > 1);\r\n\t\t\t\t\t\t\tvSingleToken = ':' | vSingleToken;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tvTokenString = vTokenString | vSingleToken;\r\n\t\t\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\t\t\t\tEnd;\r\n\t\t\t\t\tIF (vFoundApproval @= 'T');\r\n\t\t\t\t\t\tSecurityOverlayCreateGlobalDefault(vCubeName, vTokenString);\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for existing ownership for cube ' | vCubeName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t# If there are any existing node owners make sure any new cubes get a data reservation. \r\n\t\t\t\t#Also we need to update the newly created security overlay cube\r\n\t\t\t\tIf (CubeExists(cApplicationStateCube) = 1);\r\n\t\t\t\t\tcApprovalSubsetSize = SubsetGetSize(cApprovalDim,cApprovalSubset );\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cApprovalSubsetSize);\r\n\t\t\t\t\t\tvApprovalNode = SubsetGetElementName(cApprovalDIM, cApprovalSubset, vIndex);\r\n\t\t\t\t\t\tIf (DTYPE(cApprovalDIM, vApprovalNode) @<> 'C');\r\n\t\t\t\t\t\t\tcState = CellGetS(cApplicationStateCube, vApprovalNode, 'State');\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node state for node ' | vApprovalNode | ' in cube ' | vCubeName | ' is ' | cState);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tIf (cState @= '2');\r\n\t\t\t\t\t\t\t\tcCurrentOwner = CellGetS(cApplicationStateCube, vApprovalNode, 'CurrentOwnerId');\r\n\t\t\t\t\t\t\t\tcOwnershipNode = CellGetS(cApplicationStateCube, vApprovalNode, 'TakeOwnershipNode');\r\n\t\t\t\t\t\t\t\tIf (cCurrentOwner @<> '' & cOwnershipNode @<> '');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t\t\t\t\t\t'pAppId', pAppId, 'pNode', cOwnershipNode, 'pApprovalDim', cApprovalDIM, 'pReserve', 'Y', 'pUser', cCurrentOwner, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tElseIf(cState @= '4');\r\n\t\t\t\t\t\t\t\tSecurityOverlayGlobalLockNode(1,vCubeName,vApprovalNode);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\t\tEnd;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;\r\n#***\r\n\r\nIf (DimensionExists(cTemporaryCubesDimension) = 1);\r\n\tDimensionDestroy(cTemporaryCubesDimension);\r\nEndIf;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeInfo",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUpgrade",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_upgrade_security_pre_from_v9_5_2_to_v10_1",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\npControl = 'Y';\r\n cControlPrefix = '}';\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** update element level security\r\ncPermissionsCube = '}CellSecurity_' | cControlPrefix | 'tp_application_permission}' | pAppId;\r\ncSecurityRead = 'READ';\r\ncSecurityWrite = 'WRITE';\r\ncSecurityLock = 'WRITE';\r\n\r\ncApprovalSubsetSize = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nvIndex = cApprovalSubsetSize;\r\n\r\ncGroupsDim = '}Groups';\r\n\r\nWhile ( vIndex > 0 );\r\n\tcApprovalElement = SubsetGetElementName (pApprovalDim, pApprovalSubset, vIndex);\r\n\tvIsLeafNode = 'T';\r\n\tIf (DTYPE(pApprovalDim, cApprovalElement) @= 'C');\r\n\t\tvIsLeafNode = 'F';\r\n\tElse;\r\n\t\tvIsLeafNode = 'T';\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Found Element ', cApprovalElement, ' isLeaf=', vIsLeafNode);\r\n\tEndIf;\r\n\t\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Loop through groups on leaf node ', cGroupsDim);\r\n\tEndIf;\r\n\tgroupLooper = 1;\r\n\tcGroupName =  DIMNM(cGroupsDim,groupLooper);\r\n\tWhile (cGroupName @<> '');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Get permission for group ', cGroupName, cPermissionsCube);\r\n\t\tEndIf;\r\n\t\tcView = CellGetS(cPermissionsCube, cApprovalElement, 'VIEW', cGroupName);\r\n\t\tcEdit = CellGetS(cPermissionsCube, cApprovalElement, 'EDIT', cGroupName);\r\n\t\tcSubmit = CellGetS(cPermissionsCube, cApprovalElement, 'SUBMIT', cGroupName);\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'EDIT permission for group ', cGroupName, ' is ', cEdit);\r\n\t\tEndIf;\r\n\r\n\t\tIf (vIsLeafNode @= 'T');\r\n\t\t\tIf (cEdit @= 'READ' );\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Change Element security to WRITE', cApprovalElement);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tElementSecurityPut (cSecurityWrite, pApprovalDim, cApprovalElement, cGroupName);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (cSubmit @= 'READ' );\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Change Element security to WRITE', cApprovalElement);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tElementSecurityPut (cSecurityLock, pApprovalDim, cApprovalElement, cGroupName);\r\n\t\t\tEndIf;\r\n\t\tElse;\r\n\t\t\tIf (cView @= 'READ' );\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Change Element security to WRITE', cApprovalElement);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tElementSecurityPut (cSecurityWrite, pApprovalDim, cApprovalElement, cGroupName);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\tgroupLooper = groupLooper + 1;\r\n\t\tcGroupName =  DIMNM(cGroupsDim,groupLooper);\r\n\tEnd;\r\n\r\n\t\r\n\tvIndex = vIndex - 1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_add_direct_children_to_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Check dimension\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check subset\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Check parent\r\n\r\nIf (DIMIX(pDim, pParent) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check node type\r\n\r\nIf (DTYPE(pDim, pParent) @<> 'C');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Add Children\r\n\r\nvTotalChildren = ELCOMPN(pDim, pParent);\r\nvIndex = 1;\r\nWhile (vIndex <= vTotalChildren);\r\n\tvChild = ELCOMP(pDim, pParent, vIndex);\r\n\tSubsetElementInsert(pDim, pSubset, vChild, 0);\r\n\t\r\n\tIf (DTYPE(pDim, vChild) @= 'C');\r\n\t\tvReturnValue = ExecuteProcess('}tp_util_add_direct_children_to_subset', 'pExecutionId', pExecutionId,'pDim', pDim,\r\n\t\t\t'pSubset', pSubset, 'pParent', vChild);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\t\r\n\tEndIf;\r\n        \r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pParent",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_check_approval_overlap",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '}';\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim ='}tp_tasks}' | pAppId;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cShadowApprovalDim );\r\nEndIf;\r\n\r\n#***\r\ncApprovalDimToCompare  =  ATTRS('}tp_applications', pAppIdToCompare,  'ApprovalDimension');\r\ncApprovalSubsetToCompare =ATTRS('}tp_applications', pAppIdToCompare,  'ApprovalSubset');\r\ncShadowApprovalDimToCompare  ='}tp_tasks}' | pAppIdToCompare;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application_to_compare attributes', cApprovalDimToCompare, \r\n\t\tcApprovalSubsetToCompare, cShadowApprovalDimToCompare );\r\nEndIf;\r\n\r\n#***\r\nisApprovalHierarchyOverlap = 'N';\r\n\r\nIF (cApprovalDim @= cApprovalDimToCompare & cApprovalSubset @=cApprovalSubsetToCompare);\r\n\tisApprovalHierarchyOverlap = 'Y';\r\nElseif (cApprovalDim @= cApprovalDimToCompare & cApprovalSubset @<>cApprovalSubsetToCompare);\r\n\tvSubset = 'approval_overlap' | pExecutionId;\r\n\tIF (SubsetExists(cApprovalDim, vSubset) =1);\r\n\t\tSubsetDestroy(cApprovalDim, vSubset);\r\n\tEndif;\r\n\t\r\n\tvMdx = '{INTERSECT(Tm1SubsetToSet( [' | cApprovalDim | '], \"' | cApprovalSubset | '\" ) , Tm1SubsetToSet( [' | cApprovalDimToCompare | '], \"' | cApprovalSubsetToCompare | '\" ) )}';\r\n\tSubsetCreateByMdx(vSubset, vMdx, cApprovalDim);\r\n\tvTotalOverlap = SubsetGetSize(cApprovalDim, vSubset);\r\n\tIF (vTotalOverlap >0);\r\n\t\tisApprovalHierarchyOverlap = 'Y';\r\n\tEndif;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, vMdx, NumberToString(vTotalOverlap) );\r\n\tEndIf;\r\nEndif;\r\n\r\nIf (isApprovalHierarchyOverlap @= 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APPROVAL_OVERLAPPED',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', 'Y');\r\n\t\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n\r\nIF (SubsetExists(cApprovalDim, vSubset) =1);\r\n\tSubsetDestroy(cApprovalDim, vSubset);\r\nEndif;\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppIdToCompare",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_convert_dynamic_subset_to_static",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n# Make sure dimension and subset exist\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\nProcessError;\r\nEndIf;\r\n \r\nIf (SubsetGetSize(pDim, pSubset) = 0);\r\n\r\n#do nothing\r\nelse;\r\n\r\n# Get the first element from subset\r\ncFirstElem = SubsetGetElementName(pDim, pSubset, 1);\r\n\r\n# Insert this element back to the subset at the end\r\nSubsetElementInsert(pDim, pSubset, cFirstElem, SubsetGetSize(pDim, pSubset) + 1);\r\n\r\n# Remove this inserted element\r\nSubsetElementDelete(pDim, pSubset, SubsetGetSize(pDim, pSubset));\r\n\r\nENdIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_convert_security_file",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n#*** Log File Name\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS('}tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\tpExecutionId, pSourceFile, pDim, pBlob);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIQuoteCharacter='';\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\ncBlob = pBlob | '.blb';\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\n\tTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#***\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n    If (cGenerateLog @= 'Y');\r\n\t    TextOutput(cTM1Log, 'Dimension does not exist: ' | pDim);\r\n    EndIf;\r\n    \r\n    ProcessError;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cDataLog;\r\n\r\nIf (vNode @<> 'ReviewerEditOn');\r\n\tvPNode = DimensionElementPrincipalName(pDim, vNode);\r\nElse;\r\n\tvPNode = 'ReviewerEditOn';\r\nEndIf;\r\n\r\nSetOutputCharacterSet(cBlob, 'TM1CS_UTF8');\r\nTextOutput(cBlob, vPNode, vGroup, vRight, vViewDepth, vReviewDepth); \r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pBlob",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "vNode",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vGroup",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vRight",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vViewDepth",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "vReviewDepth",
        "Type": "String",
        "Position": "5",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_create_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (pDelimiter @= '');\r\npDelimiter = '*';\r\nENDIF;\r\n\r\nvDimension1= '';\r\nvDimension2= '';\r\nvDimension3= '';\r\nvDimension4= '';\r\nvDimension5= '';\r\nvDimension6= '';\r\nvDimension7= '';\r\nvDimension8= '';\r\nvDimension9= '';\r\nvDimension10= '';\r\nvDimension11= '';\r\nvDimension12= '';\r\nvDimension13= '';\r\nvDimension14= '';\r\nvDimension15= '';\r\nvDimension16= '';\r\nvDimension17= '';\r\nvDimension18= '';\r\nvDimension19= '';\r\nvDimension20= '';\r\nvDimension21= '';\r\nvDimension22= '';\r\nvDimension23= '';\r\nvDimension24= '';\r\nvDimension25= '';\r\nvDimension26= '';\r\nvDimension27= '';\r\nvDimension28= '';\r\nvDimension29= '';\r\nvDimension30= '';\r\n\r\n\r\nIF (CubeExists(pCubeName) =0);\r\n\r\nvDimension = '';\r\nvLength = 0;\r\nvDimensions= pDimensions;\r\nvPosition = SCAN(pDelimiter, vDimensions);\r\nvOrder =1;\r\nWHILE (vPosition >0);\r\nvLength = Long(vDimensions);\r\nvDimension = SUBST(vDimensions, 1, vPosition-1);\r\nvDimensions= SUBST(vDimensions, vPosition +1, vLength - vPosition);\r\nIF (vOrder =1);\r\nvDimension1 = vDimension;\r\nELSEIF (vOrder =2);\r\nvDimension2=vDimension;\r\nELSEIF (vOrder =3);\r\nvDimension3=vDimension;\r\nELSEIF (vOrder =4);\r\nvDimension4=vDimension;\r\nELSEIF (vOrder =5);\r\nvDimension5=vDimension;\r\nELSEIF (vOrder =6);\r\nvDimension6=vDimension;\r\nELSEIF (vOrder =7);\r\nvDimension7=vDimension;\r\nELSEIF (vOrder =8);\r\nvDimension8=vDimension;\r\nELSEIF (vOrder =9);\r\nvDimension9=vDimension;\r\nELSEIF (vOrder =10);\r\nvDimension10=vDimension;\r\nELSEIF (vOrder =11);\r\nvDimension11=vDimension;\r\nELSEIF (vOrder =12);\r\nvDimension12=vDimension;\r\nELSEIF (vOrder =13);\r\nvDimension13=vDimension;\r\nELSEIF (vOrder =14);\r\nvDimension14=vDimension;\r\nELSEIF (vOrder =15);\r\nvDimension15=vDimension;\r\nELSEIF (vOrder =16);\r\nvDimension16=vDimension;\r\nELSEIF (vOrder =17);\r\nvDimension17=vDimension;\r\nELSEIF (vOrder =18);\r\nvDimension18=vDimension;\r\nELSEIF (vOrder =19);\r\nvDimension19=vDimension;\r\nELSEIF (vOrder =20);\r\nvDimension20=vDimension;\r\nELSEIF (vOrder =21);\r\nvDimension21=vDimension;\r\nELSEIF (vOrder =22);\r\nvDimension22=vDimension;\r\nELSEIF (vOrder =23);\r\nvDimension23=vDimension;\r\nELSEIF (vOrder =24);\r\nvDimension24=vDimension;\r\nELSEIF (vOrder =25);\r\nvDimension25=vDimension;\r\nELSEIF (vOrder =26);\r\nvDimension26=vDimension;\r\nELSEIF (vOrder =27);\r\nvDimension27=vDimension;\r\nELSEIF (vOrder =28);\r\nvDimension28=vDimension;\r\nELSEIF (vOrder =29);\r\nvDimension29=vDimension;\r\nELSEIF (vOrder =30);\r\nvDimension30=vDimension;\r\nENDIF;\r\n\r\nvOrder = vOrder + 1;\r\nvPosition = SCAN(pDelimiter, vDimensions);\r\n\r\nEND;\r\n\r\nvTotalDimensions = vOrder -1;\r\n\r\nIF (vTotalDimensions =2);\r\nCubeCreate(pCubeName , vDimension1, vDimension2);\r\nELSEIF (vTotalDimensions = 3);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3);\r\nELSEIF (vTotalDimensions = 4);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4);\r\nELSEIF (vTotalDimensions = 5);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5);\r\nELSEIF (vTotalDimensions = 6);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6);\r\nELSEIF (vTotalDimensions = 7);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7);\r\nELSEIF (vTotalDimensions = 8);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8);\r\nELSEIF (vTotalDimensions = 9);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, vDimension9);\r\nELSEIF (vTotalDimensions = 10);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6,vDimension7, vDimension8, vDimension9, vDimension10);\r\nELSEIF (vTotalDimensions = 11);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6, vDimension7, vDimension8, vDimension9, vDimension10, vDimension11);\r\nELSEIF (vTotalDimensions = 12);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6, vDimension7, vDimension8, vDimension9, vDimension10, vDimension11, vDimension12);\r\nELSEIF (vTotalDimensions = 13);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6, vDimension7, vDimension8, vDimension9, vDimension10, vDimension11, vDimension12, vDimension13);\r\nELSEIF (vTotalDimensions = 14);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6, vDimension7, vDimension8, vDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14);\r\nELSEIF (vTotalDimensions = 15);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, \r\nvDimension6, vDimension7, vDimension8, vDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15);\r\nELSEIF (vTotalDimensions = 16);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16);\r\nELSEIF (vTotalDimensions = 17);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17);\r\nELSEIF (vTotalDimensions = 18);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18);\r\nELSEIF (vTotalDimensions = 19);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19);\r\nELSEIF (vTotalDimensions = 20);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20);\r\nELSEIF (vTotalDimensions = 21);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21);\r\nELSEIF (vTotalDimensions = 22);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22);\r\nELSEIF (vTotalDimensions = 23);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23);\r\nELSEIF (vTotalDimensions = 24);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24);\r\nELSEIF (vTotalDimensions = 25);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25);\r\nELSEIF (vTotalDimensions = 26);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25, vDimension26);\r\nELSEIF (vTotalDimensions = 27);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25, vDimension26, vDimension27);\r\nELSEIF (vTotalDimensions = 28);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25, vDimension26, vDimension27, vDimension28);\r\nELSEIF (vTotalDimensions = 29);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25, vDimension26, vDimension27, vDimension28,\r\nvDimension29);\r\nELSEIF (vTotalDimensions = 30);\r\nCubeCreate(pCubeName , vDimension1, vDimension2, vDimension3, vDimension4, vDimension5, vDimension6, vDimension7, vDimension8, \r\nvDimension9, vDimension10, vDimension11, vDimension12, vDimension13, vDimension14, vDimension15, vDimension16, vDimension17, vDimension18, \r\nvDimension19, vDimension20, vDimension21, vDimension22, vDimension23, vDimension24, vDimension25, vDimension26, vDimension27, vDimension28,\r\nvDimension29, vDimension30);\r\nENDIF;\r\n\r\nCubeSetLogChanges(pCubeName, 1);\r\n\r\nENDIF;\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCubeName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDimensions",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDelimiter",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_delete_subset_element",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\nvSubsetSize = SubsetGetSize(pDim, pSubset);\r\nIf (vSubsetSize = 1);\r\n\tSubsetElementDelete(pDim, pSubset, 1);\r\nElseIf (vSubsetSize > 1);\r\n\tvNodeIndex = 0;\r\n\tvTempIndex = 1;\r\n\twhile(vTempIndex <= vSubsetSize);\r\n\t\tvTempNode = SubsetGetElementName(pDim, pSubset, vTempIndex);\r\n\t\tIf (DimensionElementPrincipalName(pDim, pNode) @= \r\n\t\t\tDimensionElementPrincipalName(pDim, vTempNode));\r\n\t\t\tvNodeIndex = vTempIndex;\r\n\t\t\tvTempIndex = vSubsetSize;\r\n\t\tEndIf;\r\n\r\n\t\tvTempIndex = vTempIndex + 1;\r\n\tEnd;\r\n\r\n\tIf (vNodeIndex > 0);\r\n\t\tSubsetElementDelete(pDim, pSubset, vNodeIndex);\r\n\tEndIf;\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_does_dim_have_cube_name",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', pDim, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (DimensionExists(pDim) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\nStringGlobalVariable('gDoesDimHaveCubeName');\r\ngDoesDimHaveCubeName = 'N';\r\n\r\nIf (CubeExists(pDim) <> 0);\r\ngDoesDimHaveCubeName = 'Y';\r\nEndIf;\r\n\r\nIf (gDoesDimHaveCubeName @= 'Y');\r\nvFindDim = 'N';\r\ncCube = pDim;\r\nvIndex = 1;\r\nWhile (vIndex > 0);\r\nvCubeDim = TABDIM(cCube, vIndex);\r\n\r\nIf (vCubeDim @= '');\r\nvIndex = -1;\r\nElseIf (vCubeDim @= pDim);\r\nvIndex = -1;\r\nvFindDim = 'Y';\r\nEndIf;\r\n\r\nvIndex = vIndex + 1;\r\nEnd;\r\n\r\nIf (vFindDim @= 'N');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_DIM_CUBE_SAME_NAME',\r\n'pErrorDetails', pDim,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_escape_id",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** declare global variable\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\nStringGlobalVariable('gEscapedId');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node id: ' | pNode);\r\nEndIf;\r\n\r\ncNodeEsc = '';\r\nIf (SCAN(']', pNode) = 0);\r\n\tcNodeEsc = pNode;\r\nElse;\r\n\tcNodeLength = LONG(pNode);\r\n\tlooper = 1;\r\n\tWhile (looper <= cNodeLength);\r\n\t\tcIdChar = SUBST(pNode, looper, 1);\r\n\t\tIf (cIdChar @= ']');\r\n\t\t\tcNodeEsc = cNodeEsc | ']]';\r\n\t\tElse;\r\n\t\t\tcNodeEsc = cNodeEsc | cIdChar;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper + 1;\r\n\tEnd;\r\nEndIf;\r\n\t\t\t\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | cNodeEsc);\r\nEndIf;\r\n\r\ngEscapedId = cNodeEsc;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_export_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nDatasourceASCIIDelimiter = char(StringToNumber(pDelimiter));\r\nDatasourceASCIIQuoteCharacter = char(StringToNumber(pQuote));\r\nSetOutputCharacterSet(pBlob | '.blb', 'TM1CS_UTF8');\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', pExecutionId, pCube, pBlob, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (CubeExists(pCube) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncDimMax = 4;\r\n\r\nvIndex = 1;\r\nWhile (vIndex <> 0);\r\n\tvDim = TABDIM(pCube, vIndex);\r\n\tIf (vDim @<> '');\r\n\t\tvIndex = vIndex + 1;\r\n\tElse;\r\n\t\tcDimCount = vIndex - 1;\r\n\t\tvIndex = 0;\r\n\tEndIf;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Dimension Count: ', NumberToString(cDimCount));\r\nEndIf;\r\n\r\nIf (cDimCount > cDimMax);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cDimCount = 2);\r\n\r\n\tcDim1 = TABDIM(pCube, 1);\r\n\tcDim2 = TABDIM(pCube, 2);\r\n\r\n\tcDim1Size = DIMSIZ(cDim1);\r\n\tcDim2Size = DIMSIZ(cDim2);\r\n\r\n\tvIndex1 = 1;\r\n\tWhile (vIndex1 <= cDim1Size);\r\n\t\tvElement1 = DIMNM(cDim1, vIndex1);\r\n\r\n\t\tvIndex2 = 1;\r\n\t\tWhile (vIndex2 <= cDim2Size);\r\n\t\t\tvElement2 = DIMNM(cDim2, vIndex2);\r\n\r\n\t\t\tIf (DTYPE(cDim2, vElement2) @= 'S');\r\n\t\t\t\tvValue = CellGetS(pCube, vElement1, vElement2);\r\n\t\t\tElse;\r\n\t\t\t\tvValue = NumberToString(CellGetN(pCube, vElement1, vElement2));\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (vValue @<> '');\r\n\t\t\t\tIf (pAlt @= 'Y');\r\n\t\t\t\t\tTextOutput(pBlob | '.blb', vValue, vElement1, vElement2, '', '');\r\n\t\t\t\tElse;\r\n\t\t\t\t\tTextOutput(pBlob | '.blb', vElement1, vElement2, vValue);\r\n\t\t\t\tEndIf;\r\n            EndIf;\r\n\t\t\tvIndex2 = vIndex2 + 1;\r\n\t\tEnd;\r\n\t\tvIndex1 = vIndex1 + 1;\r\n\tEnd;\r\n\t\r\nElseIf (cDimCount = 3);\r\n\r\n\tcDim1 = TABDIM(pCube, 1);\r\n\tcDim2 = TABDIM(pCube, 2);\r\n\tcDim3 = TABDIM(pCube, 3);\r\n\r\n\tcDim1Size = DIMSIZ(cDim1);\r\n\tcDim2Size = DIMSIZ(cDim2);\r\n\tcDim3Size = DIMSIZ(cDim3);\r\n\r\n\tvIndex1 = 1;\r\n\tWhile (vIndex1 <= cDim1Size);\r\n\t\tvElement1 = DIMNM(cDim1, vIndex1);\r\n\r\n\t\tvIndex2 = 1;\r\n\t\tWhile (vIndex2 <= cDim2Size);\r\n\t\t\tvElement2 = DIMNM(cDim2, vIndex2);\r\n\r\n\t\t\tvIndex3 = 1;\r\n\t\t\tWhile (vIndex3 <= cDim3Size);\r\n\t\t\t\tvElement3 = DIMNM(cDim3, vIndex3);\r\n\r\n\t\t\t\tIf (DTYPE(cDim3, vElement3) @= 'S');\r\n\t\t\t\t\tvValue = CellGetS(pCube, vElement1, vElement2, vElement3);\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvValue = NumberToString(CellGetN(pCube, vElement1, vElement2, vElement3));\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vValue @<> '');\r\n\t\t\t\t\tIf (pAlt @= 'Y');\r\n\t\t\t\t\t\tTextOutput(pBlob | '.blb', vValue, vElement1, vElement2, vElement3, '');\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tTextOutput(pBlob | '.blb', vElement1, vElement2, vElement3, vValue);\r\n\t\t\t\t\tEndIf;\r\n                EndIf;\r\n\t\t\t\tvIndex3 = vIndex3 + 1;\r\n\t\t\tEnd;\r\n\t\t\r\n\t\t\tvIndex2 = vIndex2 + 1;\r\n\t\tEnd;\r\n\t\r\n\t\tvIndex1 = vIndex1 + 1;\r\n\tEnd;\r\n\r\nElseIf (cDimCount = 4);\r\n\r\n\tcDim1 = TABDIM(pCube, 1);\r\n\tcDim2 = TABDIM(pCube, 2);\r\n\tcDim3 = TABDIM(pCube, 3);\r\n\tcDim4 = TABDIM(pCube, 4);\r\n\r\n\tcDim1Size = DIMSIZ(cDim1);\r\n\tcDim2Size = DIMSIZ(cDim2);\r\n\tcDim3Size = DIMSIZ(cDim3);\r\n\tcDim4Size = DIMSIZ(cDim4);\r\n\r\n\tvIndex1 = 1;\r\n\tWhile (vIndex1 <= cDim1Size);\r\n\t\tvElement1 = DIMNM(cDim1, vIndex1);\r\n\r\n\t\tvIndex2 = 1;\r\n\t\tWhile (vIndex2 <= cDim2Size);\r\n\t\t\tvElement2 = DIMNM(cDim2, vIndex2);\r\n\r\n\t\t\tvIndex3 = 1;\r\n\t\t\tWhile (vIndex3 <= cDim3Size);\r\n\t\t\t\tvElement3 = DIMNM(cDim3, vIndex3);\r\n\r\n\t\t\t\tvIndex4 = 1;\r\n\t\t\t\tWhile (vIndex4 <= cDim4Size);\r\n\t\t\t\t\tvElement4 = DIMNM(cDim4, vIndex4);\r\n\r\n\t\t\t\t\tIf (DTYPE(cDim4, vElement4) @= 'S');\r\n\t\t\t\t\t\tvValue = CellGetS(pCube, vElement1, vElement2, vElement3, vElement4);\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvValue = NumberToString(CellGetN(pCube, vElement1, vElement2, vElement3, vElement4));\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tIf (vValue @<> '');\r\n\t\t\t\t\t\tIf (pAlt @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(pBlob | '.blb', vValue, vElement1, vElement2, vElement3, vElement4);\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tTextOutput(pBlob | '.blb', vElement1, vElement2, vElement3, vElement4, vValue);\r\n\t\t\t\t\t\tEndIf;\r\n                    EndIf;\r\n\t\t\t\t\tvIndex4 = vIndex4 + 1;\r\n\t\t\t\tEnd;\r\n\t\t\t\t\r\n\t\t\t\tvIndex3 = vIndex3 + 1;\r\n\t\t\tEnd;\r\n\t\t\t\r\n\t\t\tvIndex2 = vIndex2 + 1;\r\n\t\tEnd;\r\n\t\t\r\n\t\tvIndex1 = vIndex1 + 1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pBlob",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAlt",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pDelimiter",
        "Prompt": "",
        "Value": "9",
        "TYpe": "String"
      },
      {
        "Name": "pQuote",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_export_hierarchy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nDatasourceASCIIDelimiter = char(9);\r\nDatasourceASCIIQuoteCharacter='';\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\t\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tprocessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', \r\n\tpDim, pSubset, pBlob, pControl);\r\nEndIf;\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nStringGlobalVariable('gTopNode');\r\nNumericGlobalVariable('gTopLevel');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_top_node',\r\n'pExecutionId', pExecutionId, 'pDim', pDim, 'pSubset', pSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t'tp_get_top_node', gTopNode, NumberToString(gTopLevel));\r\nEndIf;\r\n\r\nStringGlobalVariable('gIsInSubset');\r\n\r\ncSubsetSize = SubsetGetSize(pDim, pSubset);\r\ncTopPNode = DimensionElementPrincipalName(pDim, gTopNode);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cSubsetSize);\r\n\tvNode = SubsetGetElementName(pDim, pSubset, vIndex);\r\n\tvPNode = DimensionElementPrincipalName(pDim, vNode);\r\n\t\r\n\tvType = DTYPE(pDim, vPNode);\r\n\t\r\n\tvRealParent = '';\r\n\tIf (vPNode @<> cTopPNode);\t\t\r\n\t\tvParentCount = ELPARN(pDim, vPNode);\r\n\t\t\r\n\t\tIf (vParentCount = 1);\r\n\t\t\tvRealParent = ELPAR(pDim, vPNode, 1);\r\n\t\tElse;\r\n\t\t\tvGap = 0;\r\n\t\t\tvParentIndex = 1;\r\n\t\t\tWhile (vParentIndex <= vParentCount);\r\n\t\t\t\tvParent = ELPAR(pDim, vPNode, vParentIndex);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvParentIndexI = 0;\r\n\t\t\t\tvIndexI = 1;\r\n\t\t\t\tWhile (vIndexI <= cSubsetSize);\r\n\t\t\t\t\tvNodeI = SubsetGetElementName(pDim, pSubset, vIndexI);\r\n\t\t\t\t\tvPNodeI = DimensionElementPrincipalName(pDim, vNodeI);\r\n\t\t\t\t\tIf (vParent @= vPNodeI);\r\n\t\t\t\t\t\tvParentIndexI = vIndexI;\r\n\t\t\t\t\t\tvIndexI = cSubsetSize;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvIndexI = vIndexI + 1;\r\n\t\t\t\tEnd;\r\n\t\t\r\n\t\t\t\tIf (vParentIndexI > 0 & vIndex > vParentIndexI);\r\n\t\t\t\t\tIf (vGap = 0 % vGap > vIndex - vParentIndexI);\r\n\t\t\t\t\t\tvRealParent = vParent;\r\n\t\t\t\t\t\tvGap = vIndex - vParentIndexI;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvParentIndex = vParentIndex + 1;\r\n\t\t\tEnd;\r\n\t\t\r\n\t\t\tIf (vRealParent @= '');\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n    If (pIncludeWeight @= 'Y');\r\n    \tIf (vRealParent @= '');\r\n    \t\tvWeight = 0.0;\r\n    \tElse;\r\n\t\t\tvWeight = ELWEIGHT(pDim, vRealParent, vPNode);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tSetOutputCharacterSet(pBlob | '.blb', 'TM1CS_UTF8');\r\n\tIf (pIncludeWeight @= 'Y');\r\n\t\tTextOutput(pBlob | '.blb', vRealParent, vPNode, vType, NumberToString(vWeight));\r\n\tElse;\r\n\t\tTextOutput(pBlob | '.blb', vRealParent, vPNode, vType); \r\n\tEndIf;\r\n\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pBlob",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pIncludeWeight",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_get_all_leaf_children_in_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEscapedId');\r\n\r\n#*** Call a TI process.\r\nvReturnValue = ExecuteProcess('}tp_util_escape_id',\r\n\t'pExecutionId', pExecutionId, \r\n\t'pNode', pNode, \r\n\t'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\nvEscapedNode = gEscapedId;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (DTYPE(pDim, pNode) @<> 'C');\r\n    ProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pNewSubset) <> 0);\r\n\tSubsetDestroy(pDim, pNewSubset);\r\nEndIf;\r\n\r\nvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | pDim\r\n\t| '].[' | vEscapedNode | ']) }, 0), TM1SUBSETTOSET([' | pDim\r\n\t| '], \"' | pSubset |'\")), ['| pDim | '].[' | vEscapedNode | ']}';\r\n\r\nSubsetCreateByMdx(pNewSubset, vMDX);\r\n\r\n#*** Call a TI process.\r\nvReturnValue = ExecuteProcess('}tp_util_delete_subset_element',\r\n\t'pDim', pDim, \r\n\t'pSubset', pNewSubset, \r\n\t'pNode', pNode);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNewSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_import_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\n\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\n\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\t\t\tpExecutionId, pSourceFile, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(StringToNumber(pDelimiter));\r\nDatasourceASCIIQuoteCharacter = char(StringToNumber(pQuote));\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\n\tTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#***\r\n\r\nIf (CubeExists(pCube) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (FileExists(pSourceFile) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncDimMax = 4;\r\ncDim1 = '';\r\ncDim2 = '';\r\ncDim3 = '';\r\ncDim4 = '';\r\n\r\nvIndex = 1;\r\nWhile (vIndex <> 0);\r\n\tvDim = TABDIM(pCube, vIndex);\r\n\t\r\n\tIf (vIndex = 1);\r\n\t\tcDim1 = vDim;\r\n\tElseIf (vIndex = 2);\r\n\t\tcDim2 = vDim;\r\n\tElseIf (vIndex = 3);\r\n\t\tcDim3 = vDim;\r\n\tElseIf (vIndex = 4);\r\n\t\tcDim4 = vDim;\r\n\tEndIf;\r\n\t\r\n\tIf (vDim @<> '');\r\n\t\tvIndex = vIndex + 1;\r\n\tElse;\r\n\t\tcDimCount = vIndex - 1;\r\n\t\tvIndex = 0;\r\n\tEndIf;\r\nEnd;\r\n\r\nIf (cDimCount > cDimMax);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Dimension count:', NumberToString(cDimCount));\r\n\tEndIf;\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Split slicer\r\nvSlicer = pSlicer;\r\ncScanDelimiter = '|';\r\n\r\ncSlicer1 = '';\r\ncSlicer2 = '';\r\ncSlicer3 = '';\r\ncSlicer4 = '';\r\n\r\ncStarPos1 = 0;\r\ncStarPos2 = 0;\r\ncStarPos3 = 0;\r\ncStarPos4 = 0;\r\n\r\nvStarIndex = 0;\r\nvIndex = 1;\r\nWhile (vIndex <= cDimCount);\r\n    vScanIndex = SCAN(cScanDelimiter, vSlicer);\r\n    If (vScanIndex <> 0);\r\n    \tvScanToken = SUBST(vSlicer, 1, vScanIndex - 1);\r\n    \tvSlicer = SUBST(vSlicer, vScanIndex + 1, LONG(vSlicer) - vScanIndex);\r\n    Else;\r\n    \tvScanToken = vSlicer;\r\n    \tvSlicer = '';\r\n    EndIf;\r\n    \r\n    If (vIndex = 1);\r\n\t\tcSlicer1 = vScanToken;\r\n\tElseIf (vIndex = 2);\r\n\t\tcSlicer2 = vScanToken;\r\n\tElseIf (vIndex = 3);\r\n\t\tcSlicer3 = vScanToken;\r\n\tElseIf (vIndex = 4);\r\n\t\tcSlicer4 = vScanToken;\r\n\tEndIf;\r\n\t\r\n\tIf (vScanToken @= '*' % vScanToken @= '');\r\n\t\tvStarIndex = vStarIndex + 1;\r\n\t\t\r\n\t\tIf (vStarIndex = 1);\r\n\t\t\tcStarPos1 = vIndex;\r\n\t\tElseIf (vStarIndex = 2);\r\n\t\t\tcStarPos2 = vIndex;\r\n\t\tElseIf (vStarIndex = 3);\r\n\t\t\tcStarPos3 = vIndex;\r\n\t\tElseIf (vStarIndex = 4);\r\n\t\t\tcStarPos4 = vIndex;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tvIndex = vIndex + 1;\r\n\tIf (vSlicer @= cScanDelimiter % vSlicer @= '');\r\n\t\tvIndex = cDimCount + 1;\r\n\tEndIf;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Slicer:',\r\n\t\t\t\tcSlicer1, cSlicer2, cSlicer3, cSlicer4);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Star positions:',\r\n\t\t\t\tNumberToString(cStarPos1), NumberToString(cStarPos2), NumberToString(cStarPos3), NumberToString(cStarPos4));\r\nEndIf;\r\n\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncTM1Log = cDataLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Values:',\r\n\t\t\t\tvarValue, varElement1, varElement2, varElement3, varElement4);\r\nEndIf;\r\n\r\nvElem1 = cSlicer1;\r\nvElem2 = cSlicer2;\r\nvElem3 = cSlicer3;\r\nvElem4 = cSlicer4;\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cDimCount);\r\n\tIf (vIndex = 1 & cStarPos1 <> 0);\r\n\t\tIf (cStarPos1 = 1);\r\n\t\t\tvElem1 = varElement1;\r\n\t\tElseIf (cStarPos1 = 2);\r\n\t\t\tvElem2 = varElement1;\r\n\t\tElseIf (cStarPos1 = 3);\r\n\t\t\tvElem3 = varElement1;\r\n\t\tElseIf (cStarPos1 = 4);\r\n\t\t\tvElem4 = varElement1;\r\n\t\tEndIf;\r\n\tElseIf (vIndex = 2 & cStarPos2 <> 0);\r\n\t\tIf (cStarPos2 = 1);\r\n\t\t\tvElem1 = varElement2;\r\n\t\tElseIf (cStarPos2 = 2);\r\n\t\t\tvElem2 = varElement2;\r\n\t\tElseIf (cStarPos2 = 3);\r\n\t\t\tvElem3 = varElement2;\r\n\t\tElseIf (cStarPos2 = 4);\r\n\t\t\tvElem4 = varElement2;\r\n\t\tEndIf;\t\r\n\tElseIf (vIndex = 3 & cStarPos3 <> 0);\r\n\t\tIf (cStarPos3 = 1);\r\n\t\t\tvElem1 = varElement3;\r\n\t\tElseIf (cStarPos3 = 2);\r\n\t\t\tvElem2 = varElement3;\r\n\t\tElseIf (cStarPos3 = 3);\r\n\t\t\tvElem3 = varElement3;\r\n\t\tElseIf (cStarPos3 = 4);\r\n\t\t\tvElem4 = varElement3;\r\n\t\tEndIf;\r\n\tElseIf (vIndex = 4 & cStarPos4 <> 0);\r\n\t\tIf (cStarPos4 = 1);\r\n\t\t\tvElem1 = varElement4;\r\n\t\tElseIf (cStarPos4 = 2);\r\n\t\t\tvElem2 = varElement4;\r\n\t\tElseIf (cStarPos4 = 3);\r\n\t\t\tvElem3 = varElement4;\r\n\t\tElseIf (cStarPos4 = 4);\r\n\t\t\tvElem4 = varElement4;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'New Values:',\r\n\t\t\t\tvarValue, vElem1, vElem2, vElem3, vElem4);\r\nEndIf;\r\n\r\n\r\n#*** Insert value into cube\r\n\r\nvReturnValue = ExecuteProcess('}tp_util_insert_value_into_cube',\r\n'pCube', pCube, 'pValue', varValue, 'pElem1', vElem1, 'pElem2', vElem2, 'pElem3', vElem3, 'pElem4', vElem4);\r\n\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSlicer",
        "Prompt": "",
        "Value": "*|*|*|*|",
        "TYpe": "String"
      },
      {
        "Name": "pDelimiter",
        "Prompt": "",
        "Value": "9",
        "TYpe": "String"
      },
      {
        "Name": "pQuote",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "varValue",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varElement1",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varElement2",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varElement3",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varElement4",
        "Type": "String",
        "Position": "5",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_insert_value_into_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Calculate dimension count\r\ncDim1 = '';\r\ncDim2 = '';\r\ncDim3 = '';\r\ncDim4 = '';\r\n\r\nvIndex = 1;\r\nWhile (vIndex <> 0);\r\n\tvDim = TABDIM(pCube, vIndex);\r\n\t\r\n\tIf (vIndex = 1);\r\n\t\tcDim1 = vDim;\r\n\tElseIf (vIndex = 2);\r\n\t\tcDim2 = vDim;\r\n\tElseIf (vIndex = 3);\r\n\t\tcDim3 = vDim;\r\n\tElseIf (vIndex = 4);\r\n\t\tcDim4 = vDim;\r\n\tEndIf;\r\n\t\r\n\tIf (vDim @<> '');\r\n\t\tvIndex = vIndex + 1;\r\n\tElse;\r\n\t\tcDimCount = vIndex - 1;\r\n\t\tvIndex = 0;\r\n\tEndIf;\r\nEnd;\r\n\r\n\r\n#*** Check elements\r\nIf (cDimCount = 2);\r\n\tIf (pElem1 @= '' % pElem2 @= '');\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (cDimCount = 3);\r\n\tIf (pElem1 @= '' % pElem2 @= '' % pElem3 @= '');\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (cDimCount = 4);\r\n\tIf (pElem1 @= '' % pElem2 @= '' % pElem3 @= '' % pElem4 @= '');\r\n\t\tProcessError;\r\n\tEndIf;\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** If element is '?', the element is a wild card and it means any element.\r\nIf (cDimCount = 2);\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0);\r\n\t\tIf (DTYPE(cDim2, pElem2) @= 'S');\r\n\t\t\tCellPutS(pValue, pCube, pElem1, pElem2);\r\n\t\tElse;\r\n\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tIf (pElem1 @= '?' & DIMIX(cDim2, pElem2) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim1);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim1, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim2, pElem2) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, vElem, pElem2);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, vElem, pElem2);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & pElem2 @= '?');\r\n\t\tvDimSize = DIMSIZ(cDim2);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim2, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim2, vElem) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, vElem);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, vElem);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\nElseIf (cDimCount = 3);\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0 & DIMIX(cDim3, pElem3) <> 0);\r\n\t\tIf (DTYPE(cDim3, pElem3) @= 'S');\r\n\t\t\tCellPutS(pValue, pCube, pElem1, pElem2, pElem3);\r\n\t\tElse;\r\n\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2, pElem3);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tIf (pElem1 @= '?' & DIMIX(cDim2, pElem2) <> 0 & DIMIX(cDim3, pElem3) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim1);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim1, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim3, pElem3) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, vElem, pElem2, pElem3);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, vElem, pElem2, pElem3);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & pElem2 @= '?' & DIMIX(cDim3, pElem3) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim2);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim2, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim3, pElem3) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, vElem, pElem3);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, vElem, pElem3);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0 & pElem3 @= '?');\r\n\t\tvDimSize = DIMSIZ(cDim3);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim3, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim3, vElem) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, pElem2, vElem);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2, vElem);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\nElseIf (cDimCount = 4);\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0 & DIMIX(cDim3, pElem3) <> 0 & DIMIX(cDim4, pElem4) <> 0);\r\n\t\tIf (DTYPE(cDim4, pElem4) @= 'S');\r\n\t\t\tCellPutS(pValue, pCube, pElem1, pElem2, pElem3, pElem4);\r\n\t\tElse;\r\n\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2, pElem3, pElem4);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tIf (pElem1 @= '?' & DIMIX(cDim2, pElem2) <> 0 & DIMIX(cDim3, pElem3) <> 0 & DIMIX(cDim4, pElem4) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim1);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim1, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim4, pElem4) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, vElem, pElem2, pElem3, pElem4);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, vElem, pElem2, pElem3, pElem4);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & pElem2 @= '?' & DIMIX(cDim3, pElem3) <> 0 & DIMIX(cDim4, pElem4) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim2);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim2, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim4, pElem4) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, vElem, pElem3, pElem4);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, vElem, pElem3, pElem4);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0 & pElem3 @= '?' & DIMIX(cDim4, pElem4) <> 0);\r\n\t\tvDimSize = DIMSIZ(cDim3);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim3, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim4, pElem4) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, pElem2, vElem, pElem4);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2, vElem, pElem4);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cDim1, pElem1) <> 0 & DIMIX(cDim2, pElem2) <> 0 & DIMIX(cDim3, pElem3) <> 0 & pElem4 @= '?');\r\n\t\tvDimSize = DIMSIZ(cDim4);\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= vDimSize);\r\n\t\t\tvElem = DIMNM(cDim4, vIndex);\r\n\t\t\t\r\n\t\t\tIf (DTYPE(cDim4, vElem) @= 'S');\r\n\t\t\t\tCellPutS(pValue, pCube, pElem1, pElem2, pElem3, vElem);\r\n\t\t\tElse;\r\n\t\t\t\tCellPutN(StringToNumber(pValue), pCube, pElem1, pElem2, pElem3, vElem);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\tEndIf;\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pValue",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pElem1",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem2",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem3",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem4",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_is_dim_in_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIf (CubeExists(pCube) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (pDim_1 @<> '' & DimensionExists(pDim_1) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (pDim_2 @<> '' & DimensionExists(pDim_2) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (pDim_3 @<> '' & DimensionExists(pDim_3) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\nIf (pElem_1 @<> '' & DIMIX(pDim_1, pElem_1) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (pElem_2 @<> '' & DIMIX(pDim_2, pElem_2) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (pElem_3 @<> '' & DIMIX(pDim_3, pElem_3) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\nNumericGlobalVariable('gDim_1IndexInCube');\r\nNumericGlobalVariable('gDim_2IndexInCube');\r\nNumericGlobalVariable('gDim_3IndexInCube');\r\nStringGlobalVariable('gSecurityOverlayTokenString');\r\nStringGlobalVariable('gImportPattern');\r\ngDim_1IndexInCube = 0;\r\ngDim_2IndexInCube = 0;\r\ngDim_3IndexInCube = 0;\r\ngSecurityOverlayTokenString = '';\r\ngImportPattern = '';\r\n\r\n\r\nvIndex = 1;\r\nWhile (vIndex > 0);\r\n\tvCubeDim = TABDIM(pCube, vIndex);\r\n\r\n\tIf (vCubeDim @= '');\r\n\t\tvIndex = -1;\r\n\tElseIf (pDim_1 @<> '' & vCubeDim @= pDim_1);\t\r\n\t\tgDim_1IndexInCube = vIndex;\r\n\t\tvSingleToken = '1';\r\n\t\tIf (pElem_1 @<> '');\r\n\t\t\tvSinglePattern = pElem_1 | '|';\r\n\t\tElse;\r\n\t\t\tvSinglePattern = '?|';\r\n\t\tEndIf;\r\n\tElseIf (pDim_2 @<> '' & vCubeDim @= pDim_2);\t\r\n\t\tgDim_2IndexInCube = vIndex;\r\n\t\tvSingleToken = '1';\r\n\t\tIf (pElem_2 @<> '');\r\n\t\t\tvSinglePattern = pElem_2 | '|';\r\n\t\tElse;\r\n\t\t\tvSinglePattern = '?|';\r\n\t\tEndIf;\r\n\tElseIf (pDim_3 @<> '' & vCubeDim @= pDim_3);\t\r\n\t\tgDim_3IndexInCube = vIndex;\r\n\t\tvSingleToken = '1';\r\n\t\tIf (pElem_3 @<> '');\r\n\t\t\tvSinglePattern = pElem_3 | '|';\r\n\t\tElse;\r\n\t\t\tvSinglePattern = '?|';\r\n\t\tEndIf;\r\n\tElse;\r\n\t\tvSingleToken = '0';\r\n\t\tvSinglePattern = '*|';\r\n\tEndIf;\r\n\t\r\n\tIf (vIndex > 0);\r\n\t\tIf (vIndex > 1);\r\n\t\t\tvSingleToken = ':' | vSingleToken;\r\n\t\tEndIf;\r\n\t\tgSecurityOverlayTokenString = gSecurityOverlayTokenString | vSingleToken;\r\n\tEndIf;\r\n\t\r\n\tgImportPattern = gImportPattern | vSinglePattern;\r\n\t\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim_1",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pDim_2",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pDim_3",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem_1",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem_2",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      },
      {
        "Name": "pElem_3",
        "Prompt": "",
        "Value": "",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_is_in_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', pDim, pSubset, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nStringGlobalVariable('gIsInSubset');\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ngIsInSubset = 'N';\r\n#IF(1)\r\nIf (DIMIX(pDim, pNode) <> 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node is in dimension', pNode, pDim);\r\n\tEndIf;\r\n\r\n\tcNodePName = DimensionElementPrincipalName(pDim, pNode);\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node name: ' | cNodePName);\r\n\tEndIf;\r\n\r\n\tcSubsetSize = SubsetGetSize(pDim, pSubset);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Subset size: ' | NumberToString(cSubsetSize));\r\n\tEndIf;\r\n\r\n\t#IF(1.1)\r\n\tIf (cSubsetSize > 1);\r\n\t\r\n\t\t#*** Escape the node to ensure valid MDX\r\n\t\tStringGlobalVariable('gEscapedId');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t\t'pExecutionId', pExecutionId, 'pNode', cNodePName, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\t\tEndIf;\t\t\t\t\r\n\r\n\t\tIf (CubeExists(pDim) = 0);\r\n\t\t\tvMDX = 'EXCEPT(TM1SubsetToSet([' | pDim | '], \"' | pSubset | '\"), {[' | pDim | '].[' | gEscapedId | ']})';\r\n\t\tElse;\r\n\t\t\tvMDX = 'EXCEPT(TM1SubsetToSet([' | pDim | '].[' | pDim | '] , \"' | pSubset | '\"), {[' | pDim | '].[' | gEscapedId | ']})';\r\n\t\tEndIf;\r\n\t\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'MDX: ', vMDX);\r\n\t\tEndIf;\r\n\r\n\t\tcSubsetLess = 'tp_temp_less_' | pExecutionId;\r\n\t\tSubsetDestroy(pDim, cSubsetLess);\r\n\t\tSubsetCreateByMdx(cSubsetLess, vMDX);\r\n\r\n\t\tIf (cSubsetSize > SubsetGetSize(pDim, cSubsetLess));\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node is in subset(0)');\r\n\t\t\tEndIf;\r\n\t\t\tgIsInSubset = 'Y';\r\n\t\tElse;\r\n\t\t\tgIsInSubset = 'N';\r\n\t\tEndIf;\r\n\r\n\t\tSubsetDestroy(pDim, cSubsetLess);\r\n\r\n\t#IF(1.1)\r\n\tElseIf (cSubsetSize = 1);\r\n\r\n\t\tcOnlyMember = SubsetGetElementName(pDim, pSubset, 1);\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Only member: ' | cOnlyMember);\r\n\t\tEndIf;\r\n\t\t\r\n\t\tcOnlyMemberPName = DimensionElementPrincipalName(pDim, cOnlyMember);\r\n\t\tIf (cOnlyMemberPName @= cNodePName);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node is in subset(1)');\r\n\t\t\tEndIf;\r\n\t\t\tgIsInSubset = 'Y';\r\n\t\tElse;\r\n\t\t\tgIsInSubset = 'N';\r\n\t\tEndIf;\r\n\r\n\t#IF(1.1)\r\n\tElse;\r\n\t\tgIsInSubset = 'N';\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'gIsInSubset: ' | gIsInSubset);\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_truncate_error_dim",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nvDim = '}tp_process_guids';\r\nvTotalElem = DIMSIZ(vDim);\r\n\r\nlooper = vTotalElem;\r\nWhile (looper >=1);\r\n\tvElem = DIMNM(vDim, looper);\r\n\tIF (vElem @<>'All');\r\n\t\tDimensionElementDelete(vDim, vElem);\r\n\tEndif;\r\n\tlooper = looper -1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": null,
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_update_hierarchy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Check dimension\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check subset\r\n\r\ncSubsetSize = 0;\r\nIf (pSubset @<> '');\r\n\tIf (SubsetExists(pDim, pSubset) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcSubsetSize = SubsetGetSize(pDim, pSubset);\r\nEndIf;\r\n\r\n#*** Check parent\r\n\r\ncParentPName = '';\r\ncParentDimIndex = 0;\r\ncParentSubsetIndex = 0;\r\nIf (pParent @<> '');\r\n\tcParentDimIndex = DIMIX(pDim, pParent);\r\n\tIf (cParentDimIndex = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t#If (DTYPE(pDim, pParent) @<> 'C');\r\n\t#\tProcessError;\r\n\t#EndIf;\r\n\tcParentPName = DimensionElementPrincipalName(pDim, pParent);\r\n\t\r\n\tIf (pSubset @<> '');\r\n\t\tvIndex = 1;\r\n\t\twhile (vIndex <= cSubsetSize);\r\n\t\t\tvElement = SubsetGetElementName(pDim, pSubset, vIndex);\r\n\t\t\tvElementPName = DimensionElementPrincipalName(pDim, vElement);\r\n\t\t\tIf (cParentPName @= vElementPName);\r\n\t\t\t\tcParentSubsetIndex = vIndex;\r\n\t\t\t\tvIndex = cSubsetSize;\r\n\t\t\tEndIf;\r\n\t\t\tvIndex = vIndex +1;\r\n\t\tEnd;\r\n\t\t\r\n\t\tIf (cParentSubsetIndex = 0);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** Check Node\r\n\r\nIf (pNode @= '');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeDimIndex = 0;\r\ncNodeSubsetIndex = 0;\r\ncNodePName = DimensionElementPrincipalName(pDim, pNode);\r\ncNodeDimIndex = DIMIX(pDim, pNode);\r\nIf (cNodeDimIndex > 0);\r\n\tvIndex = 1;\r\n\twhile (vIndex <= cSubsetSize);\r\n\t\tvElement = SubsetGetElementName(pDim, pSubset, vIndex);\r\n\t\tvElementPName = DimensionElementPrincipalName(pDim, vElement);\r\n\t\tIf (cNodePName @= vElementPName);\r\n\t\t\tcNodeSubsetIndex = vIndex;\r\n\t\t\tvIndex = cSubsetSize;\r\n\t\tEndIf;\r\n\t\tvIndex = vIndex +1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** Check node type\r\n\r\nIf (pNodeType @<> 'N' & pNodeType @<> 'C' & pNodeType @<> 'S');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Convert weight\r\n\r\ncWeight = StringToNumber(pWeight);\r\n\r\n#*** Action\r\n\r\nIf (pAction @= 'ADD');\r\n\r\n\tIf (cNodeDimIndex = 0);\r\n\r\n\t\tIf (cParentDimIndex = 0);\r\n\t\t\tDimensionElementInsert(pDim, '', pNode, pNodeType);\r\n\t\tElse;\r\n\t\t\tvNode = DIMNM(pDim, cParentDimIndex + 1);\r\n\t\t\tIf (vNode @<> '');\r\n\t\t\t\tDimensionElementInsert(pDim, vNode, pNode, pNodeType);\r\n\t\t\tElse;\r\n\t\t\t\tDimensionElementInsert(pDim, '', pNode, pNodeType);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\tElse;\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (cParentPName @<> '');\r\n\t\tDimensionElementComponentAdd(pDim, cParentPName, pNode, cWeight);\r\n\tEndIf;\r\n\r\nElseIf (pAction @= 'DELETE');\r\n\r\n\tIf (cNodeDimIndex = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tDimensionElementDelete(pDim, pNode);\r\nElseIf (pAction @= 'REMOVE_PARENT');\r\n\tIf (cParentDimIndex > 0);\r\n\t\tDimensionElementComponentDelete(pDim, pParent, pNode);\r\n\tEndIf;\r\n\t\r\n\tIf (pSubset @<> '' & cNodeSubsetIndex > 0);\r\n\t\tSubsetElementDelete(pDim, pSubset, cNodeSubsetIndex);\r\n\tEndIf;\r\nElseIf (pAction @= 'INSERT_CHILD');\r\n\tIf (cParentDimIndex > 0);\r\n\t\tIf (pNodeType @<> DTYPE(pDim, pNode));\r\n\t\t\tDimensionElementDelete(pDim, pNode);\r\n\t\t\tvNode = DIMNM(pDim, cParentDimIndex + 1);\r\n\t\t\tIf (vNode @<> '');\r\n\t\t\t\tDimensionElementInsert(pDim, vNode, pNode, pNodeType);\r\n\t\t\tElse;\r\n\t\t\t\tDimensionElementInsert(pDim, '', pNode, pNodeType);\r\n    \t\tEndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tDimensionElementComponentAdd(pDim, cParentPName, pNode, cWeight);\r\n\tElse;\r\n\t\tDimensionElementInsert(pDim, '', pNode, pNodeType);\r\n\tEndIf;\r\nElseIf (pAction @= 'MODIFY_WEIGHT');\r\n\tIf (cNodeDimIndex > 0);\r\n\t    If (cParentDimIndex > 0 & ELISPAR(pDim, pParent, pNode) = 1);\r\n\t\t\tDimensionElementComponentDelete(pDim, cParentPName, pNode);\r\n\t\t\tDimensionElementComponentAdd(pDim, cParentPName, pNode, cWeight);\r\n\t\tElse;\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tElse;\r\n\t\tProcessError;\r\n\tEndIf;\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n\r\n#*** Action\r\n\r\nIf (pAction @= 'ADD');\r\n\r\n\tIf (cParentPName @<> '');\r\n\t\tIf (pSubset @<> '');\r\n\t\t    If (pNode @<> SubsetGetElementName(pDim, pSubset, cParentSubsetIndex + 1));\r\n\t\t\t\tSubsetElementInsert(pDim, pSubset, pNode, cParentSubsetIndex + 1);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\nElseIf (pAction @= 'DELETE');\r\n\t# Do nothing\r\nElseIf (pAction @= 'REMOVE_PARENT');\r\n\t# Do nothing\r\nElseIf (pAction @= 'INSERT_CHILD');\r\n\tIf (cParentDimIndex > 0);\r\n\t\tIf (pSubset @<> '');\r\n\t\t\tIf (pNode @<> SubsetGetElementName(pDim, pSubset, cParentSubsetIndex + 1));\r\n\t\t\t\tSubsetElementInsert(pDim, pSubset, pNode, cParentSubsetIndex + 1);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tElse;\r\n\t\tSubsetElementInsert(pDim, pSubset, pNode, cParentSubsetIndex + 1);\r\n\tEndIf;\r\nElseIf (pAction @= 'MODIFY_WEIGHT');\r\n\t# Do nothing\r\nElse;\r\n\tProcessError;\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pParent",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNodeType",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pWeight",
        "Prompt": "",
        "Value": "1.0",
        "TYpe": "String"
      },
      {
        "Name": "pAction",
        "Prompt": "",
        "Value": "ADD",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_update_hierarchy_from_file",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', 'Y');\r\n\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\n\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\t\t\tpExecutionId, pSourceFile);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(StringToNumber(pDelimiter));\r\nDatasourceASCIIQuoteCharacter = char(0);\r\nDatasourceASCIIHeaderRecords = 0;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\n\tTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#*** Check file\r\n\r\nIf (FileExists(pSourceFile) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check dimension\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check subset\r\n\r\ncSubsetSize = 0;\r\nIf (pSubset @<> '');\r\n\tIf (SubsetExists(pDim, pSubset) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcSubsetSize = SubsetGetSize(pDim, pSubset);\r\nEndIf;\r\n\r\n#***\r\nvWeight = 1;\r\ncAppId = SUBST(pDim, 11, LONG(pDim) -10);\r\ncApprovalDim = ATTRS('}tp_applications',cAppId,  'ApprovalDimension');\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (varParent @<> '' & varNode @<>'');\r\n\tIF (DIMIX(cApprovalDim, varParent) >0 & DIMIX (cApprovalDim, varNode) >0 & ELISPAR(cApprovalDim, varParent, varNode) =1);\r\n\t\tvWeight = ElementWeight(cApprovalDim, cApprovalDim, varParent, varNode);\r\n\tEndif;\r\nEndif;\r\n\r\nvReturnValue = ExecuteProcess('}tp_util_update_hierarchy', \r\n'pExecutionId', pExecutionId, 'pDim', pDim, 'pSubset', pSubset,\r\n'pParent', varParent, 'pNode', varNode, 'pNodeType', varNodeType, 'pWeight', NumberToString(vWeight), 'pAction', varAction);\r\n\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncTM1Log = cEpilogLog;\r\n\r\n#*** Sort order\r\n\r\nStringGlobalVariable('gTopNode');\r\nvReturnValue = ExecuteProcess('}tp_get_top_node', 'pExecutionId', pExecutionId,'pDim', pDim, 'pSubset', pSubset, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nSubsetDeleteAllElements(pDim, pSubset);\r\nSubsetElementInsert(pDim, pSubset, gTopNode, 0);\r\nvTotalChildren = ELCOMPN(pDim, gTopNode);\r\nIf (vTotalChildren >= 1);\r\n\tvReturnValue = ExecuteProcess('}tp_util_add_direct_children_to_subset', \r\n\t\t'pExecutionId', pExecutionId,'pDim', pDim,\r\n\t\t'pSubset', pSubset, 'pParent', gTopNode);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\t\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSourceFile",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDelimiter",
        "Prompt": "",
        "Value": "9",
        "TYpe": "String"
      }
    ],
    "Variables": [
      {
        "Name": "varAction",
        "Type": "String",
        "Position": "1",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varParent",
        "Type": "String",
        "Position": "2",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varNode",
        "Type": "String",
        "Position": "3",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varNodeType",
        "Type": "String",
        "Position": "4",
        "StartByte": "0",
        "EndByte": "0"
      },
      {
        "Name": "varWeight",
        "Type": "String",
        "Position": "5",
        "StartByte": "0",
        "EndByte": "0"
      }
    ],
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_util_update_node_in_subset",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#<<set_log$'Y'$'Logs\\'>>\r\n\r\n### action=init_log:begin ###\r\n\r\na_pExecutionId = pExecutionId;\r\n\r\na_vLogPrefix = GetProcessName();\r\nIf (SUBST(a_vLogPrefix, 1, 1) @= '}');\r\n\ta_vLogPrefix = SUBST(a_vLogPrefix, 2, (LONG(a_vLogPrefix) - 1));\r\nEndIf;\r\n\r\n#*** Check tp_config dimension\r\na_cConfigDim = '}tp_config';\r\n\r\nIf (DimensionExists(a_cConfigDim) = 1);\r\n\tglobal_GenerateLog = ATTRS(a_cConfigDim, 'Generate TI Log', 'String Value');\r\n\ta_cLogDirectory = ATTRS(a_cConfigDim, 'Log Directory', 'String Value');\r\n\tIf (a_cLogDirectory @<> '' & SUBST(a_cLogDirectory, (LONG(a_cLogDirectory) - 1), 1) @<> '\\');\r\n\t\ta_cLogDirectory = a_cLogDirectory | '\\';\r\n\tEndIf;\r\n\t\r\n\tglobal_PrologLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_prolog.log';\r\n\tglobal_EpilogLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_epilog.log';\r\n\tglobal_DataLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_data.log';\r\n\tglobal_MetadataLog = a_cLogDirectory | a_vLogPrefix | '_' | a_pExecutionId | '_metadata.log';\r\nElse;\r\n\tglobal_GenerateLog = 'Y';\r\n\tglobal_PrologLog = a_vLogPrefix | '_' | a_pExecutionId | '_prolog.log';\r\n\tglobal_EpilogLog = a_vLogPrefix | '_' | a_pExecutionId | '_epilog.log';\r\n\tglobal_DataLog = a_vLogPrefix | '_' | a_pExecutionId | '_data.log';\r\n\tglobal_MetadataLog = a_vLogPrefix | '_' | a_pExecutionId | '_metadata.log';\r\nEndIf;\r\n\r\n### action=init_log:end ###\r\n\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nvPosition = StringToNumber(pPosition);\r\nvRealPosition = 0;\r\nvNode = '';\r\nIf (pNode @<> '');\r\n\r\n\tIf (DIMIX(pDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcPrincipalNodeName = DimensionElementPrincipalName(pDim, pNode);\r\n\t\r\n### action=p_log:begin ###\r\n\r\nb_pMessage = 'Principal Name: ' | cPrincipalNodeName;\r\n\r\n\r\n### action=log:begin ###\r\n\r\nb_a_pSection = 'prolog';\r\nb_a_pMessage = b_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (b_a_pSection @= 'prolog');\r\n\t\tb_a_cTM1Log = global_PrologLog;\r\n\tElseIf (b_a_pSection @= 'epilog');\r\n\t\tb_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (b_a_pSection @= 'data');\r\n\t\tb_a_cTM1Log = global_DataLog;\r\n\tElseIf (b_a_pSection @= 'metadata');\r\n\t\tb_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\tb_a_cTM1Log = b_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(b_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), b_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\tcSubsetSize = SubsetGetSize(pDim, pSubset);\r\n\tvIndex = 1;\r\n\twhile(vIndex <= cSubsetSize);\r\n\t\tvElement = SubsetGetElementName(pDim, pSubset, vIndex);\r\n\t\t\r\n### action=p_log:begin ###\r\n\r\nc_pMessage = 'vElement: ' | vElement;\r\n\r\n\r\n### action=log:begin ###\r\n\r\nc_a_pSection = 'prolog';\r\nc_a_pMessage = c_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (c_a_pSection @= 'prolog');\r\n\t\tc_a_cTM1Log = global_PrologLog;\r\n\tElseIf (c_a_pSection @= 'epilog');\r\n\t\tc_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (c_a_pSection @= 'data');\r\n\t\tc_a_cTM1Log = global_DataLog;\r\n\tElseIf (c_a_pSection @= 'metadata');\r\n\t\tc_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\tc_a_cTM1Log = c_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(c_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), c_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\t\tIf (cPrincipalNodeName @= vElement);\r\n\t\t\tvRealPosition = vIndex;\r\n\t\t\tvIndex = cSubsetSize;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\n\tvNode = pNode;\r\n\r\nElse;\r\n\r\n\tIf (pAdd @= 'Y');\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (vPosition <= 0 % vPosition >= SubsetGetSize(pDim, pSubset));\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tvNode = SubsetGetElementName(pDim, pSubset, vPosition);\r\n\r\nEndIf;\r\n\r\n\r\nIf (pAdd @= 'Y');\r\n\r\n\tIf (vRealPosition = 0);\r\n\r\n\t\tIf (vPosition = 0);\r\n\t\t\tvPosition = SubsetGetSize(pDim, pSubset) + 1;\r\n\t\tEndIf;\r\n\r\n\t\tIf (vPosition <= 0 % vPosition > SubsetGetSize(pDim, pSubset) + 1);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tSubsetElementInsert(pDim, pSubset, vNode, vPosition);\r\n\t\t\r\n### action=p_log:begin ###\r\n\r\nd_pMessage = 'Only Insert';\r\n\r\n\r\n### action=log:begin ###\r\n\r\nd_a_pSection = 'prolog';\r\nd_a_pMessage = d_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (d_a_pSection @= 'prolog');\r\n\t\td_a_cTM1Log = global_PrologLog;\r\n\tElseIf (d_a_pSection @= 'epilog');\r\n\t\td_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (d_a_pSection @= 'data');\r\n\t\td_a_cTM1Log = global_DataLog;\r\n\tElseIf (d_a_pSection @= 'metadata');\r\n\t\td_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\td_a_cTM1Log = d_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(d_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), d_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\tElse;\r\n\t\tIf (vPosition <> vRealPosition);\r\n\t\t\tSubsetElementDelete(pDim, pSubset, vRealPosition);\r\n\t\t\tSubsetElementInsert(pDim, pSubset, vNode, vPosition);\r\n\t\t\t\r\n### action=p_log:begin ###\r\n\r\nf_pMessage = 'Delete and Insert';\r\n\r\n\r\n### action=log:begin ###\r\n\r\nf_a_pSection = 'prolog';\r\nf_a_pMessage = f_pMessage;\r\n\r\nIf (global_GenerateLog @= 'Y');\r\n\tIf (f_a_pSection @= 'prolog');\r\n\t\tf_a_cTM1Log = global_PrologLog;\r\n\tElseIf (f_a_pSection @= 'epilog');\r\n\t\tf_a_cTM1Log = global_EpilogLog;\r\n\tElseIf (f_a_pSection @= 'data');\r\n\t\tf_a_cTM1Log = global_DataLog;\r\n\tElseIf (f_a_pSection @= 'metadata');\r\n\t\tf_a_cTM1Log = global_MetadataLog;\r\n\tElse;\r\n\t\tf_a_cTM1Log = f_a_pSection;\r\n\tEndIf;\r\n\t\r\n\tTextOutput(f_a_cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), f_a_pMessage);\r\nEndIf;\r\n\r\n### action=log:end ###\r\n\r\n\r\n### action=p_log:end ###\r\n\r\n\t\tEndIf;\r\n\r\n\tEndIf;\r\n\r\nElse;\r\n\r\n\tIf (vRealPosition > 0);\r\n\t\tSubsetElementDelete(pDim, pSubset, vRealPosition);\r\n\tElse;\r\n\t\tIf (vNode @<> '');\r\n\t\t\tSubsetElementDelete(pDim, pSubset, vIndex);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSubset",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pPosition",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAdd",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__enter__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__enter__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '2' % cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'Viewed');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf (TM1User @= cCurrentOwnerId);\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__enter__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__execute_action__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__execute_action__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode,\r\n\t\t'pAction=' | pAction);\r\nEndIf;\r\n\r\n#****** Action Dispatcher\r\nIf (pAction @= 'ENTER');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__enter__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'OWN');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__own__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'RELEASE');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__release__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'SAVE');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__save__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'OFFLINE');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__offline__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'ONLINE');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__online__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (pAction @= 'LEAVE');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_workflow__leave__central',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', pNode);\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__execute_action__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pAction",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__leave__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__leave__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '2' % cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'Viewed');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf (TM1User @= cCurrentOwnerId);\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__leave__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__offline__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__offline__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'Offline');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf (TM1User @= cCurrentOwnerId);\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, 'Offline');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__offline__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__online__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__online__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf (TM1User @= cCurrentOwnerId);\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__online__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__own__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__own__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '0' % cState @= '') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set ownership\r\n\t\ttUserId = DimensionElementPrincipalName('}Clients', TM1User);\r\n\r\n\t\t#*** Get user display name\r\n\t\ttUserDisplayName = ATTRS('}Clients', tUserId, '}TM1_DefaultDisplayValue');\r\n\t\tIf (tUserDisplayName @= '');\r\n\t\t\ttUserDisplayName = tUserId;\r\n\t\tEndIf;\r\n\r\n\t\tCellPutS(tUserDisplayName, cStateCube, cStateMember, 'CurrentOwner');\r\n\t\tCellPutS(tUserId, cStateCube, cStateMember, 'CurrentOwnerId');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t#*** Change node state\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('2', cStateCube, cStateMember, 'State');\r\n\r\n\t\t#*** Set state change user and time\r\n\t\tCellPutS(cUserDisplayName, cStateCube, cStateMember, 'StateChangeUser');\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StateChangeDate');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set ownership\r\n\t\ttUserId = DimensionElementPrincipalName('}Clients', TM1User);\r\n\r\n\t\t#*** Get user display name\r\n\t\ttUserDisplayName = ATTRS('}Clients', tUserId, '}TM1_DefaultDisplayValue');\r\n\t\tIf (tUserDisplayName @= '');\r\n\t\t\ttUserDisplayName = tUserId;\r\n\t\tEndIf;\r\n\r\n\t\tCellPutS(tUserDisplayName, cStateCube, cStateMember, 'CurrentOwner');\r\n\t\tCellPutS(tUserId, cStateCube, cStateMember, 'CurrentOwnerId');\r\n\r\n\t\t#*** Set state change user and time\r\n\t\tCellPutS(cUserDisplayName, cStateCube, cStateMember, 'StateChangeUser');\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StateChangeDate');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__own__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__release__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__release__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf ((CellGetS('}ClientGroups', TM1User, 'ADMIN') @<> '') % (TM1User @= cCurrentOwnerId));\r\n\r\n\t\t\t#*** Clear ownership\r\n\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'CurrentOwner');\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'CurrentOwnerId');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'BeingEdited');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'StartEditingDate');\r\n\r\n\t\t\t#*** Set State Member Info\r\n\t\t\tCellPutS('', cStateCube, cStateMember, 'Offline');\r\n\t\tElse;\r\n\r\n\t\t\t#*** Write to Error Cube\r\n\t\t\tIf (~(CellGetS('}ClientGroups', TM1User, 'ADMIN') @<> '') & ~(TM1User @= cCurrentOwnerId));\r\n\r\n\t\t\t\t#*** Call TI process\r\n\t\t\t\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', GetProcessName(), \r\n\t\t\t\t\t'pErrorCode', 'TI_WRONG_OWNER', \r\n\t\t\t\t\t'pErrorDetails', TM1User|',' |cCurrentOwnerId, \r\n\t\t\t\t\t'pControl', 'Y');\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\t#*** Change node state\r\n\r\n\t\t#*** Set State Member Info\r\n\t\tCellPutS('0', cStateCube, cStateMember, 'State');\r\n\r\n\t\t#*** Set state change user and time\r\n\t\tCellPutS(cUserDisplayName, cStateCube, cStateMember, 'StateChangeUser');\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'StateChangeDate');\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__release__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow__save__central",
    "HasSecurityAccess": true,
    "PrologProcedure": "#******\r\n#******\r\n#***BEGIN(Prolog): }tp_workflow__save__central\r\n#******\r\n\r\n#****** Initiate prolog\r\n\r\n#*** Initiate Log File\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nStringGlobalVariable('gMetadataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_get_log_file_names',\r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pControl', 'Y');\r\n\tIf (tReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncMetadataLog = gMetadataLog;\r\n\r\n#*** Set Log File\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'pExecutionId=' | pExecutionId,\r\n\t\t'pTime=' | pTime,\r\n\t\t'pAppId=' | pAppId,\r\n\t\t'pNode=' | pNode);\r\nEndIf;\r\n\r\n#*** Get user display name\r\ncUserDisplayName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cUserDisplayName @= '');\r\n\tcUserDisplayName = TM1User;\r\nEndIf;\r\n\r\n#*** Get Application Attributes\r\ncApprovalDimension = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId,  'IsActive');\r\ncApprovalShadowDimension = ATTRS('}tp_applications', pAppId,  'ApprovalShadowDimension');\r\ncVersion = ATTRS('}tp_applications', pAppId,  'Version');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId,  'SecurityMethod');\r\ncVersionDimension = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncCubeViews = ATTRS('}tp_applications', pAppId,  'CubeViews');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\tcApprovalDimension,\r\n\t\tcApprovalSubset,\r\n\t\tcIsActive,\r\n\t\tcApprovalShadowDimension,\r\n\t\tcVersion,\r\n\t\tcSecurityMethod,\r\n\t\tcVersionDimension,\r\n\t\tcCubeViews,\r\n\t\tcBounceMode);\r\nEndIf;\r\n\r\n#*** Get User Permissions\r\n\r\n#*** Define global variables\r\nStringGlobalVariable('gEdit');\r\nStringGlobalVariable('gOwn');\r\nStringGlobalVariable('gOffline');\r\n\r\n#*** Call TI process\r\ntReturnValue = ExecuteProcess('}tp_get_user_root_permissions',\r\n\t'pGuid', pExecutionId, \r\n\t'pAppId', pAppId, \r\n\t'pUser', TM1User);\r\nIf (tReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\ncgEdit = gEdit;\r\ncgOwn = gOwn;\r\ncgOffline = gOffline;\r\n\r\ncDimension = '}tp_applications';\r\ncNode = pAppId;\r\n\r\n#*** Get node type.\r\n\r\n#*** Write to Error Cube\r\nIf (DIMIX(cDimension, cNode) = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST', \r\n\t\t'pErrorDetails', cDimension| ', ' |cNode, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\ncNodeType = DTYPE(cDimension, cNode);\r\n\r\n#*** Get State Cube and Member\r\ncStateCube = '}tp_central_application_state';\r\ncStateMember = pAppId;\r\n\r\n#*** Get State Member Info\r\ncState = CellGetS(cStateCube, cStateMember, 'State');\r\ncViewed = CellGetS(cStateCube, cStateMember, 'Viewed');\r\ncSaved = CellGetS(cStateCube, cStateMember, 'Saved');\r\ncReviewed = CellGetS(cStateCube, cStateMember, 'Reviewed');\r\ncBeingEdited = CellGetS(cStateCube, cStateMember, 'BeingEdited');\r\ncOffline = CellGetS(cStateCube, cStateMember, 'Offline');\r\ncCurrentOwner = CellGetS(cStateCube, cStateMember, 'CurrentOwner');\r\ncCurrentOwnerId = CellGetS(cStateCube, cStateMember, 'CurrentOwnerId');\r\ncReviewer = CellGetS(cStateCube, cStateMember, 'Reviewer');\r\ncTakeOwnershipNode = CellGetS(cStateCube, cStateMember, 'TakeOwnershipNode');\r\ncStartEditingDate = CellGetS(cStateCube, cStateMember, 'StartEditingDate');\r\ncStateChangeUser = CellGetS(cStateCube, cStateMember, 'StateChangeUser');\r\ncStateChangeDate = CellGetS(cStateCube, cStateMember, 'StateChangeDate');\r\ncDataChangeUser = CellGetS(cStateCube, cStateMember, 'DataChangeUser');\r\ncDataChangeDate = CellGetS(cStateCube, cStateMember, 'DataChangeDate');\r\n\r\n#****** Start workflow business logic\r\n\r\nvVisitCount = 0;\r\n\r\nIf (cNodeType @= 'S');\r\n\tIf ((cState @= '0' % cState @= '') & (cgEdit @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\r\n\t\t#*** Set info for data saving\r\n\t\tCellPutS('Y', cStateCube, cStateMember, 'Saved');\r\n\t\tCellPutS(cUserDisplayName, cStateCube, cStateMember, 'DataChangeUser');\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, 'DataChangeDate');\r\n\tEndIf;\r\n\r\n\tIf ((cState @= '2') & (cgOwn @= 'T'));\r\n\t\tvVisitCount = vVisitCount + 1;\r\n\t\tIf (TM1User @= cCurrentOwnerId);\r\n\r\n\t\t\t#*** Set info for data saving\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, 'Saved');\r\n\t\t\tCellPutS(cUserDisplayName, cStateCube, cStateMember, 'DataChangeUser');\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, 'DataChangeDate');\r\n\t\tElse;\r\n\r\n\t\t\t#*** Write to Error Cube\r\n\r\n\t\t\t#*** Call TI process\r\n\t\t\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', GetProcessName(), \r\n\t\t\t\t'pErrorCode', 'TI_WRONG_OWNER', \r\n\t\t\t\t'pErrorDetails', TM1User|',' |cCurrentOwnerId, \r\n\t\t\t\t'pControl', 'Y');\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\r\nEndIf;\r\n\r\n#*** Write to Error Cube\r\nIf (vVisitCount = 0);\r\n\r\n\t#*** Call TI process\r\n\ttReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', GetProcessName(), \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION', \r\n\t\t'pErrorDetails', 'Node=' | cNode |',' | 'State=' | cState |',' | 'EDIT=' | cgEdit |',' | 'OWN=' | cgOwn |',' | 'OFFLINE=' | cgOffline, \r\n\t\t'pControl', 'Y');\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Write to Log File\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'),\r\n\t\t'The end has been reached.');\r\nEndIf;\r\n#******\r\n#***END(Prolog): }tp_workflow__save__central\r\n#******\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_bounce_conflict_users",
    "HasSecurityAccess": true,
    "PrologProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim,cVersionDim,cVersionSlicesWrite );\r\nEndIf;\r\n\r\npApprovalDim = cApprovalDim;\r\n\r\n#***\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'parameters: pAppId=' | pAppId | '|pNode=' | pNode | '|pApprovalDim=' | pApprovalDim | '|pTime=' | pTime;\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\n#***\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\nvOwnershipNodeOnCurrentNode = CellGetS(cStateCube, pNode, cTakeOwnershipNode);\r\n#***\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'number cubes to check=' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @= 'A' & pNewOwnerID @<>'' & DIMIX('}Clients', pNewOwnerID) >0 );\r\n\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = cVersionSlicesWrite;\r\n\t\tIF (cVersionSlicesWrite @<> '');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\tElse;\r\n\t\t\tvPosVersion = 1;\r\n\t\tEndif;\r\n\r\n\t\tWhile (vPosVersion >0);\r\n\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tcCubeAddress = '';\r\n\t\t\taddConcatSymbol = 0;\r\n\r\n\t\t\tdimensionIndex = 1;\r\n\t\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\t\tcCubeDimensionName = TABDIM(cCubeName, dimensionIndex);\r\n\t\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\t\tdimensionIndex = -1;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\taddConcatSymbol = 1;\r\n\t\t\t\t\tEndIf; \r\n\r\n\t\t\t\t\tIF (cCubeDimensionName @=cVersionDim & vVersionSlice @<> '');\r\n\t\t\t\t\t\tIF (DIMIX(cVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | vVersionSlice; \r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\r\n\t\t\t\t\tIF (pApprovalDim @<> '');\r\n\t\t\t\t\t\tIF (cCubeDimensionName @= pApprovalDim & pNode @<> '');\r\n\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @= '');\r\n\t\t\t\t\t\t\t\tvOwnershipNodeOnCurrentNode = pNode;\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tcCubeAddress = cCubeAddress | vOwnershipNodeOnCurrentNode;\r\n\t\t\t\t\t\t\tvApprovalDimIndex = dimensionIndex;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\t\tEnd;\r\n\r\n\t\t\t## get conflict reservations\r\n\t\t\t## we need two rounds, the first round get all conflict DRs from other users and bounce\r\n\t\t\t## the second round get overlapping DRs from the same user and bounce\r\n\t\t\tvRound = 1;\r\n\t\t\tWhile (vRound <=2);\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tvDelim = '|';\r\n\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vConflictAddress @= '' & cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'There are no conflict reservations on cube ' | cCubeName;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tWHILE (vConflictAddress @<> '' );\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tcLogCubeText = 'Conflict reservation on cube ' | cCubeName | ' for - ' | vConflictAddress;\r\n\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t#Get conflict DR time\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictDRTime = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict DR user\r\n\t\t\t\t\tvConflictAddress=SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictUser = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict address\r\n\t\t\t\t\tvFinalConflictAddress = SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#\r\n\t\t\t\t\tIf (vApprovalDimIndex>0 & vConflictUser @<> '');\r\n\t\t\t\t\t\t#Step 1: Get conflict ownership node\r\n\t\t\t\t\t\tvParseAddress = vFinalConflictAddress;\r\n\t\t\t\t\t\tvParseDimIndex = 1;\r\n\t\t\t\t\t\tWhile (vParseDimIndex <> vApprovalDimIndex);\r\n\t\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\t\tvParseAddress = SUBST(vParseAddress, vParsePos+1, LONG(vParseAddress)-vParsePos); \r\n\t\t\t\t\t\t\tvParseDimIndex = vParseDimIndex +1;\r\n\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\tIF (vParsePos >0);\r\n\t\t\t\t\t\t\tvConflictOwnershipNode = SUBST(vParseAddress, 1, vParsePos-1);\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tvConflictOwnershipNode  = vParseAddress;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Step 2:  Check overlapped leaf nodes between bouncer ownership node and conflict node ID\r\n\t\t\t\t\t\tIF (vConflictOwnershipNode @<> '');\t\r\n\t\t\t\t\t\t\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vConflictOwnershipNode | ']) }, 0), \r\n\t\t\t\t\t\t\t\tTM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vOwnershipNodeOnCurrentNode | ']) }, 0)) }';\r\n\r\n\t\t\t\t\t\t\tvSubsetConflictLeafChildren = 'tp_conflictLeafChildren_' | pExecutionId;\r\n\t\t\t\t\t\t\tIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\t\t\t\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tSubsetCreateByMdx(vSubsetConflictLeafChildren, vMDX, cShadowApprovalDim);\r\n\r\n\t\t\t\t\t\t\t#Step 3: If both users have EDIT permission on one of leaf nodes, we need to bounce the conflict user\r\n\t\t\t\t\t\t\tvTotalConflictLeafNodes = SubsetGetSize(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tvHasConflict = 'F';\r\n\t\t\t\t\t\t\tvLooper = 1;\r\n\t\t\t\t\t\t\tWhile (vLooper <= vTotalConflictLeafNodes);\r\n\t\t\t\t\t\t\t\tvConflictLeafNode = SubsetGetElementName(cShadowApprovalDim, vSubsetConflictLeafChildren, vLooper);\r\n\r\n\t\t\t\t\t\t\t\t#Check conflict user privilege on the node\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', vConflictUser, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvConflictUserRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', pNewOwnerId, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvNewOwnerRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tIF (vConflictUserRight @= 'T' & vNewOwnerRight @= 'T');\r\n\t\t\t\t\t\t\t\t\tvHasConflict = 'T';\r\n\t\t\t\t\t\t\t\t\tvLooper = vTotalConflictLeafNodes;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tvLooper = vLooper +1;\r\n\r\n\t\t\t\t\t\t\tEnd;\r\n\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Bounce conflict user's revervation/ownership\r\n\t\t\t\t\t\tIf (vHasConflict @= 'T');\r\n\r\n\t\t\t\t\t\t\tvDoBounce = 'N';\r\n\t\t\t\t\t\t\tIF (vRound = 1 );\r\n\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\tElseIf (vRound =2 & ( ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode) =1 \r\n\t\t\t\t\t\t\t\t% ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode)  =1));\r\n\t\t\t\t\t\t\t\t#Don't bounce yourself if ownershipnodes are the same\r\n\t\t\t\t\t\t\t\t#Bounce yourself if ownership nodes are different, applies to rejecting a leaf node\r\n\t\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @<> vConflictOwnershipNode);\r\n\t\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\tIF (vDoBounce @='Y');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t\t'pOwnerIdToBounce',vConflictUser, 'pOwnershipNodeToBounce', vConflictOwnershipNode,'pSourceNode', pNode, 'pTime', pTime,\r\n\t\t\t\t\t\t\t\t\t'pCheckBouncingOnly', pCheckBouncingOnly, 'pBouncingMode', pBouncingMode, 'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\t\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\tvIndex = vIndex + 1;\r\n\r\n\t\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\t\r\n\t\t\t\tEnd;\t\r\n\t\t\t\r\n\t\t\t\tvRound = vRound +1;\r\n\t\t\tEnd;\r\n\t\tEnd;\r\n\tEndIf;\r\n \r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pNewOwnerID",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCheckBouncingOnly",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pBouncingMode",
        "Prompt": "",
        "Value": "NEVER",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_bounce_nodes",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW,'\\Y \\M \\d - \\h:\\i:\\s'),\r\n\t\t'Parameters:', pExecutionId, pAppId, pOwnerIdToBounce, pOwnershipNodeToBounce, pControl);\r\nEndIf;\r\n\r\n#***\r\n#constants\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateMeasureDim=cControlPrefix | 'tp_node_info';\r\n\r\n#****\r\nStringGlobalVariable('gShowBouncingMessage');\r\nStringGlobalVariable('gBouncingType');\r\ngShowBouncingMessage = 'N';\r\n\r\n#****\r\n\r\n#IF (Bounce 0)\r\nIF (pOwnerIdToBounce @<>'' & pOwnershipNodeToBounce @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Bounce nodes');\r\n\tEndIf;\r\n\r\n\t###bounce leaf nodes in the package\r\n\tIF (DIMIX('}Clients', pOwnerIdToBounce) >0);\r\n\t\tvOwnerToBounce = ATTRS('}Clients', pOwnerIdToBounce, '}TM1_DefaultDisplayValue');\r\n\tElse;\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\tIf (vOwnerToBounce @= '');\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\r\n\t# *** escape double quotes characters, if found, in the user it (such as CAM user id)\r\n\r\n\tvarX = vOwnerToBounce;\r\n\tvPos = SCAN('\"', varX );\r\n\tIf (vPos > 1);\r\n\t\ttempID = '';\r\n\t\tWhile (vPos > 1);\t\r\n\t\t\tvar1 = SUBST(varX , 1, vPos -1) ;\r\n\t\t\tvar2 = SUBST(varX , vPos + 1, LONG(varX ) - vPos);\t\r\n\t\t\tvarX  = var2;\r\n\t\t\tvPos = SCAN('\"', varX );\r\n\t\t\tIf (vPos > 1);\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' ;\r\n\t\t\tElse;\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' | varX;\r\n\t\t\tEndIf;\r\n\t\tEnd;\r\n        \t\tvOwnerToBounce = tempID;\r\n    \tEndIf;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pSourceNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\tvMdx = '{FILTER(TM1FILTERBYLEVEL( TM1SUBSETTOSET([' | cShadowApprovalDim  | '],\"' | cApprovalSubset | '\"), 0), ';\r\n\tvMdx = vMdx | '[' | cStateCube | '].[' | cStateMeasureDim | '].[CurrentOwner]=\"' | vOwnerToBounce | '\"' ;\r\n\tvMdx = vMdx | 'AND [' | cStateCube | '].[' | cStateMeasureDim | '].[TakeOwnershipNode]=\"' | pOwnershipNodeToBounce | '\" ),';\r\n\tvMdx = vMdx | '[' | cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\r\n\tvSubsetNodesToBounce = 'nodesToBounce_by_' | pExecutionId;\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\tENDIF;\r\n\tSubsetCreateByMdx(vSubsetNodesToBounce, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetNodesToBounce, pSourceNode, 0);\r\n\r\n\tvBounceSize = SubsetGetSize(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\tvUpdateAncestorState = 'Y';\r\n\tIF (pParentTIUpdateStateCube @= 'T' % pParentTIUpdateStateCube @= 'Y' % vBounceSize >100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\tEndif;\r\n\r\n\tlooperBounce = vBounceSize;\r\n\r\n\tWhile (looperBounce >=1);\r\n\t\tvNodeBounce =  SubsetGetElementName(cShadowApprovalDim, vSubsetNodesToBounce, looperBounce);\r\n\t\t#IF (Bounce1)\r\n\t\t#exclude dummy node\r\n\t\tIF (vNodeBounce @<> pSourceNode);\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvBounceOwnerId = CellGetS(cStateCube, vNodeBounce, cCurrentOwnerId);\r\n\t\t\tvBounceOwnershipNode = CellGetS(cStateCube, vNodeBounce, cTakeOwnershipNode);\r\n\t\t\tvBounceState = CellGetS(cStateCube, vNodeBounce, cState);\r\n\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tIF (vBounceOwnerId @=pOwnerIdToBounce & vBounceOwnershipNode @= pOwnershipNodeToBounce);\r\n\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tIf ((vBounceState @= '') % (vBounceState @=cWorkInProgress ));\r\n\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\tcOffline = 'Offline';\r\n\t\t\t\t\tIF (vBounceState @=cWorkInProgress & pCheckBouncingOnly @= 'Y' & (pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE') );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tIF (gBouncingType @= 'OWN');\r\n\t\t\t\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\t\t\t\tvActiveBounceCode = 'NODE_OWNER_ACTIVE';\r\n\t\t\t\t\t\t\tvInactiveBounceCode = 'NODE_OWNER_INACTIVE';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t#bouncing messages for reject action \r\n\t\t\t\t\t\t\tvActiveBounceCode = 'NODE_BOUNCE_OWNER_ACTIVE';\r\n\t\t\t\t\t\t\tvInactiveBounceCode = 'NODE_BOUNCE_OWNER_INACTIVE';\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\tvEdited = CellGetS(cStateCube, vNodeBounce, cBeingEdited);\r\n\t\t\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', vActiveBounceCode,\r\n\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\tlooperBounce= 1;\r\n\t\t\t\t\t\tElseif (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', vInactiveBounceCode,\r\n\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t'pControl', pControl);\t\r\n\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\t\r\n\t\t\t\t\t\t\tlooperBounce= 1;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tElse;\r\n\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, 'clean state fields');\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cCurrentOwner);\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cCurrentOwnerId);\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cTakeOwnershipNode);\r\n\t\t\t\t\t\t#***\r\n\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cBeingEdited);\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cStartEditingDate);\r\n\t\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cOffline);\r\n\r\n\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t#change state\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vNodeBounce, 'pPrivilege', 'BOUNCE','pUpdateAncestorState',vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t#***\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tENDIF;\r\n\t\t\t#***\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tENDIF;\r\n\r\n\t\t#IF (Bounce1)\r\n\t\tENDIF;\r\n\r\n\t\tlooperBounce = looperBounce-1;\r\n\tEND;\r\n\r\n\r\n\tIF (pParentTIUpdateStateCube @='N' & vBounceSize >100);\r\n\t\t#We need to call }tp_update_state_cube to update state for all consolidated nodes\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\tEndif; \r\n\r\n#IF (Bounce 0)\r\nENDIF;\r\n\r\n#Finally take out DR on consolidation level\r\nIF (pCheckBouncingOnly @= 'N');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'revoke ownership on consolidation');\r\n\tEndIf;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pNode', pOwnershipNodeToBounce, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', pOwnerIdToBounce, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\nEndif;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce ) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce );\r\nENDIF;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pOwnerIdToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pOwnershipNodeToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSourceNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pCheckBouncingOnly",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pBouncingMode",
        "Prompt": "",
        "Value": "NEVER",
        "TYpe": "String"
      },
      {
        "Name": "pParentTIUpdateStateCube",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_change_node_state",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pPrivilege, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#*** \r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Make sure node is in approval dimension: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Make sure the privilege can change state: ' | pPrivilege);\r\nEndIf;\r\n\r\nIf ((UPPER(pPrivilege) @<> 'EDIT') & (UPPER(pPrivilege) @<> 'RELEASE') & (UPPER(pPrivilege) @<> 'REJECT') & (UPPER(pPrivilege) @<> 'SUBMIT') & (UPPER(pPrivilege) @<> 'BOUNCE'));\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t'pErrorDetails', pPrivilege | ', ' | pNode,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** State constants\r\n\r\ncNotStarted = '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\n#*** Change node state\r\nStringGlobalVariable('gParentInSubset');\r\ncState= 'State';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\n\r\ncNodeState = CellGetS(cStateCube, pNode, cState);\r\n\r\nvStateChanged = 0;\r\nIf (UPPER(pPrivilege) @= 'EDIT');\r\n\r\n\tIf (DTYPE(cShadowApprovalDim, pNode) @<> 'N');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_NODE_TYPE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | 'Consolidation',\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf ((cNodeState @= '') % (cNodeState @= cNotStarted));\r\n\t\tCellPutS(cWorkInProgress, cStateCube, pNode, cState);\r\n\t\tvStateChanged = 1;\r\n\t\r\n\tElseIf (cNodeState @= cWorkInProgress);\r\n\t\t# Do nothing\r\n\tElse;\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nElseIf (UPPER(pPrivilege) @= 'RELEASE');\r\n\r\n\tIf (DTYPE(cShadowApprovalDim, pNode) @<> 'N');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_NODE_TYPE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | 'Consolidation',\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (cNodeState @<> cWorkInProgress);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tElse;\r\n\t\tCellPutS(cNotStarted, cStateCube, pNode, cState);\r\n\t\tvStateChanged = 1;\r\n\tEndIf;\r\nElseIf (UPPER(pPrivilege) @= 'REJECT');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', pNode);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (cNodeState @<> cLocked);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\t\tCellPutS(cNotStarted, cStateCube, pNode, cState);\r\n\tElse;\r\n\t\tCellPutS(cReady, cStateCube, pNode, cState);\r\n\tEndIf;\r\n\r\n\tvStateChanged = 1;\r\nElseIf (UPPER(pPrivilege) @= 'SUBMIT');\r\n\r\n\tIf (cNodeState @= cLocked);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\t\tCellPutS(cLocked, cStateCube, pNode, cState);\r\n\tElse;\r\n\r\n\t\tIf (cNodeState @<> cReady);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState | ', ' | 'Consolidation',\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tCellPutS(cLocked, cStateCube, pNode, cState);\r\n\r\n\tEndIf;\r\n\r\n\tvStateChanged = 1;\r\nElseIf (UPPER(pPrivilege) @= 'BOUNCE');\r\n\r\n\tIf (DTYPE(cShadowApprovalDim, pNode) @<> 'N');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t\t'pGuid', pExecutionId,\r\n\t\t\t'pProcess', cTM1Process,\r\n\t\t\t'pErrorCode', 'TI_WRONG_NODE_TYPE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | 'Consolidation',\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf ((cNodeState @= '') % (cNodeState @=cWorkInProgress ));\r\n\t\tCellPutS(cNotStarted, cStateCube, pNode, cState);\r\n\t\tvStateChanged = 1;\r\n\t\r\n\tElse;\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t\t'pGuid', pExecutionId,\r\n\t\t\t'pProcess', cTM1Process,\r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', pPrivilege | ', ' | cNodeState,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** If state is changed, set values.\r\nIf (vStateChanged = 1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'State has been changed: ' | pNode);\r\n\tEndIf;\r\n\r\n\tCellPutS(cDisplayUserName, cStateCube, pNode, cStateChangeUser);\r\n\t\r\n\tCellPutS(pTime, cStateCube, pNode, cStateChangeDate);\r\n\r\nEndIf;\r\n\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#*** \r\nIf (vStateChanged = 1 & (pUpdateAncestorState @= 'T' % pUpdateAncestorState @= 'Y'));\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Change parent state');\r\n\tEndIf;\r\n\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\tcApprovalSize = SubsetGetSize(cShadowApprovalDim, cApprovalSubset);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Subset size', cApprovalSubset, NumberToString(cApprovalSize));\r\n\tEndIf;\r\n\r\n\tIf (UPPER(pPrivilege) @= 'EDIT');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Privilege is EDIT');\r\n\t\tEndIf;\r\n\r\n\t\tvParent = pNode;\r\n\t\tvIndexI = 1;\r\n\t\tWhile (vIndexI <= cApprovalDimSize);\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', vParent);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvParent = gParentInSubset;\r\n\r\n\t\t\tIf (vParent @= '');\r\n\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Loop stopped');\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvIndexI = cApprovalDimSize + 1;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (vIndexI <= cApprovalDimSize);\r\n\r\n\t\t\t\tvAllWorkInProgressOrLocked = 1;\r\n\t\t\t\tvIndexJ = 1;\r\n\r\n\t\t\t\tWhile (vIndexJ <= cApprovalSize);\r\n\t\t\t\t\r\n\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cApprovalSubset, vIndexJ);\r\n\t\t\t\t\r\n\t\t\t\t\tIf (ELISPAR(cShadowApprovalDim, vParent, vElement) = 1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvSiblingValue = CellGetS(cStateCube, vElement, cState);\r\n\t\t\t\t\t\tIf (vSiblingValue @= cNotStarted % vSiblingValue @= cIncomplete);\r\n\t\t\t\t\t\t\tvAllWorkInProgressOrLocked = 0;\r\n\t\t\t\t\t\t\tvIndexJ = cApprovalSize;\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvIndexJ = vIndexJ + 1;\r\n\t\t\t\tEnd;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'State has been changed: ' | vParent);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vAllWorkInProgressOrLocked = 1);\r\n\t\t\t\t\tCellPutS(cWorkInProgress, cStateCube, vParent, cState);\r\n\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vParent, cStateChangeUser);\r\n\t\t\t\t\tCellPutS(pTime, cStateCube, vParent, cStateChangeDate);\r\n\t\t\t\tElse;\r\n\t\t\t\t\tCellPutS(cIncomplete, cStateCube, vParent, cState);\r\n\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vParent, cStateChangeUser);\r\n\t\t\t\t\tCellPutS(pTime, cStateCube, vParent, cStateChangeDate);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvIndexI = vIndexI + 1;\r\n\t\tEnd;\r\n\tElseIf ((UPPER(pPrivilege) @= 'BOUNCE') % (UPPER(pPrivilege) @= 'RELEASE'));\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Privilege is BOUNCE or RELEASE');\r\n\t\tEndIf;\r\n\r\n\t\tvParent = pNode;\r\n\t\tvIndexI = 1;\r\n\t\tWhile (vIndexI <= cApprovalDimSize);\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', vParent);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvParent = gParentInSubset;\r\n\r\n\t\t\tIf (vParent @= '');\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Loop stopped');\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvIndexI = cApprovalDimSize + 1;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (vIndexI <= cApprovalDimSize);\r\n\r\n\t\t\t\tvAllNotStarted = 1;\r\n\t\t\t\tvIndexJ = 1;\r\n\t\t\t\t\r\n\t\t\t\tWhile (vIndexJ <= cApprovalSize);\r\n\r\n\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cApprovalSubset, vIndexJ);\r\n\r\n\t\t\t\t\tIf (ELISPAR(cShadowApprovalDim, vParent, vElement) = 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tvSiblingValue = CellGetS(cStateCube, vElement, cState);\r\n\t\t\t\t\t\tIf (vSiblingValue @= cWorkInProgress % vSiblingValue @= cIncomplete % vSiblingValue @=cLocked % vSiblingValue @=cReady);\r\n\t\t\t\t\t\t\tvAllNotStarted= 0;\r\n\t\t\t\t\t\t\tvIndexJ = cApprovalSize;\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvIndexJ = vIndexJ + 1;\r\n\t\t\t\tEnd;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'State has been changed: ' | vParent);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vAllNotStarted = 1);\r\n\t\t\t\t\tCellPutS(cNotStarted, cStateCube, vParent, cState);\r\n\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vParent, cStateChangeUser);\r\n\t\t\t\t\tCellPutS(pTime, cStateCube, vParent, cStateChangeDate);\r\n\t\t\t\tElse;\r\n\t\t\t\t\tCellPutS(cIncomplete, cStateCube, vParent, cState);\r\n\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vParent, cStateChangeUser);\r\n\t\t\t\t\tCellPutS(pTime, cStateCube, vParent, cStateChangeDate);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvIndexI = vIndexI + 1;\r\n\t\tEnd;\r\n\tElseIf (UPPER(pPrivilege) @= 'REJECT');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Privilege is REJECT');\r\n\t\tEndIf;\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', pNode);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tcNodeParent = gParentInSubset;\r\n\t\tIf (cNodeParent @= '');\r\n\t\t\tcNodeParentState = '';\r\n\t\tElse;\r\n\t\t\tcNodeParentState = CellGetS(cStateCube, cNodeParent, cState);\r\n\t\tEndIf;\r\n\r\n\t\tIf (cNodeParentState @= cReady);\r\n\t\t\tCellPutS(cWorkInProgress, cStateCube, cNodeParent, cState);\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, cNodeParent, cStateChangeUser);\r\n\t\t\tCellPutS(pTime, cStateCube, cNodeParent, cStateChangeDate);\r\n\t\tEndIf;\r\n\tElseIf (UPPER(pPrivilege) @= 'SUBMIT');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Privilege is SUBMIT');\r\n\t\tEndIf;\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', pNode);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tcNodeParent = gParentInSubset;\r\n\r\n\t\tvAllChildrenLocked = 1;\r\n\t\tvIndex = 1;\r\n\t\t\r\n\t\tWhile (vIndex <= cApprovalSize);\r\n\r\n\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cApprovalSubset, vIndex);\r\n\t\t\t\r\n\t\t\tIf (ELISPAR(cShadowApprovalDim, cNodeParent, vElement) = 1);\r\n\t\t\t\r\n\t\t\t\tvSiblingValue = CellGetS(cStateCube, vElement, cState);\r\n\t\t\t\tIf (vSiblingValue @<> cLocked);\r\n\t\t\t\t\tvAllChildrenLocked = 0;\r\n\t\t\t\t\tvIndex = cApprovalSize;\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\tEnd;\r\n\r\n\t\tIf (vAllChildrenLocked = 1 & cNodeParent @<> '');\r\n\t\t\tCellPutS(cReady, cStateCube, cNodeParent, cState);\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, cNodeParent, cStateChangeUser);\r\n\t\t\tCellPutS(pTime, cStateCube, cNodeParent, cStateChangeDate);\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pPrivilege",
        "Prompt": "",
        "Value": "EDIT",
        "TYpe": "String"
      },
      {
        "Name": "pUpdateAncestorState",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_enter_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#*** \r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\nif (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check user view privilege\r\nif (cShadowApprovalDim @<> '');\r\n\tStringGlobalVariable('gView');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gView @= 'F');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t'pErrorDetails', 'VIEW' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** Set state viewed\r\ncViewed = 'Viewed';\r\nCellPutS('Y', cStateCube, cStateMember, cViewed);\r\n\r\n#*** Set state reviewed\r\n\r\ncLocked = '4';\r\ncState = 'State';\r\nvValue = CellGetS(cStateCube, cStateMember, cState);\r\n\r\nif (cShadowApprovalDim @<> '');\r\n\tStringGlobalVariable('gReject');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (vValue @= cLocked & gReject @= 'T');\r\n\t\tcReviewed = 'Reviewed';\r\n\t\tCellPutS('Y', cStateCube, cStateMember, cReviewed);\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** Check owner\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncBeingEdited = 'BeingEdited';\r\ncStartEditingDate = 'StartEditingDate';\r\ncOffline = 'Offline';\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\tvValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tIf (vValue @= cWorkInProgress);\r\n\t\tcCurrentOwner = 'CurrentOwnerId';\r\n\t\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\t\tIf (TM1User @= cOwner);\r\n\t\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, cBeingEdited);\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\t\t\r\n\t\t\t#*** Clear offline status\r\n\t\t\tCellPutS('', cStateCube, cStateMember, cOffline);\r\n\t\r\n\t\tEndIf;\r\n\tEndIf;\r\nElseIf (cShadowApprovalDim @<> '');\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\t\t\t\t\t\t\r\n\t### Enter all leaf nodes under consolidation node\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '], \"' | cApprovalSubset |'\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubset = 'enterNode_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubset) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'SubsetCreateByMdx(vSubset, vMDX);:', vMDX);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubset, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubset, pNode, 0);\r\n\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\n\tlooper = vSize;\r\n\tWhile (looper >=1);\r\n\t\tvNode = SubsetGetElementName(cShadowApprovalDim, vSubset, looper);\r\n\r\n\t\tIF (vNode @<> pNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Enter descendant node ' | vNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvState = CellGetS(cStateCube, vNode, cState);\t\r\n\t\t\tcCurrentOwner = 'CurrentOwnerId';\r\n\t\t\tcOwner = CellGetS(cStateCube, vNode, cCurrentOwner);\r\n\t\t\tIf (TM1User @= cOwner & vState @= cWorkInProgress);\r\n\t\r\n\t\t\t\tCellPutS('Y', cStateCube, vNode, cBeingEdited);\r\n\t\t\t\tCellPutS(pTime, cStateCube, vNode, cStartEditingDate);\r\n\t\t\t\r\n\t\t\t\t#*** Clear offline status\r\n\t\t\t\tCellPutS('', cStateCube, vNode, cOffline);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_execute_action",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pUser, pAction, pAnnotationBody, pAnnotationTitle, pControl);\r\nEndIf;\r\n\r\n#***\r\nactionAllowAnnotate = 'F';\r\nIF (pAction @= 'Own');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_own_node',\r\n\t\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, \r\n\t\t'pNewOwnerID', TM1User(), 'pCheckBouncingOnly', 'N', 'pBouncingMode', '', 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\nELSEIF (pAction @= 'Offline');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_offline_node',\r\n\t\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pUser', pUser, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tactionAllowAnnotate = 'T';\r\n\t\r\nELSEIF (pAction @= 'Online');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_online_node',\r\n\t\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pUser', pUser, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tactionAllowAnnotate = 'T';\r\n\t\r\nELSEIF (pAction @= 'Release');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_release_node',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pUser', pUser, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tactionAllowAnnotate = 'T';\r\n\r\nELSEIF (pAction @= 'SubmitChildren');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_submit_leaf_children',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tactionAllowAnnotate = 'T';\r\n\r\nELSEIF (pAction @= 'Submit');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_submit_node',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tactionAllowAnnotate = 'T';\r\n\r\nELSEIF (pAction @= 'Reject');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_reject_nodes',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tactionAllowAnnotate = 'T';\r\n\r\nELSEIF (pAction @= 'Enter');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_enter_node',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\nELSEIF (pAction @= 'Save');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_save_node',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\r\nELSEIF (pAction @= 'Leave');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_leave_node',\r\n\t'pExecutionId', pExecutionId,'pTime', pTime,  'pAppId', pAppId, 'pNode', pNode, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\nELSEIF (pAction @= 'Annotate');\r\n\tactionAllowAnnotate = 'T';\r\n\r\nENDIF;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pAction",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pAnnotationBody",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pAnnotationTitle",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_leave_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim);\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\n\r\nif (cShadowApprovalDim  @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim , pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\nif (cShadowApprovalDim  @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check user view privilege');\r\n\tEndIf;\r\n\t\r\n\tStringGlobalVariable('gView');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gView @= 'F');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t'pErrorDetails', 'VIEW' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** \r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncOffline = 'Offline';\r\ncBeingEdited = 'BeingEdited';\r\ncStartEditingDate = 'StartEditingDate';\r\nIf (cShadowApprovalDim  @= '' % DTYPE(cShadowApprovalDim , pNode) @= 'N');\r\n\tvValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tIf (vValue @= cWorkInProgress);\r\n\t\tcCurrentOwner = 'CurrentOwnerId';\r\n\t\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\t\tIf (TM1User @= cOwner);\r\n\t\t\tvOffline = CellGetS(cStateCube, cStateMember, cOffline);\r\n\t\t\tIf (vOffline @<> 'Y');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Remove being-edited status');\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tCellPutS('', cStateCube, cStateMember, cBeingEdited);\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\nElseIf (cShadowApprovalDim  @<> '');\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\t\r\n\t### Leave all leaf nodes under consolidation node\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim  | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim  | '], \"' | cApprovalSubset |'\")), ['\r\n\t\t| cShadowApprovalDim  | '].[' | gEscapedId | ']}';\r\n\tvSubset = 'leaveNode_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim , vSubset) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim , vSubset);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubset, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim , vSubset, pNode, 0);\r\n\r\n\tvSize = SubsetGetSize(cShadowApprovalDim , vSubset);\r\n\tlooper = vSize;\r\n\tWhile (looper >=1);\r\n\t\tvNode = SubsetGetElementName(cShadowApprovalDim , vSubset, looper);\r\n\r\n\t\tIF (vNode @<> pNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Leave descendant node ' | vNode);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvState = CellGetS(cStateCube, vNode, cState);\t\r\n\t\t\tcCurrentOwner = 'CurrentOwnerId';\r\n\t\t\tcOwner = CellGetS(cStateCube, vNode, cCurrentOwner);\r\n\t\t\tvOffline = CellGetS(cStateCube, vNode, cOffline);\r\n\t\t\tIf (TM1User @= cOwner & vState @= cWorkInProgress & vOffline @<> 'Y');\r\n\t\r\n\t\t\t\tCellPutS('', cStateCube, vNode, cBeingEdited);\r\n\t\t\t\tCellPutS(pTime, cStateCube, vNode, cStartEditingDate);\r\n\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (SubsetExists(cShadowApprovalDim , vSubset) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim , vSubset);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_offline_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\ncCurrentOwner = 'CurrentOwnerId';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncOffline = 'Offline';\r\ncBeingEdited = 'BeingEdited';\r\ncStartEditingDate = 'StartEditingDate';\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\tvValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tIf (vValue @= cWorkInProgress);\r\n\t\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\t\tIf (TM1User @= cOwner);\r\n\r\n\t\t\t#*** Set offline and beingEdited status\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, cOffline);\r\n\t\t\tCellPutS('Y', cStateCube, cStateMember, cBeingEdited);\r\n\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\r\n\t\tEndIf;\r\n\tEndIf;\r\nElseIf (cShadowApprovalDim @<> '');\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\t\t\t\t\t\t\r\n\t### Enter all leaf nodes under consolidation node\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '], \"' | cApprovalSubset |'\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubset = 'enterNode_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubset) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'SubsetCreateByMdx(vSubset, vMDX);:', vMDX);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubset, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubset, pNode, 0);\r\n\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\n\tlooper = vSize;\r\n\tWhile (looper >=1);\r\n\t\tvNode = SubsetGetElementName(cShadowApprovalDim, vSubset, looper);\r\n\r\n\t\tIF (vNode @<> pNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Offline descendant node ' | vNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvState = CellGetS(cStateCube, vNode, cState);\t\r\n\t\t\tcOwner = CellGetS(cStateCube, vNode, cCurrentOwner);\r\n\t\t\tIf (TM1User @= cOwner & vState @= cWorkInProgress);\r\n\t\t\t\r\n\t\t\t\t#*** Set offline and beingEdited status\r\n\t\t\t\tCellPutS('Y', cStateCube, vNode, cOffline);\r\n\t\t\t\tCellPutS('Y', cStateCube, vNode, cBeingEdited);\r\n\t\t\t\tCellPutS(pTime, cStateCube, vNode, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_online_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim = ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive = ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\ncCurrentOwner = 'CurrentOwnerId';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncOffline = 'Offline';\r\ncStartEditingDate = 'StartEditingDate';\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\tvValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tIf (vValue @= cWorkInProgress);\r\n\t\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\t\tIf (TM1User @= cOwner);\r\n\r\n\t\t#*** Clear offline status\r\n\t\tCellPutS('', cStateCube, cStateMember, cOffline);\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\r\n\t\tEndIf;\r\n\tEndIf;\r\nElseIf (cShadowApprovalDim @<> '');\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\t\t\t\t\t\t\r\n\t### Enter all leaf nodes under consolidation node\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '], \"' | cApprovalSubset |'\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubset = 'enterNode_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubset) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'SubsetCreateByMdx(vSubset, vMDX);:', vMDX);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubset, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubset, pNode, 0);\r\n\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\n\tlooper = vSize;\r\n\tWhile (looper >=1);\r\n\t\tvNode = SubsetGetElementName(cShadowApprovalDim, vSubset, looper);\r\n\r\n\t\tIF (vNode @<> pNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Offline descendant node ' | vNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvState = CellGetS(cStateCube, vNode, cState);\t\r\n\t\t\tcOwner = CellGetS(cStateCube, vNode, cCurrentOwner);\r\n\t\t\tIf (TM1User @= cOwner & vState @= cWorkInProgress);\r\n\t\t\t\r\n\t\t\t\t#*** Clear offline status\r\n\t\t\t\tCellPutS('', cStateCube, vNode, cOffline);\r\n\t\t\t\tCellPutS(pTime, cStateCube, vNode, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_own_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', pNewOwnerID, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = pNewOwnerID;\r\nEndIf;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Current user is ' | cDisplayUserName);\r\nEndIf;\r\n\r\n#*** \r\n\r\nif (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\n#constant\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncBeingEdited = 'BeingEdited';\r\n\r\n#****\r\nStringGlobalVariable('gShowBouncingMessage');\r\nStringGlobalVariable('gBouncingType');\r\ngShowBouncingMessage = 'N';\r\ngBouncingType = 'OWN';\r\n#****\r\n\r\nIf (cShadowApprovalDim @<> '');\r\n\tpNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\r\n\tcStateValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tvOwnerId = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\r\n\tIf (pNewOwnerID @<> vOwnerId % cStateValue @<> cWorkInProgress);\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Check node state');\r\n\t\tEndIf;\r\n\r\n\t\tIf (cStateValue @= cLocked);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode | ', ' | cStateValue,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\t#*** \r\n\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tIf (gEdit @= 'F');\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t\t\t'pErrorDetails', 'EDIT' | ', ' | pNode,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\t#***\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Get current ownerID and ownershipNode');\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvOwnerIdToBounce = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, cStateMember, cTakeOwnershipNode);\r\n\r\n\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\tIF ((pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE'));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\tvEdited = CellGetS(cStateCube, cStateMember, cBeingEdited);\r\n\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\t\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\t\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\t\t\tIf (cShadowApprovalDim @= '' & vOwnerIdToBounce @<> '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce central owner ' | vOwnerIdToBounce);\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', vOwnerIdToBounce, 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Reserve owner data slice');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#*** \r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Set owner');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cCurrentOwner);\r\n\t\t\tCellPutS(pNewOwnerID, cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\t\tCellPutS(pNode, cStateCube, cStateMember, cTakeOwnershipNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\r\n\t\t\tIF (pNewOwnerId @=TM1User);\r\n\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\tCellPutS('Y', cStateCube, cStateMember, cBeingEdited);\r\n\r\n\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\t\t\r\n\t\t\tIf (cShadowApprovalDim @= '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Set state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWorkInProgress, cStateCube, cStateMember, cState);\r\n\t\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cStateChangeUser);\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tElseIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'EDIT','pUpdateAncestorState', 'Y', 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\tIf (cShadowApprovalDim @<> '' & vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\t\t\r\n\t\t\t#Don't bounce myself on the same leaf node\r\n\t\t\tIf (vOwnerIdToBounce @= pNewOwnerId & vOwnershipNodeToBounce @= pNode);\r\n\r\n\t\t\tElse;\r\n\t\t\t\t# Bounce related nodes\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,'pSourceNode', pNode,\r\n \t\t\t\t\t'pTime', pTime,'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode, 'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n# Take ownership on consolidation\r\nElse;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\t# Take care of the leaf nodes in the package\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'takeOwnership_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tvUpdateAncestorState = 'Y';\r\n\tvParentTIUpdateStateCube='N';\r\n\tIf (vSize > 100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\t\tvParentTIUpdateStateCube = 'Y';\r\n\tEndIf;\r\n\r\n\tvInactiveLeaf = 'N';\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >= 1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t\t# leaf node, not the dummy node\r\n\t\tIf (vLeafChild @<> pNode);\r\n\r\n\t\t\t#check permission\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t# must have EDIT privilege to take ownership\r\n\t\t\tIf (gEdit @= 'T');\r\n\t\t\t\tcStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\r\n\t\t\t\t# skip submitted node\r\n\t\t\t\tIf (cStateValue @<> cLocked);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#*****'\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Get current owner and ownership node');\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvOwnerIdToBounce = CellGetS(cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\r\n\t\t\t\t\tIf (vOwnerIdToBounce @<> pNewOwnerID % vOwnershipNodeToBounce @<> pNode);\r\n\t\t\t\t\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\t\t\t\t\tIF (pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\t\t\t\t\tvEdited = CellGetS(cStateCube,  vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'N';\r\n\t\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'Y';\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\r\n\t\t\t\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Set new owner');\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\t\t\t\tCellPutS(pNewOwnerID, cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\t\t\tCellPutS(pNode, cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t\t\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\t\t\r\n\t\t\t\t\t\t\tIf (pNewOwnerId @=TM1User);\r\n\t\t\t\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\t\t\t\tCellPutS('Y', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStartEditingDate);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#rollup sandboxes to the ownership node\r\n\t\t\t\t\t\t\t\tvTotalSandbox = ServerSandboxListCountGet;\r\n\t\t\t\t\t\t\t\tvSandboxLooper = vTotalSandbox;\r\n\t\t\t\t\t\t\t\tvLookupString = '_[' | cShadowApprovalDim | '].[' | vleafChild | ']_' | pAppId;\r\n\r\n\t\t\t\t\t\t\t\tWhile (vSandboxLooper >=1);\r\n\t\t\t\t\t\t\t\t\tvLeafSandbox = ServerSandboxGet(vSandboxLooper);\r\n\t\t\t\t\t\t\t\t\tvStartPos = SCAN(vLookupString, vLeafSandbox);\r\n\t\t\t\t\t\t\t\t\tvDisplayName = SUBST(vLeafSandbox, 1, vStartPos -1);\r\n\t\t\t\t\t\t\t\t\tIF (vStartPos >0);\r\n\t\t\t\t\t\t\t\t\t\t vParentSandbox = vDisplayName |  '_[' | cShadowApprovalDim | '].[' | pNode | ']_' | pAppId;\r\n\t \t \t \t \t \t \t \t \t \t IF (ServerSandboxExists(vParentSandbox) =0);\r\n\t\t \t \t \t \t \t \t \t \t \t ServerSandboxCreate(vParentSandbox);\r\n\t \t \t \t \t \t \t \t \t \t EndIf;\r\n\t \t \t \t \t \t \t \t \t \t ServerSandboxMerge(vLeafSandbox, vParentSandbox);\r\n \t  \t  \t  \t  \t  \t  \t  \t  \t  \t ServerSandboxesDelete('client:=:' | TM1User | ', name:=:' | vLeafSandbox);\r\n\r\n\t\t\t\t\t\t\t\t\tEndIf;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvSandboxLooper = vSandboxLooper -1;\t\r\n\t\t\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'EDIT', 'pUpdateAncestorState', vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStateChangeDate);\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tIf (vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,\r\n\t\t\t\t\t\t\t\t'pSourceNode', pNode, 'pTime', pTime, 'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode,  'pParentTIUpdateStateCube',vParentTIUpdateStateCube,'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tIF (pCheckBouncingOnly @= 'Y' & gShowBouncingMessage @='Y');\r\n\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\t\r\n\tIf (vInactiveLeaf @= 'Y');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\t\r\n\tEndIf;\r\n\r\n\tIf (pCheckBouncingOnly @= 'N');\r\n\t\tIf (vLeafOwnedAtRightLevel = 0);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Update consolidated node state change time');\r\n\t\tEndIf;\r\n\t\tCellPutS(pTime, cStateCube, pNode, cStateChangeDate);\r\n\r\n\t\t#****\r\n\r\n\t\t#If we didn't update ancestors' state for an individual leaf node, we must update state cube for all consolidated nodes now\r\n\t\tIF (vUpdateAncestorState @= 'N');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndif;\r\n\t\r\n\t\t#***\r\n\t\t# At last, take care of the consolidated nodes in the package\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNewOwnerID",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCheckBouncingOnly",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pBouncingMode",
        "Prompt": "",
        "Value": "NEVER",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_reject_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#*** Check state cube\r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check user  privilege\r\nStringGlobalVariable('gReject');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (gReject @= 'F');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t'pErrorDetails', 'REJECT' | ', ' | pNode,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check node state\r\n\r\ncLocked = '4';\r\ncState = 'State';\r\nvValue = CellGetS(cStateCube, pNode, cState);\r\nIf (vValue @<> cLocked);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t'pErrorDetails', 'REJECT' | ', ' | pNode | ', ' | vValue,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Change state\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'REJECT', 'pUpdateAncestorState', 'Y','pControl',\r\n\t\tpControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Bounce all users who has edit conflict with this user on the node (if it is leaf)\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncOwnerId = CellGetS(cStateCube, pNode, cCurrentOwnerId);\r\ncOwnershipNode = CellGetS(cStateCube, pNode,cTakeOwnershipNode);\r\n\r\nIF (cOwnerId @<> '' & DIMIX('}Clients', cOwnerId) <> 0 & DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_conflict_users', 'pExecutionId', \r\n\t\tpExecutionId, 'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pTime',pTime,\r\n\t\t'pNewOwnerID', cOwnerId, 'pCheckBouncingOnly', 'N','pBouncingMode', '', 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#tentatively set node state to available and empty owner so that ownership can be taken\r\n\tcAvailable = '0';\r\n\tCellPutS(cAvailable, cStateCube, pNode, cState);\r\n\tCellPutS('', cStateCube, pNode, cCurrentOwnerId);\r\n\r\n\t#return ownership back to original owner on cOwnershipNode level\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_own_node', 'pExecutionId', pExecutionId, 'pTime', pTime,\r\n\t\t'pAppId', pAppId, 'pNode', cOwnershipNode, 'pNewOwnerID', cOwnerId, 'pCheckBouncingOnly', 'N', 'pBouncingMode', '', 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nENDIF;\r\n\r\n#***\r\n\r\n#If ownerID field is empty or the owner does not exist in the }Clients dimension, then we can't return \r\n#ownership to the original owner, need to make it available so that other users can take ownership again\r\nIf ((cOwnerId @= '' % DIMIX('}Clients', cOwnerId) = 0) & DTYPE(cShadowApprovalDim, pNode) @= 'N' );\r\n\tcAvailable = '0';\r\n\tCellPutS(cAvailable, cStateCube, pNode, cState);\r\n\tCellPutS('', cStateCube, pNode, cCurrentOwnerId);\r\nEndif;\r\n\r\n#***Lock slice\r\ncApplicationCubesCube = '}tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\tcCubeAddress = '';\r\n\taddConcatSymbol = 0;\r\n\tIf (cIsAppCube @= 'A');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t'pCube', cCubeName, 'pApprovalDim', cApprovalDim, 'pNode', pNode, 'pLock', 'N', 'pControlDim','','pControlWritableSlices','');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\tEndIf;\r\n\tindexCube = indexCube +1;\r\nEnd;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_reject_nodes",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#*** Check state cube\r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** State constants\r\n\r\ncNotStarted = '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\n#*** Change node state\r\nStringGlobalVariable('gParentInSubset');\r\ncState= 'State';\r\n\r\n#***\r\n#First step: loop all parent nodes and put locked ones into a temp subset \r\n##the user must have Reject permission on each locked parent node\r\n#Second Step:  unlock any locked parents in temp subset,\r\n#Start with the top most parent lower subset index and walk down the tree\r\n#*** Define global variables\r\ncNodeEsc = '';\r\nIf (SCAN(',', pNode) = 0);\r\n\tcNodeEsc = pNode;\r\nElse;\r\n\tcNodeLength = LONG(pNode);\r\n\tlooper = 1;\r\n\tWhile (looper <= cNodeLength);\r\n\t\tcIdChar = SUBST(pNode, looper, 1);\r\n\t\tIf (cIdChar @= ',');\r\n\t\t\tcNodeEsc = cNodeEsc | '_';\r\n\t\tElse;\r\n\t\t\tcNodeEsc = cNodeEsc | cIdChar;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#create a temp subset\r\nvTempSubset = 'tp_temp_parents_to_reject_' | cNodeEsc | '_' | pTime;\r\nIF (SubsetExists(cApprovalDim, vTempSubset) >1);\r\n\tSubsetDestroy(cApprovalDim, vTempSubset);\r\nEndif;\r\nSubsetCreate(cApprovalDim, vTempSubset);\r\nSubsetElementInsert(cApprovalDim, vTempSubset, pNode, 1);\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', pNode);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvNodeParent = gParentInSubset;\r\nWhile (vNodeParent @<> '');\r\n\tvNodeParentState = CellGetS(cStateCube, vNodeParent, cState);\r\n\r\n\t#*** Check user  privilege\r\n\tIf (vNodeParentState @= cLocked);\r\n\t\tStringGlobalVariable('gReject');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode',  vNodeParent, 'pUser', TM1User, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tIf (gReject @= 'F');\r\n\t\t\tIF (SubsetExists(cApprovalDim, vTempSubset)>0);\r\n\t\t\t\tSubsetDestroy(cApprovalDim, vTempSubset);\t\r\n\t\t\tEndif;\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION_DETAILS',\r\n\t\t\t\t'pErrorDetails', 'REJECT' | ', ' |  vNodeParent,\r\n\t\t\t\t'pControl', pControl);\r\n\r\n\t\t\tProcessError;\r\n\r\n\t\tEndIf;\r\n\r\n\t\t#Insert this parent node into a temp subset in approval dimension\r\n\t\t#Always insert into the first position\r\n\t\tSubsetElementInsert(cApprovalDim, vTempSubset, vNodeParent, 1);\r\n\tEndif;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode',  vNodeParent);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tvNodeParent = gParentInSubset;\r\nEnd;\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#***\r\n#Now loop through the temp subset and reject node from top down\r\ntotalRejectNodes = SubsetGetSize(cApprovalDim, vTempSubset);\r\nlooper = 1;\r\nWhile (looper <= totalRejectNodes);\r\n\tvNodeToReject = SubsetGetElementName(cApprovalDim, vTempSubset, looper);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_reject_node', \r\n\t\t'pExecutionId', pExecutionId, 'pTime', pTime, 'pAppId', pAppId, 'pNode',  vNodeToReject,  'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tlooper = looper +1;\r\nEnd;\r\n\r\nIF (SubsetExists(cApprovalDim, vTempSubset)>0);\r\n\tSubsetDestroy(cApprovalDim, vTempSubset);\t\r\nEndif;\r\n\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_release_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nvIsAdmin = CellGetS('}ClientGroups', TM1User, 'ADMIN');\r\n\r\n#*** If an owner was specified then the caller must be an admin, \r\nIf (pUser @<> '' & vIsAdmin @= '');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t'pErrorDetails', TM1User,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\n#constant\r\ncLocked = '4';\r\ncNotStarted = '0';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncBeingEdited = 'BeingEdited';\r\ncOffline = 'Offline';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\n\r\n#****\r\nIf (cShadowApprovalDim @<> '');\r\n\tpNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\n# If at the leaf level\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node state');\r\n\tEndIf;\r\n\tvStateValue = CellGetS(cStateCube, cStateMember, cState);\r\n\r\n\tIf (vStateValue @<> cWorkInProgress);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vStateValue,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Get current ownerID and ownershipNode');\r\n\tEndIf;\r\n\t\r\n\tvCurrentOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\tvCurrentOwnerId = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\tvOwnershipNode = CellGetS(cStateCube, cStateMember, cTakeOwnershipNode);\r\n\t\r\n\t#*** When no user is specified, admins are releasing current owner\r\n\tIf (pUser @= '');\r\n\t\tIf (vIsAdmin @<> '');\r\n\t\t\tpUser = vCurrentOwnerId;\r\n\t\tElse;\r\n\t\t\tpUser = TM1User;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tIf (pUser @<> vCurrentOwnerId);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNER',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vCurrentOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cShadowApprovalDim @<> '' & pNode @<> vOwnershipNode);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNERSHIP_LEVEL',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vCurrentOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Release owner data slice');\r\n\tEndIf;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', pUser, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#*** \r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Clear ownership fields');\r\n\tEndIf;\r\n\r\n\tCellPutS('', cStateCube, cStateMember, cCurrentOwner);\r\n\tCellPutS('', cStateCube, cStateMember, cCurrentOwnerId);\r\n\tCellPutS('', cStateCube, cStateMember, cTakeOwnershipNode);\r\n\tCellPutS('', cStateCube, cStateMember, cBeingEdited);\r\n\tCellPutS('', cStateCube, cStateMember, cOffline);\r\n\t\r\n\tIf (cShadowApprovalDim @= '');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Set state');\r\n\t\tEndIf;\r\n\t\tCellPutS(cNotStarted, cStateCube, cStateMember, cState);\r\n\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cStateChangeUser);\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\tEndIf;\r\n\t\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'RELEASE', 'pUpdateAncestorState', 'Y','pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n# Else at a consolidation\r\nElse;\r\n\r\n\t# If no user was specified, then the current user's ownership is being released\r\n\tIf (pUser @= '');\r\n\t\tpUser = TM1User;\r\n\tEndIf;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\t# Take care of the leaf nodes in the package\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'takeOwnership_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tvUpdateAncestorState = 'Y';\r\n\tIF (vSize > 100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\tEndIf;\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >=1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t\t#leaf node, not the dummy node\r\n\t\tIF (vLeafChild @<> pNode);\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check status for leaf node: ' | vLeafChild);\r\n\t\t\tEndIf;\r\n\t\t\tvStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\t\t\tvCurrentOwnerId = CellGetS(cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\tvOwnershipNode = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Status for leaf node: ' | vLeafChild | ' State=' | vStateValue | ' OwnerId=' | vCurrentOwnerId | ' OwnershipNode=' | vOwnershipNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t# If the current user is the owner of this node take at the consolidation we can release it\r\n\t\t\tIf ((vStateValue @= cWorkInProgress) & (pUser @= vCurrentOwnerId) & (pNode @= vOwnershipNode));\r\n\r\n\r\n\t\t\t\t#*** \r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Clear leaf node ownership fields');\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cOffline);\r\n\t\t\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Change leaf node state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'RELEASE', 'pUpdateAncestorState', vUpdateAncestorState, 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\t\t\t\t\t\t\t\r\n\t\t\tEndIF;\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\n\tIf (vLeafOwnedAtRightLevel =0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#If we didn't update ancestors' state for an individual leaf node, we must update all consolidated nodes now\r\n\tIf (vUpdateAncestorState @= 'N');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId,'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\t#remove DR on consolidated node\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', vCurrentOwnerId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Finished checking for leaf nodes');\r\n\tEndIf;\r\n\t\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_save_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** \r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cShadowApprovalDim @<> '');\r\n\tcPrincipalNodeName = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\t\r\n\t#*** Check user privilege\r\n\tif (cShadowApprovalDim @<> '');\r\n\t\tStringGlobalVariable('gEdit');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tIf (gEdit @= 'F');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t\t'pErrorDetails', 'EDIT' | ', ' | pNode,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\t#*** Check owner\r\n\tcCurrentOwner = 'CurrentOwnerId';\r\n\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\tif ((cShadowApprovalDim @= '' & cOwner @<> '' & TM1User @<> cOwner) %\r\n\t\t\t(cShadowApprovalDim @<> '' & TM1User @<> cOwner));\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNER',\r\n\t\t\t'pErrorDetails', 'Save' | ', ' | pNode | ', ' | cOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\t#*** Set values\r\n\tcSaved = 'Saved';\r\n\tCellPutS('Y', cStateCube, cStateMember, cSaved);\r\n\t\r\n\tcDataChangeUser = 'DataChangeUser';\r\n\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cDataChangeUser);\r\n\t\r\n\tcDataChangeDate = 'DataChangeDate';\r\n\tCellPutS(pTime, cStateCube, cStateMember, cDataChangeDate);\r\nElse;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'save_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >=1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\t\r\n\t\tIf (vLeafChild @<> pNode);\r\n\t\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', TM1User, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tcCurrentOwner = 'CurrentOwner';\r\n\t\t\tcCurrentOwnerValue = CellGetS(cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\r\n\t\t\tcState = 'State';\r\n\t\t\tcStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\t\t\t\r\n\t\t\tcTakeOwnershipNode = 'TakeOwnershipNode';\r\n\t\t\tcTakeOwnershipNodeValue = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\r\n\t\t\tIf (gEdit @= 'T' & \r\n\t\t\t    cDisplayUserName @= cCurrentOwnerValue & \r\n\t\t\t    cStateValue @= '2' &\r\n\t\t\t    cTakeOwnershipNodeValue @= cPrincipalNodeName);\r\n\t    \r\n\t\t\t\t#*** Set values\r\n\t\t\t\tcSaved = 'Saved';\r\n\t\t\t\tCellPutS('Y', cStateCube, vLeafChild, cSaved);\r\n\t\t\t\t\r\n\t\t\t\tcDataChangeUser = 'DataChangeUser';\r\n\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vLeafChild, cDataChangeUser);\r\n\t\t\t\t\r\n\t\t\t\tcDataChangeDate = 'DataChangeDate';\r\n\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cDataChangeDate);\r\n\r\n\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\t\t\tEndIf;\t\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\r\n\tIf (vLeafOwnedAtRightLevel =0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t'pErrorDetails', 'Save' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_submit_leaf_children",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n\r\n#***\r\npNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\n\r\n#can not be a leaf node\r\nIf (DTYPE(cShadowApprovalDim, pNode) @= 'N');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_WRONG_NODE_TYPE',\r\n\t\t'pErrorDetails', 'SUBMIT' | ', ' | pNode,\r\n\t\t'pControl', pControl);\r\n\r\n\tProcessError;\r\n\r\nENDIF;\r\n\t\r\n#*** Escape the node to ensure valid MDX\r\nStringGlobalVariable('gEscapedId');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\nEndIf;\r\n\r\n###Take care of all leaf nodes in the package\r\nvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0),\r\nTM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), [' | cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\nvSubsetLeafChildren = 'sumbitChildren_onConsolidation_' | pExecutionId;\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\nSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\nSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\nvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\nvUpdateAncestorState = 'Y';\r\nIF (vSize > 100);\r\n\tvUpdateAncestorState = 'N';\r\nEndif;\r\n\r\nlooper = vSize;\r\nvLeafOwnedAtRightLevel =0;\r\nWhile (looper >=1);\r\n\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t#leaf node, not the dummy node\r\n\t#IF (1)\r\n\tIF (vLeafChild @<> pNode);\r\n\r\n\t\t#*** Check node state\r\n\t\tcInProgress = '2';\r\n\t\tcState = 'State';\r\n\t\tcOwnershipNode = 'TakeOwnershipNode';\r\n\t\tcOwnerId = 'CurrentOwnerId';\r\n\t\tvLeafState = CellGetS(cStateCube, vLeafChild, cState);\r\n\t\tvTakeOwnershipNode =CellGetS(cStateCube, vLeafChild, cOwnershipNode);\r\n\t\tvOwnerId = CellGetS(cStateCube, vLeafChild, cOwnerId);\r\n\r\n\t\t#IF (1.1)\r\n\t\t#Three conditions:\r\n\t\t#1. leaf node must be InProgress state\r\n\t\t#2. Submit must happen from the take ownership node\r\n\t\t#3. Current user must own the leaf node\r\n\t\tIF (vLeafState @= cInProgress & vTakeOwnershipNode @= pNode & vOwnerId @=TM1User);\r\n\r\n\t\t\t#*** Check user  privilege\r\n\t\t\tStringGlobalVariable('gSubmit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', TM1User, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#IF (1.1.1)\r\n\t\t\tIf (gSubmit @= 'T');\r\n\r\n\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\r\n\t\t\t\t#*** Remove being-edited status\r\n\r\n\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\tcOffline = 'Offline';\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cOffline);\r\n\r\n\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cStartEditingDate);\r\n\r\n\t\t\t\t#*** Change state\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'SUBMIT', 'pUpdateAncestorState', vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\t#Lock this leaf node\r\n\r\n\t\t\t\tcApplicationCubesCube = '}tp_application_cubes';\r\n\t\t\t\ttotalCubes = DIMSIZ('}Cubes');\r\n\t\t\t\tindexCube = 1;\r\n\r\n\t\t\t\tWhile (indexCube <= totalCubes);\r\n\t\t\t\t\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\t\t\t\t\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\t\t\t\t\tIf (cIsAppCube @= 'A');\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t\t\t\t\t'pCube', cCubeName, 'pApprovalDim', cApprovalDim, 'pNode', vLeafChild, 'pLock', 'Y','pControlDim','','pControlWritableSlices', '');\r\n\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\t\tindexCube = indexCube +1;\r\n\t\t\t\tEnd;\r\n\r\n\t\t\t#IF (1.1.1)\r\n\t\t\tEndif;\r\n\r\n\t\t#IF (1.1)\r\n\t\tENDIF;\r\n\r\n\t#IF (1)\r\n\tENDIF;\r\n\r\n\tlooper = looper -1;\r\n\r\nEND;\r\n\r\nIf (vLeafOwnedAtRightLevel =0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t'pErrorDetails', 'SUBMITLEAFCHILDREN' | ', ' | pNode,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n###Remove DR from consolidation\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser',TM1User, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n#If we didn't update ancestors' state for an individual leaf node, we must update all consolidated nodes now\r\nIF (vUpdateAncestorState @= 'N');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_submit_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n'pErrorDetails', cStateCube,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Check node: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check user  privilege\r\nStringGlobalVariable('gSubmit');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n\r\nIf (gSubmit @= 'F');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_NO_PERMISSION',\r\n'pErrorDetails', 'SUBMIT' | ', ' | pNode,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check node state\r\n\r\ncLocked = '4';\r\ncState = 'State';\r\nvValue = CellGetS(cStateCube, pNode, cState);\r\nIf (vValue @= cLocked);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_WRONG_STATE',\r\n'pErrorDetails', 'Submit' | ', ' | pNode | ', ' | vValue,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check node state\r\n\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncState = 'State';\r\nvValue = CellGetS(cStateCube, pNode, cState);\r\nIf ((vValue @<> cReady) & (vValue @<> cWorkInProgress));\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pExecutionId, \r\n'pProcess', cTM1Process, \r\n'pErrorCode', 'TI_WRONG_STATE',\r\n'pErrorDetails', 'Submit' | ', ' | pNode | ', ' | vValue,\r\n'pControl', pControl);\r\n\r\nProcessError;\r\nEndIf;\r\n\r\n#***Check ownership level\r\ncOwnershipNode = 'TakeOwnershipNode';\r\nvOwnershipNode = CellGetS(cStateCube, pNode, cOwnershipNode);\r\nIf (DTYPE(cShadowApprovalDim, pNode) @= 'N' & vOwnershipNode @<> pNode);\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_WRONG_OWNERSHIP_LEVEL',\r\n\t\t'pErrorDetails', 'Submit' | ', ' | pNode | ', ' | vValue,\r\n\t\t'pControl', pControl);\r\n\tProcessError;\r\nENDIF;\r\n\r\n#*** Remove being-edited status\r\n\r\ncBeingEdited = 'BeingEdited';\r\ncOffline = 'Offline';\r\nCellPutS('', cStateCube, pNode, cBeingEdited);\r\nCellPutS('', cStateCube, pNode, cOffline);\r\n\r\ncStartEditingDate = 'StartEditingDate';\r\nCellPutS('', cStateCube, pNode, cStartEditingDate);\r\n\r\n#*** Change state\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'SUBMIT','pUpdateAncestorState', 'Y', 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Reserve approval node slice using TM1 data reservation\r\nExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', TM1User(), 'pControl', pControl);\r\n\r\n#***Lock slice\r\ncApplicationCubesCube = '}tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\tcCubeAddress = '';\r\n\taddConcatSymbol = 0;\r\n\tIf (cIsAppCube @= 'A');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_lock_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t'pCube', cCubeName, 'pApprovalDim', cApprovalDim, 'pNode', pNode, 'pLock', 'Y','pControlDim','','pControlWritableSlices', '');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tindexCube = indexCube +1;\r\nEnd;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#*** Set children to be reviewed\r\n\r\ncApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\r\ncReviewed = 'Reviewed';\r\n\r\nIf (DTYPE(cShadowApprovalDim, pNode) @= 'C');\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cApprovalDimSize);\r\nvElement = DIMNM(cShadowApprovalDim, vIndex);\r\nIf (ELISPAR(cShadowApprovalDim, pNode, vElement) = 1);\r\nCellPutS('Y', cStateCube, vElement, cReviewed);\r\nEndIf;\r\n\r\nvIndex = vIndex + 1;\r\nEnd;\r\n\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_update_user_name",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\tpExecutionId, pAppId, pUserName, pOldUserName, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n#***\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\nElse;\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Update user name in state cube');\r\nEndIf;\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncStateChangeUser = 'StateChangeUser';\r\ncDataChangeUser = 'DataChangeUser';\r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tvOwnerValue = CellGetS(cStateCube, pAppId, cCurrentOwner);\r\n\tvOwnerIdValue = CellGetS(cStateCube, pAppId, cCurrentOwnerId);\r\n\tvStateChangeUserValue = CellGetS(cStateCube, pAppId, cStateChangeUser);\r\n\tvDataChangeUserValue = CellGetS(cStateCube, pAppId, cDataChangeUser);\r\n\r\n\tIf (vOwnerIdValue @= TM1User);\r\n\t\tIf (vOwnerValue @<> pUserName);\r\n\t\t\tCellPutS(pUserName, cStateCube, pAppId, cCurrentOwner);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tIf (vStateChangeUserValue @= pOldUserName);\r\n\t\tCellPutS(pUserName, cStateCube, pAppId, cStateChangeUser);\r\n\tEndIf;\r\n\r\n\tIf (vDataChangeUserValue @= pOldUserName);\r\n\t\tCellPutS(pUserName, cStateCube, pAppId, cDataChangeUser);\r\n\tEndIf;\r\nElse;\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cApprovalDimSize);\r\n\t\tvNodePName = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\r\n\t\tvOwnerValue = CellGetS(cStateCube, vNodePName, cCurrentOwner);\r\n\t\tvOwnerIdValue = CellGetS(cStateCube, vNodePName, cCurrentOwnerId);\r\n\t\tvStateChangeUserValue = CellGetS(cStateCube, vNodePName, cStateChangeUser);\r\n\t\tvDataChangeUserValue = CellGetS(cStateCube, vNodePName, cDataChangeUser);\r\n\t\r\n\t\tIf (vOwnerIdValue @= TM1User);\r\n\t\t\tIf (vOwnerValue @<> pUserName);\r\n\t\t\t\tCellPutS(pUserName, cStateCube, vNodePName, cCurrentOwner);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vStateChangeUserValue @= pOldUserName);\r\n\t\t\tCellPutS(pUserName, cStateCube, vNodePName, cStateChangeUser);\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vDataChangeUserValue @= pOldUserName);\r\n\t\t\tCellPutS(pUserName, cStateCube, vNodePName, cDataChangeUser);\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Update user name in }Clients');\r\nEndIf;\r\n\r\nvDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (vDisplayUserName @<> pUserName);\r\n\tAttrPutS(pUserName, '}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pUserName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pOldUserName",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_bounce_conflict_users",
    "HasSecurityAccess": true,
    "PrologProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\nStringGlobalVariable('gCheckBouncingOnly');\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim,cVersionDim,cVersionSlicesWrite );\r\nEndIf;\r\n\r\npApprovalDim = cApprovalDim;\r\n\r\n#***\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'parameters: pAppId=' | pAppId | '|pNode=' | pNode | '|pApprovalDim=' | pApprovalDim | '|pTime=' | pTime;\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\n#***\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\nvOwnershipNodeOnCurrentNode = CellGetS(cStateCube, pNode, cTakeOwnershipNode);\r\n#***\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'number cubes to check=' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @= 'A' & pNewOwnerID @<>'' & DIMIX('}Clients', pNewOwnerID) >0 );\r\n\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = cVersionSlicesWrite;\r\n\t\tIF (cVersionSlicesWrite @<> '');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\tElse;\r\n\t\t\tvPosVersion = 1;\r\n\t\tEndif;\r\n\r\n\t\tWhile (vPosVersion >0);\r\n\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tcCubeAddress = '';\r\n\t\t\taddConcatSymbol = 0;\r\n\r\n\t\t\tdimensionIndex = 1;\r\n\t\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\t\tcCubeDimensionName = TABDIM(cCubeName, dimensionIndex);\r\n\t\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\t\tdimensionIndex = -1;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\taddConcatSymbol = 1;\r\n\t\t\t\t\tEndIf; \r\n\r\n\t\t\t\t\tIF (cCubeDimensionName @=cVersionDim & vVersionSlice @<> '');\r\n\t\t\t\t\t\tIF (DIMIX(cVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | vVersionSlice; \r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\r\n\t\t\t\t\tIF (pApprovalDim @<> '');\r\n\t\t\t\t\t\tIF (cCubeDimensionName @= pApprovalDim & pNode @<> '');\r\n\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @= '');\r\n\t\t\t\t\t\t\t\tvOwnershipNodeOnCurrentNode = pNode;\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tcCubeAddress = cCubeAddress | vOwnershipNodeOnCurrentNode;\r\n\t\t\t\t\t\t\tvApprovalDimIndex = dimensionIndex;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\t\tEnd;\r\n\r\n\t\t\t## get conflict reservations\r\n\t\t\t## we need two rounds, the first round get all conflict DRs from other users and bounce\r\n\t\t\t## the second round get overlapping DRs from the same user and bounce\r\n\t\t\tvRound = 1;\r\n\t\t\tWhile (vRound <=2);\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tvDelim = '|';\r\n\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vConflictAddress @= '' & cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'There are no conflict reservations on cube ' | cCubeName;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tWHILE (vConflictAddress @<> '' );\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tcLogCubeText = 'Conflict reservation on cube ' | cCubeName | ' for - ' | vConflictAddress;\r\n\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t#Get conflict DR time\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictDRTime = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict DR user\r\n\t\t\t\t\tvConflictAddress=SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictUser = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict address\r\n\t\t\t\t\tvFinalConflictAddress = SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#\r\n\t\t\t\t\tIf (vApprovalDimIndex>0 & vConflictUser @<> '');\r\n\t\t\t\t\t\t#Step 1: Get conflict ownership node\r\n\t\t\t\t\t\tvParseAddress = vFinalConflictAddress;\r\n\t\t\t\t\t\tvParseDimIndex = 1;\r\n\t\t\t\t\t\tWhile (vParseDimIndex <> vApprovalDimIndex);\r\n\t\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\t\tvParseAddress = SUBST(vParseAddress, vParsePos+1, LONG(vParseAddress)-vParsePos); \r\n\t\t\t\t\t\t\tvParseDimIndex = vParseDimIndex +1;\r\n\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\tIF (vParsePos >0);\r\n\t\t\t\t\t\t\tvConflictOwnershipNode = SUBST(vParseAddress, 1, vParsePos-1);\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tvConflictOwnershipNode  = vParseAddress;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Step 2:  Check overlapped leaf nodes between bouncer ownership node and conflict node ID\r\n\t\t\t\t\t\tIF (vConflictOwnershipNode @<> '');\t\r\n\t\t\t\t\t\t\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vConflictOwnershipNode | ']) }, 0), \r\n\t\t\t\t\t\t\t\tTM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vOwnershipNodeOnCurrentNode | ']) }, 0)) }';\r\n\r\n\t\t\t\t\t\t\tvSubsetConflictLeafChildren = 'tp_conflictLeafChildren_' | pExecutionId;\r\n\t\t\t\t\t\t\tIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\t\t\t\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tSubsetCreateByMdx(vSubsetConflictLeafChildren, vMDX, cShadowApprovalDim);\r\n\r\n\t\t\t\t\t\t\t#Step 3: If both users have EDIT permission on one of leaf nodes, we need to bounce the conflict user\r\n\t\t\t\t\t\t\tvTotalConflictLeafNodes = SubsetGetSize(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tvHasConflict = 'F';\r\n\t\t\t\t\t\t\tvLooper = 1;\r\n\t\t\t\t\t\t\tWhile (vLooper <= vTotalConflictLeafNodes);\r\n\t\t\t\t\t\t\t\tvConflictLeafNode = SubsetGetElementName(cShadowApprovalDim, vSubsetConflictLeafChildren, vLooper);\r\n\r\n\t\t\t\t\t\t\t\t#Check conflict user privilege on the node\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', vConflictUser, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvConflictUserRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', pNewOwnerId, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvNewOwnerRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tIF (vConflictUserRight @= 'T' & vNewOwnerRight @= 'T');\r\n\t\t\t\t\t\t\t\t\tvHasConflict = 'T';\r\n\t\t\t\t\t\t\t\t\tvLooper = vTotalConflictLeafNodes;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tvLooper = vLooper +1;\r\n\r\n\t\t\t\t\t\t\tEnd;\r\n\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Bounce conflict user's revervation/ownership\r\n\t\t\t\t\t\tIf (vHasConflict @= 'T');\r\n\r\n\t\t\t\t\t\t\tvDoBounce = 'N';\r\n\t\t\t\t\t\t\tIF (vRound = 1 );\r\n\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\tElseIf (vRound =2 & ( ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode) =1 \r\n\t\t\t\t\t\t\t\t% ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode)  =1));\r\n\t\t\t\t\t\t\t\t#Don't bounce yourself if ownershipnodes are the same\r\n\t\t\t\t\t\t\t\t#Bounce yourself if ownership nodes are different, applies to rejecting a leaf node\r\n\t\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @<> vConflictOwnershipNode);\r\n\t\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\tIF (vDoBounce @='Y');\r\n\t\t\t\t\t\t\t\tIF (gCheckBouncingOnly @='Y');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_bounce_nodes_message', \r\n\t\t\t\t\t\t\t\t\t\t'pExecutionId', pExecutionId,'pAppId', pAppId, 'pOwnerIdToBounce',vConflictUser, \r\n\t\t\t\t\t\t\t\t\t\t'pOwnershipNodeToBounce', vConflictOwnershipNode,'pSourceNode', pNode, 'pTime', pTime,'pControl', pControl);\r\n\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t\t\t'pOwnerIdToBounce',vConflictUser, 'pOwnershipNodeToBounce', vConflictOwnershipNode,'pSourceNode', pNode, 'pTime', pTime,\r\n\t\t\t\t\t\t\t\t\t\t'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\tvIndex = vIndex + 1;\r\n\r\n\t\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\t\r\n\t\t\t\tEnd;\t\r\n\t\t\t\r\n\t\t\t\tvRound = vRound +1;\r\n\t\t\tEnd;\r\n\t\tEnd;\r\n\tEndIf;\r\n \r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\nEndIf;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pNewOwnerID",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_bounce_nodes",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW,'\\Y \\M \\d - \\h:\\i:\\s'),\r\n\t\t'Parameters:', pExecutionId, pAppId, pOwnerIdToBounce, pOwnershipNodeToBounce, pControl);\r\nEndIf;\r\n\r\n#***\r\n#constants\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateMeasureDim=cControlPrefix | 'tp_node_info';\r\n\r\n#****\r\n\r\n#IF (Bounce 0)\r\nIF (pOwnerIdToBounce @<>'' & pOwnershipNodeToBounce @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Bounce nodes');\r\n\tEndIf;\r\n\r\n\t###bounce leaf nodes in the package\r\n\tIF (DIMIX('}Clients', pOwnerIdToBounce) >0);\r\n\t\tvOwnerToBounce = ATTRS('}Clients', pOwnerIdToBounce, '}TM1_DefaultDisplayValue');\r\n\tElse;\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\tIf (vOwnerToBounce @= '');\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\r\n\t# *** escape double quotes characters, if found, in the user it (such as CAM user id)\r\n\r\n\tvarX = vOwnerToBounce;\r\n\tvPos = SCAN('\"', varX );\r\n\tIf (vPos > 1);\r\n\t\ttempID = '';\r\n\t\tWhile (vPos > 1);\t\r\n\t\t\tvar1 = SUBST(varX , 1, vPos -1) ;\r\n\t\t\tvar2 = SUBST(varX , vPos + 1, LONG(varX ) - vPos);\t\r\n\t\t\tvarX  = var2;\r\n\t\t\tvPos = SCAN('\"', varX );\r\n\t\t\tIf (vPos > 1);\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' ;\r\n\t\t\tElse;\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' | varX;\r\n\t\t\tEndIf;\r\n\t\tEnd;\r\n        \t\tvOwnerToBounce = tempID;\r\n    \tEndIf;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pSourceNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\tvMdx = '{FILTER(TM1FILTERBYLEVEL( TM1SUBSETTOSET([' | cShadowApprovalDim  | '],\"' | cApprovalSubset | '\"), 0), ';\r\n\tvMdx = vMdx | '[' | cStateCube | '].[' | cStateMeasureDim | '].[CurrentOwner]=\"' | vOwnerToBounce | '\"' ;\r\n\tvMdx = vMdx | 'AND [' | cStateCube | '].[' | cStateMeasureDim | '].[TakeOwnershipNode]=\"' | pOwnershipNodeToBounce | '\" ),';\r\n\tvMdx = vMdx | '[' | cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\r\n\tvSubsetNodesToBounce = 'nodesToBounce_by_' | pExecutionId;\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\tENDIF;\r\n\tSubsetCreateByMdx(vSubsetNodesToBounce, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetNodesToBounce, pSourceNode, 0);\r\n\r\n\tvBounceSize = SubsetGetSize(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\tvUpdateAncestorState = 'Y';\r\n\tIF (pParentTIUpdateStateCube @= 'T' % pParentTIUpdateStateCube @= 'Y' % vBounceSize >100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\tEndif;\r\n\r\n\tlooperBounce = vBounceSize;\r\n\r\n\tWhile (looperBounce >=1);\r\n\t\tvNodeBounce =  SubsetGetElementName(cShadowApprovalDim, vSubsetNodesToBounce, looperBounce);\r\n\t\t#IF (Bounce1)\r\n\t\t#exclude dummy node\r\n\t\tIF (vNodeBounce @<> pSourceNode);\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvBounceOwnerId = CellGetS(cStateCube, vNodeBounce, cCurrentOwnerId);\r\n\t\t\tvBounceOwnershipNode = CellGetS(cStateCube, vNodeBounce, cTakeOwnershipNode);\r\n\t\t\tvBounceState = CellGetS(cStateCube, vNodeBounce, cState);\r\n\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tIF (vBounceOwnerId @=pOwnerIdToBounce & vBounceOwnershipNode @= pOwnershipNodeToBounce);\r\n\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tIf ((vBounceState @= '') % (vBounceState @=cWorkInProgress ));\r\n\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\tcOffline = 'Offline';\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'clean state fields');\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cCurrentOwner);\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cCurrentOwnerId);\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cTakeOwnershipNode);\r\n\t\t\t\t\t#***\r\n\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cBeingEdited);\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cStartEditingDate);\r\n\t\t\t\t\tCellPutS('', cStateCube, vNodeBounce, cOffline);\r\n\r\n\t\t\t\t\t#***\r\n\t\t\t\t\t#change state\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vNodeBounce, 'pPrivilege', 'BOUNCE','pUpdateAncestorState',vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t#***\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tENDIF;\r\n\t\t\t#***\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tENDIF;\r\n\r\n\t\t#IF (Bounce1)\r\n\t\tENDIF;\r\n\r\n\t\tlooperBounce = looperBounce-1;\r\n\tEND;\r\n\r\n\r\n\tIF (pParentTIUpdateStateCube @='N' & vBounceSize >100);\r\n\t\t#We need to call }tp_update_state_cube to update state for all consolidated nodes\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\tEndif; \r\n\r\n#IF (Bounce 0)\r\nENDIF;\r\n\r\n#Finally take out DR on consolidation level\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'revoke ownership on consolidation');\r\nEndIf;\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t'pAppId', pAppId, 'pNode', pOwnershipNodeToBounce, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', pOwnerIdToBounce, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce ) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce );\r\nENDIF;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pOwnerIdToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pOwnershipNodeToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSourceNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pParentTIUpdateStateCube",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_bounce_nodes_message",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncBounceMode = ATTRS('}tp_applications', pAppId,  'BounceMode');\r\n\r\n#***Get Bounce Mode\r\ncBounceMode = SUBST(cBounceMode, 1, SCAN('_', cBounceMode)-1);\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW,'\\Y \\M \\d - \\h:\\i:\\s'),\r\n\t\t'Parameters:', pExecutionId, pAppId, pOwnerIdToBounce, pOwnershipNodeToBounce, pControl);\r\nEndIf;\r\n\r\n#***\r\n#constants\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateMeasureDim=cControlPrefix | 'tp_node_info';\r\n\r\n#****\r\nStringGlobalVariable('gBouncingType');\r\n\r\n#****\r\n\r\n#IF (Bounce 0)\r\nIF (pOwnerIdToBounce @<>'' & pOwnershipNodeToBounce @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Bounce nodes');\r\n\tEndIf;\r\n\r\n\t###bounce leaf nodes in the package\r\n\tIF (DIMIX('}Clients', pOwnerIdToBounce) >0);\r\n\t\tvOwnerToBounce = ATTRS('}Clients', pOwnerIdToBounce, '}TM1_DefaultDisplayValue');\r\n\tElse;\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\tIf (vOwnerToBounce @= '');\r\n\t\tvOwnerToBounce = pOwnerIdToBounce;\r\n\tEndIf;\r\n\r\n\t# *** escape double quotes characters, if found, in the user it (such as CAM user id)\r\n\r\n\tvarX = vOwnerToBounce;\r\n\tvPos = SCAN('\"', varX );\r\n\tIf (vPos > 1);\r\n\t\ttempID = '';\r\n\t\tWhile (vPos > 1);\t\r\n\t\t\tvar1 = SUBST(varX , 1, vPos -1) ;\r\n\t\t\tvar2 = SUBST(varX , vPos + 1, LONG(varX ) - vPos);\t\r\n\t\t\tvarX  = var2;\r\n\t\t\tvPos = SCAN('\"', varX );\r\n\t\t\tIf (vPos > 1);\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' ;\r\n\t\t\tElse;\r\n\t\t\t\ttempID = tempID | var1 | '\"\"' | varX;\r\n\t\t\tEndIf;\r\n\t\tEnd;\r\n        \t\tvOwnerToBounce = tempID;\r\n    \tEndIf;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pSourceNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\tvMdx = '{FILTER(TM1FILTERBYLEVEL( TM1SUBSETTOSET([' | cShadowApprovalDim  | '],\"' | cApprovalSubset | '\"), 0), ';\r\n\tvMdx = vMdx | '[' | cStateCube | '].[' | cStateMeasureDim | '].[CurrentOwner]=\"' | vOwnerToBounce | '\"' ;\r\n\tvMdx = vMdx | 'AND [' | cStateCube | '].[' | cStateMeasureDim | '].[TakeOwnershipNode]=\"' | pOwnershipNodeToBounce | '\" ),';\r\n\tvMdx = vMdx | '[' | cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\r\n\tvSubsetNodesToBounce = 'nodesToBounce_by_' | pExecutionId;\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\tENDIF;\r\n\tSubsetCreateByMdx(vSubsetNodesToBounce, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetNodesToBounce, pSourceNode, 0);\r\n\r\n\tvBounceSize = SubsetGetSize(cShadowApprovalDim, vSubsetNodesToBounce);\r\n\r\n\tlooperBounce = vBounceSize;\r\n\r\n\tWhile (looperBounce >=1);\r\n\t\tvNodeBounce =  SubsetGetElementName(cShadowApprovalDim, vSubsetNodesToBounce, looperBounce);\r\n\t\t#IF (Bounce1)\r\n\t\t#exclude dummy node\r\n\t\tIF (vNodeBounce @<> pSourceNode);\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvBounceOwnerId = CellGetS(cStateCube, vNodeBounce, cCurrentOwnerId);\r\n\t\t\tvBounceOwnershipNode = CellGetS(cStateCube, vNodeBounce, cTakeOwnershipNode);\r\n\t\t\tvBounceState = CellGetS(cStateCube, vNodeBounce, cState);\r\n\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tIF (vBounceOwnerId @=pOwnerIdToBounce & vBounceOwnershipNode @= pOwnershipNodeToBounce);\r\n\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tIf ((vBounceState @= '') % (vBounceState @=cWorkInProgress ));\r\n\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\tcOffline = 'Offline';\r\n\t\t\t\t\tIF (vBounceState @=cWorkInProgress & (cBounceMode @= 'ALWAYS' % cBounceMode @='ACTIVE') );\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tIF (gBouncingType @= 'OWN');\r\n\t\t\t\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\t\t\t\tvActiveBounceCode = 'NODE_OWNER_ACTIVE';\r\n\t\t\t\t\t\t\tvInactiveBounceCode = 'NODE_OWNER_INACTIVE';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t#bouncing messages for reject action \r\n\t\t\t\t\t\t\tvActiveBounceCode = 'NODE_BOUNCE_OWNER_ACTIVE';\r\n\t\t\t\t\t\t\tvInactiveBounceCode = 'NODE_BOUNCE_OWNER_INACTIVE';\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\tvEdited = CellGetS(cStateCube, vNodeBounce, cBeingEdited);\r\n\t\t\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', vActiveBounceCode,\r\n\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\t\t\tprocessError();\r\n\t\t\t\t\t\tElseif (cBounceMode @= 'ALWAYS');\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t'pErrorCode', vInactiveBounceCode,\r\n\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t'pControl', pControl);\t\r\n\t\t\t\t\t\t\tprocessError();\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t#***\r\n\t\t\t\t#IF (Bounce3)\r\n\t\t\t\tENDIF;\r\n\t\t\t#***\r\n\t\t\t#IF (Bounce2)\r\n\t\t\tENDIF;\r\n\r\n\t\t#IF (Bounce1)\r\n\t\tENDIF;\r\n\r\n\t\tlooperBounce = looperBounce-1;\r\n\tEND;\r\n\r\n#IF (Bounce 0)\r\nENDIF;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetNodesToBounce ) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetNodesToBounce );\r\nENDIF;\r\n\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pOwnerIdToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pOwnershipNodeToBounce",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pSourceNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_lock_app_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApplicationCubesCube = '}tp_application_cubes';\r\nctotalCubes = DIMSIZ('}Cubes');\r\ntIndex = 1;\r\n\r\nWhile (tIndex <= ctotalCubes);\r\n\tcCubeName = DIMNM('}Cubes', tIndex);\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\t\r\n\taddConcatSymbol = 0;\r\n\tIf (cIsAppCube @= 'A');\r\n\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_lock_cube_slices', \r\n\t\t                              'pExecutionId', pExecutionId, \r\n\t\t                               'pAppId', pAppId, \r\n\t\t\t                           'pCube', cCubeName, \r\n\t\t\t                           'pApprovalDim', cApprovalDim, \r\n\t\t\t                           'pNode', pNode, \r\n\t\t\t                           'pLock', pLock,\r\n\t\t\t                           'pControlDim','',\r\n\t\t\t                           'pControlWritableSlices', '');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\ttIndex = tIndex +1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pLock",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_lock_cube_slices",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncTaskNavDimensions = '}tp_task_navigation_dims}' | pAppId;\r\ncTaskNavigationCube = '}tp_task_navigations}' | pAppId;\r\n\r\n#***\r\nIF (pControlDim @='');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\nElse;\r\ncVersionDim = pControlDim;\r\nEndif;\r\n\r\nIF (pControlWritableSlices @='');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\nElse;\r\ncVersionSlicesWrite = pControlWritableSlices;\r\nEndif;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cVersionDim,cVersionSlicesWrite );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId,  pAppId, pCube, pApprovalDim, pNode, pLock);\r\nEndIf;\r\n\r\n\r\n#***Lock slices\r\n\r\ncOverlayDim = '}SecurityOverlay';\t\t\r\nversionSeparater = '|';\r\nvPosVersion = 0;\r\nvStringToScan = cVersionSlicesWrite;\r\nIF (cVersionSlicesWrite @<> '');\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\nElse;\r\n\tvPosVersion = 1;\r\nEndif;\r\n\r\nWhile (vPosVersion >0);\r\n\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tcCubeAddress = '';\r\n\taddConcatSymbol = 0;\r\n\tcOverlayCube = '}SecurityOverlayGlobal_' | pCube;\r\n\r\n\tdimensionIndex = 1;\r\n\tWhile (dimensionIndex > 0 ); \r\n\t\tcCubeDimensionName = TABDIM(cOverlayCube, dimensionIndex);\r\n\t\tIf (cCubeDimensionName @= '');\r\n\t\t\tdimensionIndex = -1;\r\n\t\tElse;\r\n\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\tIF (cCubeDimensionName @<> cOverlayDim);\r\n\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\tEndif;\r\n\r\n\t\t\tElse;\r\n\t\t\t\taddConcatSymbol = 1;\r\n\t\t\tEndIf; \r\n\r\n\t\t\tIF (cCubeDimensionName @=cVersionDim & vVersionSlice @<>'');\r\n\t\t\t\tIF (DIMIX(cVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndif;\r\n\t\t\t\tcCubeAddress = cCubeAddress | vVersionSlice; \r\n\t\t\tEndif;\r\n\r\n\t\t\tvTotalNavDimensions = DIMSIZ(cTaskNavDimensions);\r\n\t\t\tvNavLooper = 1;\r\n\t\t\tWhile (vNavLooper <= vTotalNavDimensions);\r\n\t\t\t\tvNavDimension = DIMNM(cTaskNavDimensions, vNavLooper);\r\n\t\t\t\tIF (cCubeDimensionName @= vNavDimension);\r\n\t\t\t\t\tvNavElem = CellGetS(cTaskNavigationCube, pNode, vNavDimension, 'NavigationElement');\r\n\t\t\t\t\tIF (vNavElem @<>'');\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | vNavElem;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tvNavLooper = vNavLooper +1;\r\n\t\t\tEnd;\r\n\r\n\t\t\t#IF (cCubeDimensionName @= pApprovalDim & pNode @<> '');\r\n\t\t\t#\tcCubeAddress = cCubeAddress | pNode;\r\n\t\t\t#Endif;\r\n\t\tEndIf;\r\n\t\t\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tcLogCubeText = 'Lock address = ' | cCubeAddress;\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n\r\n\t\tdimensionIndex = dimensionIndex + 1;\r\n\tEnd;\r\n\r\n\tIF (CubeExists(cOverlayCube)>0);\r\n\t\tIF (pLock @= 'Y');\r\n\t\t\tSecurityOverlayGlobalLockNode(1,pCube,cCubeAddress);\r\n\t\tElse;\r\n\t\t\tSecurityOverlayGlobalLockNode(0,pCube,cCubeAddress);\r\n\t\tEndif;\r\n\t\t\t\r\n\tEndif;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'lock cube: ' | pCube | ' on address: ' | cCubeAddress;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\nend;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pLock",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pControlDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControlWritableSlices",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_own_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', pNewOwnerID, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = pNewOwnerID;\r\nEndIf;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Current user is ' | cDisplayUserName);\r\nEndIf;\r\n\r\n#*** \r\n\r\nif (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\n#constant\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncBeingEdited = 'BeingEdited';\r\n\r\n#****\r\nStringGlobalVariable('gShowBouncingMessage');\r\nStringGlobalVariable('gBouncingType');\r\ngShowBouncingMessage = 'N';\r\ngBouncingType = 'OWN';\r\n#****\r\n\r\nIf (cShadowApprovalDim @<> '');\r\n\tpNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\r\n\tcStateValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tvOwnerId = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\r\n\tIf (pNewOwnerID @<> vOwnerId % cStateValue @<> cWorkInProgress);\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Check node state');\r\n\t\tEndIf;\r\n\r\n\t\tIf (cStateValue @= cLocked);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode | ', ' | cStateValue,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\t#*** \r\n\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tIf (gEdit @= 'F');\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t\t\t'pErrorDetails', 'EDIT' | ', ' | pNode,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\t#***\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Get current ownerID and ownershipNode');\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvOwnerIdToBounce = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, cStateMember, cTakeOwnershipNode);\r\n\r\n\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\tIF ((pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE'));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\tvEdited = CellGetS(cStateCube, cStateMember, cBeingEdited);\r\n\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\t\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\t\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\t\t\tIf (cShadowApprovalDim @= '' & vOwnerIdToBounce @<> '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce central owner ' | vOwnerIdToBounce);\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', vOwnerIdToBounce, 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Reserve owner data slice');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#*** \r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Set owner');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cCurrentOwner);\r\n\t\t\tCellPutS(pNewOwnerID, cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\t\tCellPutS(pNode, cStateCube, cStateMember, cTakeOwnershipNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\r\n\t\t\tIF (pNewOwnerId @=TM1User);\r\n\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\tCellPutS('Y', cStateCube, cStateMember, cBeingEdited);\r\n\r\n\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\t\t\r\n\t\t\tIf (cShadowApprovalDim @= '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Set state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWorkInProgress, cStateCube, cStateMember, cState);\r\n\t\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cStateChangeUser);\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tElseIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'EDIT','pUpdateAncestorState', 'Y', 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\tIf (cShadowApprovalDim @<> '' & vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\t\t\r\n\t\t\t#Don't bounce myself on the same leaf node\r\n\t\t\tIf (vOwnerIdToBounce @= pNewOwnerId & vOwnershipNodeToBounce @= pNode);\r\n\r\n\t\t\tElse;\r\n\t\t\t\t# Bounce related nodes\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,'pSourceNode', pNode,\r\n \t\t\t\t\t'pTime', pTime,'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode, 'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n# Take ownership on consolidation\r\nElse;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\t# Take care of the leaf nodes in the package\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'takeOwnership_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tvUpdateAncestorState = 'Y';\r\n\tvParentTIUpdateStateCube='N';\r\n\tIf (vSize > 100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\t\tvParentTIUpdateStateCube = 'Y';\r\n\tEndIf;\r\n\r\n\tvInactiveLeaf = 'N';\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >= 1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t\t# leaf node, not the dummy node\r\n\t\tIf (vLeafChild @<> pNode);\r\n\r\n\t\t\t#check permission\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t# must have EDIT privilege to take ownership\r\n\t\t\tIf (gEdit @= 'T');\r\n\t\t\t\tcStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\r\n\t\t\t\t# skip submitted node\r\n\t\t\t\tIf (cStateValue @<> cLocked);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#*****'\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Get current owner and ownership node');\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvOwnerIdToBounce = CellGetS(cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\r\n\t\t\t\t\tIf (vOwnerIdToBounce @<> pNewOwnerID % vOwnershipNodeToBounce @<> pNode);\r\n\t\t\t\t\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\t\t\t\t\tIF (pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\t\t\t\t\tvEdited = CellGetS(cStateCube,  vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'N';\r\n\t\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'Y';\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\r\n\t\t\t\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Set new owner');\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\t\t\t\tCellPutS(pNewOwnerID, cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\t\t\tCellPutS(pNode, cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t\t\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\t\t\r\n\t\t\t\t\t\t\tIf (pNewOwnerId @=TM1User);\r\n\t\t\t\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\t\t\t\tCellPutS('Y', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStartEditingDate);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#rollup sandboxes to the ownership node\r\n\t\t\t\t\t\t\t\tvTotalSandbox = ServerSandboxListCountGet;\r\n\t\t\t\t\t\t\t\tvSandboxLooper = vTotalSandbox;\r\n\t\t\t\t\t\t\t\tvLookupString = '_[' | cShadowApprovalDim | '].[' | vleafChild | ']_' | pAppId;\r\n\r\n\t\t\t\t\t\t\t\tWhile (vSandboxLooper >=1);\r\n\t\t\t\t\t\t\t\t\tvLeafSandbox = ServerSandboxGet(vSandboxLooper);\r\n\t\t\t\t\t\t\t\t\tvStartPos = SCAN(vLookupString, vLeafSandbox);\r\n\t\t\t\t\t\t\t\t\tvDisplayName = SUBST(vLeafSandbox, 1, vStartPos -1);\r\n\t\t\t\t\t\t\t\t\tIF (vStartPos >0);\r\n\t\t\t\t\t\t\t\t\t\t vParentSandbox = vDisplayName |  '_[' | cShadowApprovalDim | '].[' | pNode | ']_' | pAppId;\r\n\t \t \t \t \t \t \t \t \t \t IF (ServerSandboxExists(vParentSandbox) =0);\r\n\t\t \t \t \t \t \t \t \t \t \t ServerSandboxCreate(vParentSandbox);\r\n\t \t \t \t \t \t \t \t \t \t EndIf;\r\n\t \t \t \t \t \t \t \t \t \t ServerSandboxMerge(vLeafSandbox, vParentSandbox);\r\n \t  \t  \t  \t  \t  \t  \t  \t  \t  \t ServerSandboxesDelete('client:=:' | TM1User | ', name:=:' | vLeafSandbox);\r\n\r\n\t\t\t\t\t\t\t\t\tEndIf;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvSandboxLooper = vSandboxLooper -1;\t\r\n\t\t\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'EDIT', 'pUpdateAncestorState', vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStateChangeDate);\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tIf (vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,\r\n\t\t\t\t\t\t\t\t'pSourceNode', pNode, 'pTime', pTime, 'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode,  'pParentTIUpdateStateCube',vParentTIUpdateStateCube,'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tIF (pCheckBouncingOnly @= 'Y' & gShowBouncingMessage @='Y');\r\n\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\t\r\n\tIf (vInactiveLeaf @= 'Y');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\t\r\n\tEndIf;\r\n\r\n\tIf (pCheckBouncingOnly @= 'N');\r\n\t\tIf (vLeafOwnedAtRightLevel = 0);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Update consolidated node state change time');\r\n\t\tEndIf;\r\n\t\tCellPutS(pTime, cStateCube, pNode, cStateChangeDate);\r\n\r\n\t\t#****\r\n\r\n\t\t#If we didn't update ancestors' state for an individual leaf node, we must update state cube for all consolidated nodes now\r\n\t\tIF (vUpdateAncestorState @= 'N');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndif;\r\n\t\r\n\t\t#***\r\n\t\t# At last, take care of the consolidated nodes in the package\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNewOwnerID",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pCheckBouncingOnly",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      },
      {
        "Name": "pBouncingMode",
        "Prompt": "",
        "Value": "NEVER",
        "TYpe": "String"
      },
      {
        "Name": "pControl",
        "Prompt": "",
        "Value": "N",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_reject_ancestors",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', 'Y');\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode);\r\nEndIf;\r\n\r\n#*** Check state cube\r\n\r\ncStateCube = '}tp_application_state}' | pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', 'Y');\r\n\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\nEndIf;\r\n\r\nIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\nProcessError;\r\nEndIf;\r\n\r\n#*** State constants\r\n\r\ncNotStarted = '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\n#*** Change node state\r\nStringGlobalVariable('gParentInSubset');\r\ncState= 'State';\r\n\r\n#***\r\n#First step: loop all parent nodes and put locked ones into a temp subset \r\n##the user must have Reject permission on each locked parent node\r\n#Second Step:  unlock any locked parents in temp subset,\r\n#Start with the top most parent lower subset index and walk down the tree\r\n\r\ncNodeEsc = '';\r\nIf (SCAN(',', pNode) = 0);\r\n\tcNodeEsc = pNode;\r\nElse;\r\n\tcNodeLength = LONG(pNode);\r\n\tlooper = 1;\r\n\tWhile (looper <= cNodeLength);\r\n\t\tcIdChar = SUBST(pNode, looper, 1);\r\n\t\tIf (cIdChar @= ',');\r\n\t\t\tcNodeEsc = cNodeEsc | '_';\r\n\t\tElse;\r\n\t\t\tcNodeEsc = cNodeEsc | cIdChar;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tlooper = looper + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#create a temp subset\r\nvTempSubset = 'tp_temp_parents_to_reject_' | cNodeEsc | '_' | pTime;\r\nIF (SubsetExists(cApprovalDim, vTempSubset) >1);\r\n\tSubsetDestroy(cApprovalDim, vTempSubset);\r\nEndIf;\r\nSubsetCreate(cApprovalDim, vTempSubset);\r\n\r\nvReturnValue = ExecuteProcess('}tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode', pNode);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvNodeParent = gParentInSubset;\r\nWhile (vNodeParent @<> '');\r\n\tvNodeParentState = CellGetS(cStateCube, vNodeParent, cState);\r\n\r\n\t#*** Check user  privilege\r\n\tIf (vNodeParentState @= cLocked);\r\n\t\tStringGlobalVariable('gReject');\r\n\t\tvReturnValue = ExecuteProcess('}tp_get_user_permissions', \r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode',  vNodeParent, 'pUser', TM1User, 'pControl', 'Y');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\tIf (gReject @= 'F');\r\n\t\t\tIF (SubsetExists(cApprovalDim, vTempSubset)>0);\r\n\t\t\t\tSubsetDestroy(cApprovalDim, vTempSubset);\t\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION_DETAILS',\r\n\t\t\t\t'pErrorDetails', 'REJECT' | ', ' |  vNodeParent,\r\n\t\t\t\t'pControl', 'Y');\r\n\r\n\t\t\tProcessError;\r\n\r\n\t\tEndIf;\r\n\r\n\t\t#Insert this parent node into a temp subset in approval dimension\r\n\t\t#Always insert into the first position\r\n\t\tSubsetElementInsert(cApprovalDim, vTempSubset, vNodeParent, 1);\r\n\tEndif;\r\n\r\n\tvReturnValue = ExecuteProcess('}tp_get_parent_in_subset', 'pExecutionId', pExecutionId,\r\n\t\t'pDim', cShadowApprovalDim, 'pSubset', cApprovalSubset, 'pNode',  vNodeParent);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tvNodeParent = gParentInSubset;\r\nEnd;\r\n\r\n#***\r\n#Now loop through the temp subset and reject node from top down\r\ntotalRejectNodes = SubsetGetSize(cApprovalDim, vTempSubset);\r\nlooper = 1;\r\nWhile (looper <= totalRejectNodes);\r\n\tvNodeToReject = SubsetGetElementName(cApprovalDim, vTempSubset, looper);\r\n\t\r\n\tvReturnValue = ExecuteProcess('}tp_workflow_util_lock_app_node', \r\n\t\t'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', vNodeToReject, 'pLock', 'N');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\tEndIf;\r\n\t\t\r\n\tvReturnValue = ExecuteProcess('}tp_workflow_change_node_state', \r\n\t\t'pExecutionId', pExecutionId,\r\n\t\t'pTime', pTime, \r\n\t\t'pAppId', pAppId, \r\n\t\t'pNode', vNodeToReject, \r\n\t\t'pPrivilege', 'REJECT', \r\n\t\t'pUpdateAncestorState', 'Y',\r\n\t\t'pControl',\t'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tlooper = looper +1;\r\nEnd;\r\n\r\nIf (SubsetExists(cApprovalDim, vTempSubset)>0);\r\n\tSubsetDestroy(cApprovalDim, vTempSubset);\t\r\nEndIf;\r\n\r\n\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pTime",
        "Prompt": "",
        "Value": "0",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  },
  {
    "Name": "}tp_workflow_util_reserve_cube_slices",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncTaskNavDimensions = '}tp_task_navigation_dims}' | pAppId;\r\ncTaskNavigationCube = '}tp_task_navigations}' | pAppId;\r\n\r\n#***\r\nIF (pControlDim @='');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\nElse;\r\ncVersionDim = pControlDim;\r\nEndif;\r\n\r\nIF (pControlWritableSlices @='');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\nElse;\r\ncVersionSlicesWrite = pControlWritableSlices;\r\nEndif;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve slice pAppId=' | pAppId | 'pCube= ' |pCube |  '|pNode=' | pNode | '|pApprovalDim=' | pApprovalDim | '|pReserve=' | pReserve | '|User=' | pUser;\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nversionSeparater = '|';\r\nvPosVersion = 0;\r\nvStringToScan = cVersionSlicesWrite;\r\nIF (cVersionSlicesWrite @<> '');\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\nElse;\r\n\tvPosVersion = 1;\r\nEndif;\r\n\r\nWhile (vPosVersion >0);\r\n\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tcCubeAddress = '';\r\n\taddConcatSymbol = 0;\r\n\r\n\tdimensionIndex = 1;\r\n\tWhile (dimensionIndex > 0 ); \r\n\t\tcCubeDimensionName = TABDIM(pCube, dimensionIndex);\r\n\t\tIf (cCubeDimensionName @= '');\r\n\t\t\tdimensionIndex = -1;\r\n\t\tElse;\r\n\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\tElse;\r\n\t\t\t\taddConcatSymbol = 1;\r\n\t\t\tEndIf; \r\n\r\n\t\t\tIF (cCubeDimensionName @=cVersionDim & vVersionSlice @<> '');\r\n\t\t\t\tIF (DIMIX(cVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndif;\r\n\t\t\t\tcCubeAddress = cCubeAddress | vVersionSlice; \r\n\t\t\tEndif;\r\n\r\n\t\t\tvTotalNavDimensions = DIMSIZ(cTaskNavDimensions);\r\n\t\t\tvNavLooper = 1;\r\n\t\t\tWhile (vNavLooper <= vTotalNavDimensions);\r\n\t\t\t\tvNavDimension = DIMNM(cTaskNavDimensions, vNavLooper);\r\n\t\t\t\tIF (cCubeDimensionName @= vNavDimension & pNode @<> '');\r\n\t\t\t\t\tvNavElem = CellGetS(cTaskNavigationCube, pNode, vNavDimension, 'NavigationElement');\r\n\t\t\t\t\tIF (vNavElem @<>'');\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | vNavElem;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tvNavLooper = vNavLooper +1;\r\n\t\t\tEnd;\r\n\r\n\t\t\t#IF (pApprovalDim @<> '');\r\n\t\t\t#\tIF (cCubeDimensionName @= pApprovalDim & pNode @<> '');\r\n\t\t\t#\t\tcCubeAddress = cCubeAddress | pNode;\r\n\t\t\t#\tEndif;\r\n\t\t\t#Endif;\r\n\r\n\t\tEndIf;\r\n\t\t\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n\t\tdimensionIndex = dimensionIndex + 1;\r\n\tEnd;\r\n\r\n\tIf (pReserve @= 'Y');\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tcLogCubeText = 'Calling CubeDataReservationAcquire(' | pCube | ',' | pUser | ',' | cCubeAddress | ')';\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n                        \tIF (DIMIX('}Clients', pUser) >0);\r\n\t\t\tCubeDataReservationAcquire(pCube, pUser, 0, cCubeAddress);\r\n                        \tEndIf;\r\n\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tcLogCubeText = 'Calling CubeDataReservationRelease(' | pCube | ',' | pUser | ',' | cCubeAddress | ')';\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n\r\n                        \tIF (DIMIX('}Clients', pUser) >0);\r\n\t\t\tCubeDataReservationRelease(pCube, pUser, cCubeAddress);\r\n                        \tEndIf;\r\n\t\t\r\n\t\tIF (pUser @= '');\r\n\t\t\tvTotalClients = DIMSIZ('}Clients');\r\n\t\t\tvLooperClient = 1;\r\n\t\t\tWhile (vLooperClient <= vTotalClients);\r\n\t\t\t\tvClient = DIMNM('}Clients', vLooperClient);\r\n\t\t\t\tCubeDataReservationReleaseAll(pCube,vClient,cCubeAddress);\r\n\t\t\t\tvLooperClient = vLooperClient +1;\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\tEndIf;\r\n\t\r\nEnd;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": null,
    "Parameters": [
      {
        "Name": "pExecutionId",
        "Prompt": "",
        "Value": "None",
        "TYpe": "String"
      },
      {
        "Name": "pAppId",
        "Prompt": "",
        "Value": "MyApp",
        "TYpe": "String"
      },
      {
        "Name": "pCube",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pApprovalDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pNode",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pReserve",
        "Prompt": "",
        "Value": "Y",
        "TYpe": "String"
      },
      {
        "Name": "pUser",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControlDim",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      },
      {
        "Name": "pControlWritableSlices",
        "Prompt": "",
        "Value": "NA",
        "TYpe": "String"
      }
    ],
    "Variables": null,
    "attributes": {
      "Caption": "}tp_workflow_util_reserve_cube_slices",
      "Caption_Default": null,
      "CUBE_TYPE": null
    }
  }
]